/*
 * generated by Xtext 2.26.0
 */
grammar InternalFarm;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package uk.ac.kcl.farm.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package uk.ac.kcl.farm.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import uk.ac.kcl.farm.services.FarmGrammarAccess;

}
@parser::members {
	private FarmGrammarAccess grammarAccess;

	public void setGrammarAccess(FarmGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleFarmProgram
entryRuleFarmProgram
:
{ before(grammarAccess.getFarmProgramRule()); }
	 ruleFarmProgram
{ after(grammarAccess.getFarmProgramRule()); } 
	 EOF 
;

// Rule FarmProgram
ruleFarmProgram 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFarmProgramAccess().getStatementsAssignment()); }
		(rule__FarmProgram__StatementsAssignment)*
		{ after(grammarAccess.getFarmProgramAccess().getStatementsAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleClass
entryRuleClass
:
{ before(grammarAccess.getClassRule()); }
	 ruleClass
{ after(grammarAccess.getClassRule()); } 
	 EOF 
;

// Rule Class
ruleClass 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getClassAccess().getAlternatives()); }
		(rule__Class__Alternatives)
		{ after(grammarAccess.getClassAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleParam
entryRuleParam
:
{ before(grammarAccess.getParamRule()); }
	 ruleParam
{ after(grammarAccess.getParamRule()); } 
	 EOF 
;

// Rule Param
ruleParam 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getParamAccess().getAlternatives()); }
		(rule__Param__Alternatives)
		{ after(grammarAccess.getParamAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTypeName
entryRuleTypeName
:
{ before(grammarAccess.getTypeNameRule()); }
	 ruleTypeName
{ after(grammarAccess.getTypeNameRule()); } 
	 EOF 
;

// Rule TypeName
ruleTypeName 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTypeNameAccess().getAlternatives()); }
		(rule__TypeName__Alternatives)
		{ after(grammarAccess.getTypeNameAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStatement
entryRuleStatement
:
{ before(grammarAccess.getStatementRule()); }
	 ruleStatement
{ after(grammarAccess.getStatementRule()); } 
	 EOF 
;

// Rule Statement
ruleStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStatementAccess().getAlternatives()); }
		(rule__Statement__Alternatives)
		{ after(grammarAccess.getStatementAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVariableDeclaration
entryRuleVariableDeclaration
:
{ before(grammarAccess.getVariableDeclarationRule()); }
	 ruleVariableDeclaration
{ after(grammarAccess.getVariableDeclarationRule()); } 
	 EOF 
;

// Rule VariableDeclaration
ruleVariableDeclaration 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVariableDeclarationAccess().getGroup()); }
		(rule__VariableDeclaration__Group__0)
		{ after(grammarAccess.getVariableDeclarationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVariableExpression
entryRuleVariableExpression
:
{ before(grammarAccess.getVariableExpressionRule()); }
	 ruleVariableExpression
{ after(grammarAccess.getVariableExpressionRule()); } 
	 EOF 
;

// Rule VariableExpression
ruleVariableExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVariableExpressionAccess().getAlternatives()); }
		(rule__VariableExpression__Alternatives)
		{ after(grammarAccess.getVariableExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLoopStatement
entryRuleLoopStatement
:
{ before(grammarAccess.getLoopStatementRule()); }
	 ruleLoopStatement
{ after(grammarAccess.getLoopStatementRule()); } 
	 EOF 
;

// Rule LoopStatement
ruleLoopStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLoopStatementAccess().getGroup()); }
		(rule__LoopStatement__Group__0)
		{ after(grammarAccess.getLoopStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRealExpression
entryRuleRealExpression
:
{ before(grammarAccess.getRealExpressionRule()); }
	 ruleRealExpression
{ after(grammarAccess.getRealExpressionRule()); } 
	 EOF 
;

// Rule RealExpression
ruleRealExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRealExpressionAccess().getAdditionParserRuleCall()); }
		ruleAddition
		{ after(grammarAccess.getRealExpressionAccess().getAdditionParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAddition
entryRuleAddition
:
{ before(grammarAccess.getAdditionRule()); }
	 ruleAddition
{ after(grammarAccess.getAdditionRule()); } 
	 EOF 
;

// Rule Addition
ruleAddition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAdditionAccess().getGroup()); }
		(rule__Addition__Group__0)
		{ after(grammarAccess.getAdditionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMultiplication
entryRuleMultiplication
:
{ before(grammarAccess.getMultiplicationRule()); }
	 ruleMultiplication
{ after(grammarAccess.getMultiplicationRule()); } 
	 EOF 
;

// Rule Multiplication
ruleMultiplication 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMultiplicationAccess().getGroup()); }
		(rule__Multiplication__Group__0)
		{ after(grammarAccess.getMultiplicationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRealPrimary
entryRuleRealPrimary
:
{ before(grammarAccess.getRealPrimaryRule()); }
	 ruleRealPrimary
{ after(grammarAccess.getRealPrimaryRule()); } 
	 EOF 
;

// Rule RealPrimary
ruleRealPrimary 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRealPrimaryAccess().getAlternatives()); }
		(rule__RealPrimary__Alternatives)
		{ after(grammarAccess.getRealPrimaryAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRealLiteral
entryRuleRealLiteral
:
{ before(grammarAccess.getRealLiteralRule()); }
	 ruleRealLiteral
{ after(grammarAccess.getRealLiteralRule()); } 
	 EOF 
;

// Rule RealLiteral
ruleRealLiteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRealLiteralAccess().getValAssignment()); }
		(rule__RealLiteral__ValAssignment)
		{ after(grammarAccess.getRealLiteralAccess().getValAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRealVarExpression
entryRuleRealVarExpression
:
{ before(grammarAccess.getRealVarExpressionRule()); }
	 ruleRealVarExpression
{ after(grammarAccess.getRealVarExpressionRule()); } 
	 EOF 
;

// Rule RealVarExpression
ruleRealVarExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRealVarExpressionAccess().getVarAssignment()); }
		(rule__RealVarExpression__VarAssignment)
		{ after(grammarAccess.getRealVarExpressionAccess().getVarAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleREAL
entryRuleREAL
@init { 
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}
:
{ before(grammarAccess.getREALRule()); }
	 ruleREAL
{ after(grammarAccess.getREALRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule REAL
ruleREAL 
	@init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getREALAccess().getGroup()); }
		(rule__REAL__Group__0)
		{ after(grammarAccess.getREALAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}

// Entry rule entryRuleConditionExpression
entryRuleConditionExpression
:
{ before(grammarAccess.getConditionExpressionRule()); }
	 ruleConditionExpression
{ after(grammarAccess.getConditionExpressionRule()); } 
	 EOF 
;

// Rule ConditionExpression
ruleConditionExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConditionExpressionAccess().getOrExpressionParserRuleCall()); }
		ruleOrExpression
		{ after(grammarAccess.getConditionExpressionAccess().getOrExpressionParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOrExpression
entryRuleOrExpression
:
{ before(grammarAccess.getOrExpressionRule()); }
	 ruleOrExpression
{ after(grammarAccess.getOrExpressionRule()); } 
	 EOF 
;

// Rule OrExpression
ruleOrExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOrExpressionAccess().getGroup()); }
		(rule__OrExpression__Group__0)
		{ after(grammarAccess.getOrExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAndExpression
entryRuleAndExpression
:
{ before(grammarAccess.getAndExpressionRule()); }
	 ruleAndExpression
{ after(grammarAccess.getAndExpressionRule()); } 
	 EOF 
;

// Rule AndExpression
ruleAndExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAndExpressionAccess().getGroup()); }
		(rule__AndExpression__Group__0)
		{ after(grammarAccess.getAndExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleComparisonExpression
entryRuleComparisonExpression
:
{ before(grammarAccess.getComparisonExpressionRule()); }
	 ruleComparisonExpression
{ after(grammarAccess.getComparisonExpressionRule()); } 
	 EOF 
;

// Rule ComparisonExpression
ruleComparisonExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getComparisonExpressionAccess().getGroup()); }
		(rule__ComparisonExpression__Group__0)
		{ after(grammarAccess.getComparisonExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBooleanPrimary
entryRuleBooleanPrimary
:
{ before(grammarAccess.getBooleanPrimaryRule()); }
	 ruleBooleanPrimary
{ after(grammarAccess.getBooleanPrimaryRule()); } 
	 EOF 
;

// Rule BooleanPrimary
ruleBooleanPrimary 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBooleanPrimaryAccess().getAlternatives()); }
		(rule__BooleanPrimary__Alternatives)
		{ after(grammarAccess.getBooleanPrimaryAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBooleanLiteral
entryRuleBooleanLiteral
:
{ before(grammarAccess.getBooleanLiteralRule()); }
	 ruleBooleanLiteral
{ after(grammarAccess.getBooleanLiteralRule()); } 
	 EOF 
;

// Rule BooleanLiteral
ruleBooleanLiteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBooleanLiteralAccess().getAlternatives()); }
		(rule__BooleanLiteral__Alternatives)
		{ after(grammarAccess.getBooleanLiteralAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBooleanVarExpression
entryRuleBooleanVarExpression
:
{ before(grammarAccess.getBooleanVarExpressionRule()); }
	 ruleBooleanVarExpression
{ after(grammarAccess.getBooleanVarExpressionRule()); } 
	 EOF 
;

// Rule BooleanVarExpression
ruleBooleanVarExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBooleanVarExpressionAccess().getVarAssignment()); }
		(rule__BooleanVarExpression__VarAssignment)
		{ after(grammarAccess.getBooleanVarExpressionAccess().getVarAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAttributeDeclaration
entryRuleAttributeDeclaration
:
{ before(grammarAccess.getAttributeDeclarationRule()); }
	 ruleAttributeDeclaration
{ after(grammarAccess.getAttributeDeclarationRule()); } 
	 EOF 
;

// Rule AttributeDeclaration
ruleAttributeDeclaration 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAttributeDeclarationAccess().getGroup()); }
		(rule__AttributeDeclaration__Group__0)
		{ after(grammarAccess.getAttributeDeclarationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCrop
entryRuleCrop
:
{ before(grammarAccess.getCropRule()); }
	 ruleCrop
{ after(grammarAccess.getCropRule()); } 
	 EOF 
;

// Rule Crop
ruleCrop 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCropAccess().getGroup()); }
		(rule__Crop__Group__0)
		{ after(grammarAccess.getCropAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCropStages
entryRuleCropStages
:
{ before(grammarAccess.getCropStagesRule()); }
	 ruleCropStages
{ after(grammarAccess.getCropStagesRule()); } 
	 EOF 
;

// Rule CropStages
ruleCropStages 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCropStagesAccess().getGroup()); }
		(rule__CropStages__Group__0)
		{ after(grammarAccess.getCropStagesAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCropStage
entryRuleCropStage
:
{ before(grammarAccess.getCropStageRule()); }
	 ruleCropStage
{ after(grammarAccess.getCropStageRule()); } 
	 EOF 
;

// Rule CropStage
ruleCropStage 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCropStageAccess().getGroup()); }
		(rule__CropStage__Group__0)
		{ after(grammarAccess.getCropStageAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCropAttributes
entryRuleCropAttributes
:
{ before(grammarAccess.getCropAttributesRule()); }
	 ruleCropAttributes
{ after(grammarAccess.getCropAttributesRule()); } 
	 EOF 
;

// Rule CropAttributes
ruleCropAttributes 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCropAttributesAccess().getGroup()); }
		(rule__CropAttributes__Group__0)
		{ after(grammarAccess.getCropAttributesAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMachine
entryRuleMachine
:
{ before(grammarAccess.getMachineRule()); }
	 ruleMachine
{ after(grammarAccess.getMachineRule()); } 
	 EOF 
;

// Rule Machine
ruleMachine 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMachineAccess().getGroup()); }
		(rule__Machine__Group__0)
		{ after(grammarAccess.getMachineAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIP
entryRuleIP
:
{ before(grammarAccess.getIPRule()); }
	 ruleIP
{ after(grammarAccess.getIPRule()); } 
	 EOF 
;

// Rule IP
ruleIP 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIPAccess().getGroup()); }
		(rule__IP__Group__0)
		{ after(grammarAccess.getIPAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleField
entryRuleField
:
{ before(grammarAccess.getFieldRule()); }
	 ruleField
{ after(grammarAccess.getFieldRule()); } 
	 EOF 
;

// Rule Field
ruleField 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFieldAccess().getGroup()); }
		(rule__Field__Group__0)
		{ after(grammarAccess.getFieldAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMission
entryRuleMission
:
{ before(grammarAccess.getMissionRule()); }
	 ruleMission
{ after(grammarAccess.getMissionRule()); } 
	 EOF 
;

// Rule Mission
ruleMission 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMissionAccess().getGroup()); }
		(rule__Mission__Group__0)
		{ after(grammarAccess.getMissionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTask
entryRuleTask
:
{ before(grammarAccess.getTaskRule()); }
	 ruleTask
{ after(grammarAccess.getTaskRule()); } 
	 EOF 
;

// Rule Task
ruleTask 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTaskAccess().getGroup()); }
		(rule__Task__Group__0)
		{ after(grammarAccess.getTaskAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FarmProgram__StatementsAlternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFarmProgramAccess().getStatementsClassParserRuleCall_0_0()); }
		ruleClass
		{ after(grammarAccess.getFarmProgramAccess().getStatementsClassParserRuleCall_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getFarmProgramAccess().getStatementsAttributeDeclarationParserRuleCall_0_1()); }
		ruleAttributeDeclaration
		{ after(grammarAccess.getFarmProgramAccess().getStatementsAttributeDeclarationParserRuleCall_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClassAccess().getCropParserRuleCall_0()); }
		ruleCrop
		{ after(grammarAccess.getClassAccess().getCropParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getClassAccess().getMachineParserRuleCall_1()); }
		ruleMachine
		{ after(grammarAccess.getClassAccess().getMachineParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getClassAccess().getFieldParserRuleCall_2()); }
		ruleField
		{ after(grammarAccess.getClassAccess().getFieldParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getClassAccess().getMissionParserRuleCall_3()); }
		ruleMission
		{ after(grammarAccess.getClassAccess().getMissionParserRuleCall_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Param__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParamAccess().getGroup_0()); }
		(rule__Param__Group_0__0)
		{ after(grammarAccess.getParamAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getParamAccess().getGroup_1()); }
		(rule__Param__Group_1__0)
		{ after(grammarAccess.getParamAccess().getGroup_1()); }
	)
	|
	(
		{ before(grammarAccess.getParamAccess().getGroup_2()); }
		(rule__Param__Group_2__0)
		{ after(grammarAccess.getParamAccess().getGroup_2()); }
	)
	|
	(
		{ before(grammarAccess.getParamAccess().getGroup_3()); }
		(rule__Param__Group_3__0)
		{ after(grammarAccess.getParamAccess().getGroup_3()); }
	)
	|
	(
		{ before(grammarAccess.getParamAccess().getGroup_4()); }
		(rule__Param__Group_4__0)
		{ after(grammarAccess.getParamAccess().getGroup_4()); }
	)
	|
	(
		{ before(grammarAccess.getParamAccess().getGroup_5()); }
		(rule__Param__Group_5__0)
		{ after(grammarAccess.getParamAccess().getGroup_5()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeName__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypeNameAccess().getNullKeyword_0()); }
		'null'
		{ after(grammarAccess.getTypeNameAccess().getNullKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getTypeNameAccess().getRealKeyword_1()); }
		'real'
		{ after(grammarAccess.getTypeNameAccess().getRealKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getTypeNameAccess().getBooleanKeyword_2()); }
		'boolean'
		{ after(grammarAccess.getTypeNameAccess().getBooleanKeyword_2()); }
	)
	|
	(
		{ before(grammarAccess.getTypeNameAccess().getStringKeyword_3()); }
		'string'
		{ after(grammarAccess.getTypeNameAccess().getStringKeyword_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStatementAccess().getVariableDeclarationParserRuleCall_0()); }
		ruleVariableDeclaration
		{ after(grammarAccess.getStatementAccess().getVariableDeclarationParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getLoopStatementParserRuleCall_1()); }
		ruleLoopStatement
		{ after(grammarAccess.getStatementAccess().getLoopStatementParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableExpression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableExpressionAccess().getRealExpressionParserRuleCall_0()); }
		ruleRealExpression
		{ after(grammarAccess.getVariableExpressionAccess().getRealExpressionParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getVariableExpressionAccess().getConditionExpressionParserRuleCall_1()); }
		ruleConditionExpression
		{ after(grammarAccess.getVariableExpressionAccess().getConditionExpressionParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__OperatorAlternatives_1_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAdditionAccess().getOperatorPlusSignKeyword_1_1_0_0()); }
		'+'
		{ after(grammarAccess.getAdditionAccess().getOperatorPlusSignKeyword_1_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getAdditionAccess().getOperatorHyphenMinusKeyword_1_1_0_1()); }
		'-'
		{ after(grammarAccess.getAdditionAccess().getOperatorHyphenMinusKeyword_1_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__OperatorAlternatives_1_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultiplicationAccess().getOperatorAsteriskKeyword_1_1_0_0()); }
		'*'
		{ after(grammarAccess.getMultiplicationAccess().getOperatorAsteriskKeyword_1_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getMultiplicationAccess().getOperatorSolidusKeyword_1_1_0_1()); }
		'/'
		{ after(grammarAccess.getMultiplicationAccess().getOperatorSolidusKeyword_1_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RealPrimary__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRealPrimaryAccess().getRealLiteralParserRuleCall_0()); }
		ruleRealLiteral
		{ after(grammarAccess.getRealPrimaryAccess().getRealLiteralParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getRealPrimaryAccess().getRealVarExpressionParserRuleCall_1()); }
		ruleRealVarExpression
		{ after(grammarAccess.getRealPrimaryAccess().getRealVarExpressionParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getRealPrimaryAccess().getGroup_2()); }
		(rule__RealPrimary__Group_2__0)
		{ after(grammarAccess.getRealPrimaryAccess().getGroup_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__OperatorAlternatives_1_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComparisonExpressionAccess().getOperatorLessThanSignKeyword_1_1_0_0()); }
		'<'
		{ after(grammarAccess.getComparisonExpressionAccess().getOperatorLessThanSignKeyword_1_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getComparisonExpressionAccess().getOperatorLessThanSignEqualsSignKeyword_1_1_0_1()); }
		'<='
		{ after(grammarAccess.getComparisonExpressionAccess().getOperatorLessThanSignEqualsSignKeyword_1_1_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getComparisonExpressionAccess().getOperatorEqualsSignEqualsSignKeyword_1_1_0_2()); }
		'=='
		{ after(grammarAccess.getComparisonExpressionAccess().getOperatorEqualsSignEqualsSignKeyword_1_1_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getComparisonExpressionAccess().getOperatorGreaterThanSignEqualsSignKeyword_1_1_0_3()); }
		'>='
		{ after(grammarAccess.getComparisonExpressionAccess().getOperatorGreaterThanSignEqualsSignKeyword_1_1_0_3()); }
	)
	|
	(
		{ before(grammarAccess.getComparisonExpressionAccess().getOperatorGreaterThanSignKeyword_1_1_0_4()); }
		'>'
		{ after(grammarAccess.getComparisonExpressionAccess().getOperatorGreaterThanSignKeyword_1_1_0_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanPrimary__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBooleanPrimaryAccess().getBooleanLiteralParserRuleCall_0()); }
		ruleBooleanLiteral
		{ after(grammarAccess.getBooleanPrimaryAccess().getBooleanLiteralParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getBooleanPrimaryAccess().getGroup_1()); }
		(rule__BooleanPrimary__Group_1__0)
		{ after(grammarAccess.getBooleanPrimaryAccess().getGroup_1()); }
	)
	|
	(
		{ before(grammarAccess.getBooleanPrimaryAccess().getBooleanVarExpressionParserRuleCall_2()); }
		ruleBooleanVarExpression
		{ after(grammarAccess.getBooleanPrimaryAccess().getBooleanVarExpressionParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanLiteral__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBooleanLiteralAccess().getValAssignment_0()); }
		(rule__BooleanLiteral__ValAssignment_0)
		{ after(grammarAccess.getBooleanLiteralAccess().getValAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getBooleanLiteralAccess().getFalseKeyword_1()); }
		'false'
		{ after(grammarAccess.getBooleanLiteralAccess().getFalseKeyword_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Mission__StatementsAlternatives_3_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMissionAccess().getStatementsStatementParserRuleCall_3_0_0()); }
		ruleStatement
		{ after(grammarAccess.getMissionAccess().getStatementsStatementParserRuleCall_3_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getMissionAccess().getStatementsTaskParserRuleCall_3_0_1()); }
		ruleTask
		{ after(grammarAccess.getMissionAccess().getStatementsTaskParserRuleCall_3_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Param__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Param__Group_0__0__Impl
	rule__Param__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Param__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParamAccess().getCropKeyword_0_0()); }
	'crop'
	{ after(grammarAccess.getParamAccess().getCropKeyword_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Param__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Param__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Param__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParamAccess().getParamAssignment_0_1()); }
	(rule__Param__ParamAssignment_0_1)
	{ after(grammarAccess.getParamAccess().getParamAssignment_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Param__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Param__Group_1__0__Impl
	rule__Param__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Param__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParamAccess().getMachineKeyword_1_0()); }
	'machine'
	{ after(grammarAccess.getParamAccess().getMachineKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Param__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Param__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Param__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParamAccess().getParamAssignment_1_1()); }
	(rule__Param__ParamAssignment_1_1)
	{ after(grammarAccess.getParamAccess().getParamAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Param__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Param__Group_2__0__Impl
	rule__Param__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Param__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParamAccess().getFieldKeyword_2_0()); }
	'field'
	{ after(grammarAccess.getParamAccess().getFieldKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Param__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Param__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Param__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParamAccess().getParamAssignment_2_1()); }
	(rule__Param__ParamAssignment_2_1)
	{ after(grammarAccess.getParamAccess().getParamAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Param__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Param__Group_3__0__Impl
	rule__Param__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Param__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParamAccess().getMissionKeyword_3_0()); }
	'mission'
	{ after(grammarAccess.getParamAccess().getMissionKeyword_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Param__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Param__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Param__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParamAccess().getParamAssignment_3_1()); }
	(rule__Param__ParamAssignment_3_1)
	{ after(grammarAccess.getParamAccess().getParamAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Param__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Param__Group_4__0__Impl
	rule__Param__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Param__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParamAccess().getRealKeyword_4_0()); }
	'real'
	{ after(grammarAccess.getParamAccess().getRealKeyword_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Param__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Param__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Param__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParamAccess().getParamAssignment_4_1()); }
	(rule__Param__ParamAssignment_4_1)
	{ after(grammarAccess.getParamAccess().getParamAssignment_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Param__Group_5__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Param__Group_5__0__Impl
	rule__Param__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Param__Group_5__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParamAccess().getStringKeyword_5_0()); }
	'string'
	{ after(grammarAccess.getParamAccess().getStringKeyword_5_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Param__Group_5__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Param__Group_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Param__Group_5__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParamAccess().getParamAssignment_5_1()); }
	(rule__Param__ParamAssignment_5_1)
	{ after(grammarAccess.getParamAccess().getParamAssignment_5_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VariableDeclaration__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableDeclaration__Group__0__Impl
	rule__VariableDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableDeclarationAccess().getVarKeyword_0()); }
	'var'
	{ after(grammarAccess.getVariableDeclarationAccess().getVarKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableDeclaration__Group__1__Impl
	rule__VariableDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableDeclarationAccess().getNameAssignment_1()); }
	(rule__VariableDeclaration__NameAssignment_1)
	{ after(grammarAccess.getVariableDeclarationAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableDeclaration__Group__2__Impl
	rule__VariableDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableDeclarationAccess().getEqualsSignKeyword_2()); }
	'='
	{ after(grammarAccess.getVariableDeclarationAccess().getEqualsSignKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableDeclaration__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableDeclarationAccess().getValueAssignment_3()); }
	(rule__VariableDeclaration__ValueAssignment_3)
	{ after(grammarAccess.getVariableDeclarationAccess().getValueAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LoopStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LoopStatement__Group__0__Impl
	rule__LoopStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LoopStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoopStatementAccess().getWhileKeyword_0()); }
	'while'
	{ after(grammarAccess.getLoopStatementAccess().getWhileKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LoopStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LoopStatement__Group__1__Impl
	rule__LoopStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LoopStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoopStatementAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getLoopStatementAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LoopStatement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LoopStatement__Group__2__Impl
	rule__LoopStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__LoopStatement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoopStatementAccess().getConditionAssignment_2()); }
	(rule__LoopStatement__ConditionAssignment_2)
	{ after(grammarAccess.getLoopStatementAccess().getConditionAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LoopStatement__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LoopStatement__Group__3__Impl
	rule__LoopStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__LoopStatement__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoopStatementAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getLoopStatementAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LoopStatement__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LoopStatement__Group__4__Impl
	rule__LoopStatement__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__LoopStatement__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoopStatementAccess().getLeftCurlyBracketKeyword_4()); }
	'{'
	{ after(grammarAccess.getLoopStatementAccess().getLeftCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LoopStatement__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LoopStatement__Group__5__Impl
	rule__LoopStatement__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__LoopStatement__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getLoopStatementAccess().getStatementsAssignment_5()); }
		(rule__LoopStatement__StatementsAssignment_5)
		{ after(grammarAccess.getLoopStatementAccess().getStatementsAssignment_5()); }
	)
	(
		{ before(grammarAccess.getLoopStatementAccess().getStatementsAssignment_5()); }
		(rule__LoopStatement__StatementsAssignment_5)*
		{ after(grammarAccess.getLoopStatementAccess().getStatementsAssignment_5()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LoopStatement__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LoopStatement__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LoopStatement__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoopStatementAccess().getRightCurlyBracketKeyword_6()); }
	'}'
	{ after(grammarAccess.getLoopStatementAccess().getRightCurlyBracketKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Addition__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Addition__Group__0__Impl
	rule__Addition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditionAccess().getMultiplicationParserRuleCall_0()); }
	ruleMultiplication
	{ after(grammarAccess.getAdditionAccess().getMultiplicationParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Addition__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditionAccess().getGroup_1()); }
	(rule__Addition__Group_1__0)*
	{ after(grammarAccess.getAdditionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Addition__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Addition__Group_1__0__Impl
	rule__Addition__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditionAccess().getAdditionLeftAction_1_0()); }
	()
	{ after(grammarAccess.getAdditionAccess().getAdditionLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Addition__Group_1__1__Impl
	rule__Addition__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditionAccess().getOperatorAssignment_1_1()); }
	(rule__Addition__OperatorAssignment_1_1)
	{ after(grammarAccess.getAdditionAccess().getOperatorAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Addition__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditionAccess().getRightAssignment_1_2()); }
	(rule__Addition__RightAssignment_1_2)
	{ after(grammarAccess.getAdditionAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Multiplication__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Multiplication__Group__0__Impl
	rule__Multiplication__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicationAccess().getRealPrimaryParserRuleCall_0()); }
	ruleRealPrimary
	{ after(grammarAccess.getMultiplicationAccess().getRealPrimaryParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Multiplication__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicationAccess().getGroup_1()); }
	(rule__Multiplication__Group_1__0)*
	{ after(grammarAccess.getMultiplicationAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Multiplication__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Multiplication__Group_1__0__Impl
	rule__Multiplication__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicationAccess().getMultiplicationLeftAction_1_0()); }
	()
	{ after(grammarAccess.getMultiplicationAccess().getMultiplicationLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Multiplication__Group_1__1__Impl
	rule__Multiplication__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicationAccess().getOperatorAssignment_1_1()); }
	(rule__Multiplication__OperatorAssignment_1_1)
	{ after(grammarAccess.getMultiplicationAccess().getOperatorAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Multiplication__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicationAccess().getRightAssignment_1_2()); }
	(rule__Multiplication__RightAssignment_1_2)
	{ after(grammarAccess.getMultiplicationAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RealPrimary__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RealPrimary__Group_2__0__Impl
	rule__RealPrimary__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RealPrimary__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRealPrimaryAccess().getLeftParenthesisKeyword_2_0()); }
	'('
	{ after(grammarAccess.getRealPrimaryAccess().getLeftParenthesisKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RealPrimary__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RealPrimary__Group_2__1__Impl
	rule__RealPrimary__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RealPrimary__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRealPrimaryAccess().getAdditionParserRuleCall_2_1()); }
	ruleAddition
	{ after(grammarAccess.getRealPrimaryAccess().getAdditionParserRuleCall_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RealPrimary__Group_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RealPrimary__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RealPrimary__Group_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRealPrimaryAccess().getRightParenthesisKeyword_2_2()); }
	')'
	{ after(grammarAccess.getRealPrimaryAccess().getRightParenthesisKeyword_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__REAL__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__REAL__Group__0__Impl
	rule__REAL__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__REAL__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getREALAccess().getINTTerminalRuleCall_0()); }
	(RULE_INT)?
	{ after(grammarAccess.getREALAccess().getINTTerminalRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__REAL__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__REAL__Group__1__Impl
	rule__REAL__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__REAL__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getREALAccess().getFullStopKeyword_1()); }
	'.'
	{ after(grammarAccess.getREALAccess().getFullStopKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__REAL__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__REAL__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__REAL__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getREALAccess().getINTTerminalRuleCall_2()); }
	RULE_INT
	{ after(grammarAccess.getREALAccess().getINTTerminalRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OrExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrExpression__Group__0__Impl
	rule__OrExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrExpressionAccess().getAndExpressionParserRuleCall_0()); }
	ruleAndExpression
	{ after(grammarAccess.getOrExpressionAccess().getAndExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrExpressionAccess().getGroup_1()); }
	(rule__OrExpression__Group_1__0)*
	{ after(grammarAccess.getOrExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OrExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrExpression__Group_1__0__Impl
	rule__OrExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrExpressionAccess().getOrExpressionLeftAction_1_0()); }
	()
	{ after(grammarAccess.getOrExpressionAccess().getOrExpressionLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrExpression__Group_1__1__Impl
	rule__OrExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrExpressionAccess().getOperatorAssignment_1_1()); }
	(rule__OrExpression__OperatorAssignment_1_1)
	{ after(grammarAccess.getOrExpressionAccess().getOperatorAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrExpressionAccess().getRightAssignment_1_2()); }
	(rule__OrExpression__RightAssignment_1_2)
	{ after(grammarAccess.getOrExpressionAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndExpression__Group__0__Impl
	rule__AndExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndExpressionAccess().getComparisonExpressionParserRuleCall_0()); }
	ruleComparisonExpression
	{ after(grammarAccess.getAndExpressionAccess().getComparisonExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndExpressionAccess().getGroup_1()); }
	(rule__AndExpression__Group_1__0)*
	{ after(grammarAccess.getAndExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndExpression__Group_1__0__Impl
	rule__AndExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndExpressionAccess().getAndExpressionLeftAction_1_0()); }
	()
	{ after(grammarAccess.getAndExpressionAccess().getAndExpressionLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndExpression__Group_1__1__Impl
	rule__AndExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndExpressionAccess().getOperatorAssignment_1_1()); }
	(rule__AndExpression__OperatorAssignment_1_1)
	{ after(grammarAccess.getAndExpressionAccess().getOperatorAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndExpressionAccess().getRightAssignment_1_2()); }
	(rule__AndExpression__RightAssignment_1_2)
	{ after(grammarAccess.getAndExpressionAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ComparisonExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ComparisonExpression__Group__0__Impl
	rule__ComparisonExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonExpressionAccess().getBooleanPrimaryParserRuleCall_0()); }
	ruleBooleanPrimary
	{ after(grammarAccess.getComparisonExpressionAccess().getBooleanPrimaryParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ComparisonExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonExpressionAccess().getGroup_1()); }
	(rule__ComparisonExpression__Group_1__0)*
	{ after(grammarAccess.getComparisonExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ComparisonExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ComparisonExpression__Group_1__0__Impl
	rule__ComparisonExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonExpressionAccess().getComparisonExpressionLeftAction_1_0()); }
	()
	{ after(grammarAccess.getComparisonExpressionAccess().getComparisonExpressionLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ComparisonExpression__Group_1__1__Impl
	rule__ComparisonExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonExpressionAccess().getOperatorAssignment_1_1()); }
	(rule__ComparisonExpression__OperatorAssignment_1_1)
	{ after(grammarAccess.getComparisonExpressionAccess().getOperatorAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ComparisonExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonExpressionAccess().getRightAssignment_1_2()); }
	(rule__ComparisonExpression__RightAssignment_1_2)
	{ after(grammarAccess.getComparisonExpressionAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BooleanPrimary__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BooleanPrimary__Group_1__0__Impl
	rule__BooleanPrimary__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanPrimary__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBooleanPrimaryAccess().getLeftSquareBracketKeyword_1_0()); }
	'['
	{ after(grammarAccess.getBooleanPrimaryAccess().getLeftSquareBracketKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanPrimary__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BooleanPrimary__Group_1__1__Impl
	rule__BooleanPrimary__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanPrimary__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBooleanPrimaryAccess().getOrExpressionParserRuleCall_1_1()); }
	ruleOrExpression
	{ after(grammarAccess.getBooleanPrimaryAccess().getOrExpressionParserRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanPrimary__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BooleanPrimary__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanPrimary__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBooleanPrimaryAccess().getRightSquareBracketKeyword_1_2()); }
	']'
	{ after(grammarAccess.getBooleanPrimaryAccess().getRightSquareBracketKeyword_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AttributeDeclaration__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AttributeDeclaration__Group__0__Impl
	rule__AttributeDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeDeclaration__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttributeDeclarationAccess().getDefineKeyword_0()); }
	'define'
	{ after(grammarAccess.getAttributeDeclarationAccess().getDefineKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeDeclaration__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AttributeDeclaration__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeDeclaration__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttributeDeclarationAccess().getNameAssignment_1()); }
	(rule__AttributeDeclaration__NameAssignment_1)
	{ after(grammarAccess.getAttributeDeclarationAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Crop__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Crop__Group__0__Impl
	rule__Crop__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Crop__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCropAccess().getCropKeyword_0()); }
	'crop'
	{ after(grammarAccess.getCropAccess().getCropKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Crop__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Crop__Group__1__Impl
	rule__Crop__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Crop__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCropAccess().getCropAssignment_1()); }
	(rule__Crop__CropAssignment_1)
	{ after(grammarAccess.getCropAccess().getCropAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Crop__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Crop__Group__2__Impl
	rule__Crop__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Crop__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCropAccess().getLeftCurlyBracketKeyword_2()); }
	'{'
	{ after(grammarAccess.getCropAccess().getLeftCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Crop__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Crop__Group__3__Impl
	rule__Crop__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Crop__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCropAccess().getNameKeyword_3()); }
	'name'
	{ after(grammarAccess.getCropAccess().getNameKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Crop__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Crop__Group__4__Impl
	rule__Crop__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Crop__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCropAccess().getColonKeyword_4()); }
	':'
	{ after(grammarAccess.getCropAccess().getColonKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Crop__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Crop__Group__5__Impl
	rule__Crop__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Crop__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCropAccess().getCropNameAssignment_5()); }
	(rule__Crop__CropNameAssignment_5)
	{ after(grammarAccess.getCropAccess().getCropNameAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Crop__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Crop__Group__6__Impl
	rule__Crop__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Crop__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCropAccess().getStageKeyword_6()); }
	'stage'
	{ after(grammarAccess.getCropAccess().getStageKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Crop__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Crop__Group__7__Impl
	rule__Crop__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__Crop__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCropAccess().getColonKeyword_7()); }
	':'
	{ after(grammarAccess.getCropAccess().getColonKeyword_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Crop__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Crop__Group__8__Impl
	rule__Crop__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__Crop__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCropAccess().getLeftSquareBracketKeyword_8()); }
	'['
	{ after(grammarAccess.getCropAccess().getLeftSquareBracketKeyword_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Crop__Group__9
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Crop__Group__9__Impl
	rule__Crop__Group__10
;
finally {
	restoreStackSize(stackSize);
}

rule__Crop__Group__9__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCropAccess().getStatementsAssignment_9()); }
	(rule__Crop__StatementsAssignment_9)
	{ after(grammarAccess.getCropAccess().getStatementsAssignment_9()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Crop__Group__10
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Crop__Group__10__Impl
	rule__Crop__Group__11
;
finally {
	restoreStackSize(stackSize);
}

rule__Crop__Group__10__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCropAccess().getRightSquareBracketKeyword_10()); }
	']'
	{ after(grammarAccess.getCropAccess().getRightSquareBracketKeyword_10()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Crop__Group__11
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Crop__Group__11__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Crop__Group__11__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCropAccess().getRightCurlyBracketKeyword_11()); }
	'}'
	{ after(grammarAccess.getCropAccess().getRightCurlyBracketKeyword_11()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CropStages__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CropStages__Group__0__Impl
	rule__CropStages__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CropStages__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCropStagesAccess().getElementsAssignment_0()); }
	(rule__CropStages__ElementsAssignment_0)
	{ after(grammarAccess.getCropStagesAccess().getElementsAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CropStages__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CropStages__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CropStages__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCropStagesAccess().getGroup_1()); }
	(rule__CropStages__Group_1__0)*
	{ after(grammarAccess.getCropStagesAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CropStages__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CropStages__Group_1__0__Impl
	rule__CropStages__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CropStages__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCropStagesAccess().getCommaKeyword_1_0()); }
	','
	{ after(grammarAccess.getCropStagesAccess().getCommaKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CropStages__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CropStages__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CropStages__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCropStagesAccess().getElementsAssignment_1_1()); }
	(rule__CropStages__ElementsAssignment_1_1)
	{ after(grammarAccess.getCropStagesAccess().getElementsAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CropStage__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CropStage__Group__0__Impl
	rule__CropStage__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CropStage__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCropStageAccess().getLeftCurlyBracketKeyword_0()); }
	'{'
	{ after(grammarAccess.getCropStageAccess().getLeftCurlyBracketKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CropStage__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CropStage__Group__1__Impl
	rule__CropStage__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CropStage__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCropStageAccess().getNameKeyword_1()); }
	'name'
	{ after(grammarAccess.getCropStageAccess().getNameKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CropStage__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CropStage__Group__2__Impl
	rule__CropStage__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__CropStage__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCropStageAccess().getColonKeyword_2()); }
	':'
	{ after(grammarAccess.getCropStageAccess().getColonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CropStage__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CropStage__Group__3__Impl
	rule__CropStage__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__CropStage__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCropStageAccess().getNameAssignment_3()); }
	(rule__CropStage__NameAssignment_3)
	{ after(grammarAccess.getCropStageAccess().getNameAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CropStage__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CropStage__Group__4__Impl
	rule__CropStage__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__CropStage__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCropStageAccess().getTimeConsumedKeyword_4()); }
	'timeConsumed'
	{ after(grammarAccess.getCropStageAccess().getTimeConsumedKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CropStage__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CropStage__Group__5__Impl
	rule__CropStage__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__CropStage__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCropStageAccess().getColonKeyword_5()); }
	':'
	{ after(grammarAccess.getCropStageAccess().getColonKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CropStage__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CropStage__Group__6__Impl
	rule__CropStage__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__CropStage__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCropStageAccess().getTimeConsumendAssignment_6()); }
	(rule__CropStage__TimeConsumendAssignment_6)
	{ after(grammarAccess.getCropStageAccess().getTimeConsumendAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CropStage__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CropStage__Group__7__Impl
	rule__CropStage__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__CropStage__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCropStageAccess().getElementsAssignment_7()); }
	(rule__CropStage__ElementsAssignment_7)*
	{ after(grammarAccess.getCropStageAccess().getElementsAssignment_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CropStage__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CropStage__Group__8__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CropStage__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCropStageAccess().getRightCurlyBracketKeyword_8()); }
	'}'
	{ after(grammarAccess.getCropStageAccess().getRightCurlyBracketKeyword_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CropAttributes__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CropAttributes__Group__0__Impl
	rule__CropAttributes__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CropAttributes__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCropAttributesAccess().getTypeAssignment_0()); }
	(rule__CropAttributes__TypeAssignment_0)
	{ after(grammarAccess.getCropAttributesAccess().getTypeAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CropAttributes__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CropAttributes__Group__1__Impl
	rule__CropAttributes__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CropAttributes__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCropAttributesAccess().getColonKeyword_1()); }
	':'
	{ after(grammarAccess.getCropAttributesAccess().getColonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CropAttributes__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CropAttributes__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CropAttributes__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCropAttributesAccess().getValueAssignment_2()); }
	(rule__CropAttributes__ValueAssignment_2)
	{ after(grammarAccess.getCropAttributesAccess().getValueAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Machine__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Machine__Group__0__Impl
	rule__Machine__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Machine__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMachineAccess().getMachineKeyword_0()); }
	'machine'
	{ after(grammarAccess.getMachineAccess().getMachineKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Machine__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Machine__Group__1__Impl
	rule__Machine__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Machine__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMachineAccess().getNameAssignment_1()); }
	(rule__Machine__NameAssignment_1)
	{ after(grammarAccess.getMachineAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Machine__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Machine__Group__2__Impl
	rule__Machine__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Machine__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMachineAccess().getLeftCurlyBracketKeyword_2()); }
	'{'
	{ after(grammarAccess.getMachineAccess().getLeftCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Machine__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Machine__Group__3__Impl
	rule__Machine__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Machine__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMachineAccess().getNameKeyword_3()); }
	'name'
	{ after(grammarAccess.getMachineAccess().getNameKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Machine__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Machine__Group__4__Impl
	rule__Machine__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Machine__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMachineAccess().getColonKeyword_4()); }
	':'
	{ after(grammarAccess.getMachineAccess().getColonKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Machine__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Machine__Group__5__Impl
	rule__Machine__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Machine__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMachineAccess().getMachineNameAssignment_5()); }
	(rule__Machine__MachineNameAssignment_5)
	{ after(grammarAccess.getMachineAccess().getMachineNameAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Machine__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Machine__Group__6__Impl
	rule__Machine__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Machine__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMachineAccess().getIpKeyword_6()); }
	'ip'
	{ after(grammarAccess.getMachineAccess().getIpKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Machine__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Machine__Group__7__Impl
	rule__Machine__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__Machine__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMachineAccess().getColonKeyword_7()); }
	':'
	{ after(grammarAccess.getMachineAccess().getColonKeyword_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Machine__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Machine__Group__8__Impl
	rule__Machine__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__Machine__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMachineAccess().getIpAssignment_8()); }
	(rule__Machine__IpAssignment_8)
	{ after(grammarAccess.getMachineAccess().getIpAssignment_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Machine__Group__9
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Machine__Group__9__Impl
	rule__Machine__Group__10
;
finally {
	restoreStackSize(stackSize);
}

rule__Machine__Group__9__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getMachineAccess().getStatementsAssignment_9()); }
		(rule__Machine__StatementsAssignment_9)
		{ after(grammarAccess.getMachineAccess().getStatementsAssignment_9()); }
	)
	(
		{ before(grammarAccess.getMachineAccess().getStatementsAssignment_9()); }
		(rule__Machine__StatementsAssignment_9)*
		{ after(grammarAccess.getMachineAccess().getStatementsAssignment_9()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Machine__Group__10
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Machine__Group__10__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Machine__Group__10__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMachineAccess().getRightCurlyBracketKeyword_10()); }
	'}'
	{ after(grammarAccess.getMachineAccess().getRightCurlyBracketKeyword_10()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IP__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IP__Group__0__Impl
	rule__IP__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IP__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIPAccess().getINTTerminalRuleCall_0()); }
	RULE_INT
	{ after(grammarAccess.getIPAccess().getINTTerminalRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IP__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IP__Group__1__Impl
	rule__IP__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IP__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIPAccess().getFullStopKeyword_1()); }
	'.'
	{ after(grammarAccess.getIPAccess().getFullStopKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IP__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IP__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IP__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIPAccess().getGroup_2()); }
	(rule__IP__Group_2__0)
	{ after(grammarAccess.getIPAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IP__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IP__Group_2__0__Impl
	rule__IP__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IP__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIPAccess().getINTTerminalRuleCall_2_0()); }
	RULE_INT
	{ after(grammarAccess.getIPAccess().getINTTerminalRuleCall_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IP__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IP__Group_2__1__Impl
	rule__IP__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IP__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIPAccess().getFullStopKeyword_2_1()); }
	'.'
	{ after(grammarAccess.getIPAccess().getFullStopKeyword_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IP__Group_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IP__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IP__Group_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIPAccess().getGroup_2_2()); }
	(rule__IP__Group_2_2__0)
	{ after(grammarAccess.getIPAccess().getGroup_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IP__Group_2_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IP__Group_2_2__0__Impl
	rule__IP__Group_2_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IP__Group_2_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIPAccess().getINTTerminalRuleCall_2_2_0()); }
	RULE_INT
	{ after(grammarAccess.getIPAccess().getINTTerminalRuleCall_2_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IP__Group_2_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IP__Group_2_2__1__Impl
	rule__IP__Group_2_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IP__Group_2_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIPAccess().getFullStopKeyword_2_2_1()); }
	'.'
	{ after(grammarAccess.getIPAccess().getFullStopKeyword_2_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IP__Group_2_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IP__Group_2_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IP__Group_2_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIPAccess().getINTTerminalRuleCall_2_2_2()); }
	RULE_INT
	{ after(grammarAccess.getIPAccess().getINTTerminalRuleCall_2_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Field__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Field__Group__0__Impl
	rule__Field__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Field__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFieldAccess().getFieldKeyword_0()); }
	'field'
	{ after(grammarAccess.getFieldAccess().getFieldKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Field__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Field__Group__1__Impl
	rule__Field__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Field__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFieldAccess().getNameAssignment_1()); }
	(rule__Field__NameAssignment_1)
	{ after(grammarAccess.getFieldAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Field__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Field__Group__2__Impl
	rule__Field__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Field__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFieldAccess().getLeftCurlyBracketKeyword_2()); }
	'{'
	{ after(grammarAccess.getFieldAccess().getLeftCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Field__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Field__Group__3__Impl
	rule__Field__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Field__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFieldAccess().getFieldKeyword_3()); }
	'field'
	{ after(grammarAccess.getFieldAccess().getFieldKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Field__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Field__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Field__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFieldAccess().getRightCurlyBracketKeyword_4()); }
	'}'
	{ after(grammarAccess.getFieldAccess().getRightCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Mission__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Mission__Group__0__Impl
	rule__Mission__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Mission__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMissionAccess().getMissionKeyword_0()); }
	'mission'
	{ after(grammarAccess.getMissionAccess().getMissionKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Mission__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Mission__Group__1__Impl
	rule__Mission__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Mission__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMissionAccess().getNameAssignment_1()); }
	(rule__Mission__NameAssignment_1)
	{ after(grammarAccess.getMissionAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Mission__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Mission__Group__2__Impl
	rule__Mission__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Mission__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMissionAccess().getLeftCurlyBracketKeyword_2()); }
	'{'
	{ after(grammarAccess.getMissionAccess().getLeftCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Mission__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Mission__Group__3__Impl
	rule__Mission__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Mission__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getMissionAccess().getStatementsAssignment_3()); }
		(rule__Mission__StatementsAssignment_3)
		{ after(grammarAccess.getMissionAccess().getStatementsAssignment_3()); }
	)
	(
		{ before(grammarAccess.getMissionAccess().getStatementsAssignment_3()); }
		(rule__Mission__StatementsAssignment_3)*
		{ after(grammarAccess.getMissionAccess().getStatementsAssignment_3()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Mission__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Mission__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Mission__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMissionAccess().getRightCurlyBracketKeyword_4()); }
	'}'
	{ after(grammarAccess.getMissionAccess().getRightCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Task__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Task__Group__0__Impl
	rule__Task__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTaskAccess().getTaskKeyword_0()); }
	'task'
	{ after(grammarAccess.getTaskAccess().getTaskKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Task__Group__1__Impl
	rule__Task__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTaskAccess().getNameAssignment_1()); }
	(rule__Task__NameAssignment_1)
	{ after(grammarAccess.getTaskAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Task__Group__2__Impl
	rule__Task__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTaskAccess().getLeftParenthesisKeyword_2()); }
	'('
	{ after(grammarAccess.getTaskAccess().getLeftParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Task__Group__3__Impl
	rule__Task__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTaskAccess().getGroup_3()); }
	(rule__Task__Group_3__0)?
	{ after(grammarAccess.getTaskAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Task__Group__4__Impl
	rule__Task__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTaskAccess().getRightParenthesisKeyword_4()); }
	')'
	{ after(grammarAccess.getTaskAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Task__Group__5__Impl
	rule__Task__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTaskAccess().getColonKeyword_5()); }
	':'
	{ after(grammarAccess.getTaskAccess().getColonKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Task__Group__6__Impl
	rule__Task__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTaskAccess().getTypeNameAssignment_6()); }
	(rule__Task__TypeNameAssignment_6)
	{ after(grammarAccess.getTaskAccess().getTypeNameAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Task__Group__7__Impl
	rule__Task__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTaskAccess().getLeftCurlyBracketKeyword_7()); }
	'{'
	{ after(grammarAccess.getTaskAccess().getLeftCurlyBracketKeyword_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Task__Group__8__Impl
	rule__Task__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTaskAccess().getStatementsAssignment_8()); }
	(rule__Task__StatementsAssignment_8)*
	{ after(grammarAccess.getTaskAccess().getStatementsAssignment_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group__9
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Task__Group__9__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group__9__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTaskAccess().getRightCurlyBracketKeyword_9()); }
	'}'
	{ after(grammarAccess.getTaskAccess().getRightCurlyBracketKeyword_9()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Task__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Task__Group_3__0__Impl
	rule__Task__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTaskAccess().getParmasAssignment_3_0()); }
	(rule__Task__ParmasAssignment_3_0)
	{ after(grammarAccess.getTaskAccess().getParmasAssignment_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Task__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTaskAccess().getGroup_3_1()); }
	(rule__Task__Group_3_1__0)*
	{ after(grammarAccess.getTaskAccess().getGroup_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Task__Group_3_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Task__Group_3_1__0__Impl
	rule__Task__Group_3_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group_3_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTaskAccess().getCommaKeyword_3_1_0()); }
	','
	{ after(grammarAccess.getTaskAccess().getCommaKeyword_3_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group_3_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Task__Group_3_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group_3_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTaskAccess().getParmasAssignment_3_1_1()); }
	(rule__Task__ParmasAssignment_3_1_1)
	{ after(grammarAccess.getTaskAccess().getParmasAssignment_3_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FarmProgram__StatementsAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFarmProgramAccess().getStatementsAlternatives_0()); }
		(rule__FarmProgram__StatementsAlternatives_0)
		{ after(grammarAccess.getFarmProgramAccess().getStatementsAlternatives_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Param__ParamAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParamAccess().getParamIDTerminalRuleCall_0_1_0()); }
		RULE_ID
		{ after(grammarAccess.getParamAccess().getParamIDTerminalRuleCall_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Param__ParamAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParamAccess().getParamIDTerminalRuleCall_1_1_0()); }
		RULE_ID
		{ after(grammarAccess.getParamAccess().getParamIDTerminalRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Param__ParamAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParamAccess().getParamIDTerminalRuleCall_2_1_0()); }
		RULE_ID
		{ after(grammarAccess.getParamAccess().getParamIDTerminalRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Param__ParamAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParamAccess().getParamIDTerminalRuleCall_3_1_0()); }
		RULE_ID
		{ after(grammarAccess.getParamAccess().getParamIDTerminalRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Param__ParamAssignment_4_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParamAccess().getParamIDTerminalRuleCall_4_1_0()); }
		RULE_ID
		{ after(grammarAccess.getParamAccess().getParamIDTerminalRuleCall_4_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Param__ParamAssignment_5_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParamAccess().getParamIDTerminalRuleCall_5_1_0()); }
		RULE_ID
		{ after(grammarAccess.getParamAccess().getParamIDTerminalRuleCall_5_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableDeclarationAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getVariableDeclarationAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__ValueAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableDeclarationAccess().getValueVariableExpressionParserRuleCall_3_0()); }
		ruleVariableExpression
		{ after(grammarAccess.getVariableDeclarationAccess().getValueVariableExpressionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LoopStatement__ConditionAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLoopStatementAccess().getConditionConditionExpressionParserRuleCall_2_0()); }
		ruleConditionExpression
		{ after(grammarAccess.getLoopStatementAccess().getConditionConditionExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LoopStatement__StatementsAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLoopStatementAccess().getStatementsStatementParserRuleCall_5_0()); }
		ruleStatement
		{ after(grammarAccess.getLoopStatementAccess().getStatementsStatementParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__OperatorAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAdditionAccess().getOperatorAlternatives_1_1_0()); }
		(rule__Addition__OperatorAlternatives_1_1_0)
		{ after(grammarAccess.getAdditionAccess().getOperatorAlternatives_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAdditionAccess().getRightMultiplicationParserRuleCall_1_2_0()); }
		ruleMultiplication
		{ after(grammarAccess.getAdditionAccess().getRightMultiplicationParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__OperatorAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultiplicationAccess().getOperatorAlternatives_1_1_0()); }
		(rule__Multiplication__OperatorAlternatives_1_1_0)
		{ after(grammarAccess.getMultiplicationAccess().getOperatorAlternatives_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultiplicationAccess().getRightRealPrimaryParserRuleCall_1_2_0()); }
		ruleRealPrimary
		{ after(grammarAccess.getMultiplicationAccess().getRightRealPrimaryParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RealLiteral__ValAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRealLiteralAccess().getValREALParserRuleCall_0()); }
		ruleREAL
		{ after(grammarAccess.getRealLiteralAccess().getValREALParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RealVarExpression__VarAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRealVarExpressionAccess().getVarVariableDeclarationCrossReference_0()); }
		(
			{ before(grammarAccess.getRealVarExpressionAccess().getVarVariableDeclarationIDTerminalRuleCall_0_1()); }
			RULE_ID
			{ after(grammarAccess.getRealVarExpressionAccess().getVarVariableDeclarationIDTerminalRuleCall_0_1()); }
		)
		{ after(grammarAccess.getRealVarExpressionAccess().getVarVariableDeclarationCrossReference_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__OperatorAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOrExpressionAccess().getOperatorVerticalLineVerticalLineKeyword_1_1_0()); }
		(
			{ before(grammarAccess.getOrExpressionAccess().getOperatorVerticalLineVerticalLineKeyword_1_1_0()); }
			'||'
			{ after(grammarAccess.getOrExpressionAccess().getOperatorVerticalLineVerticalLineKeyword_1_1_0()); }
		)
		{ after(grammarAccess.getOrExpressionAccess().getOperatorVerticalLineVerticalLineKeyword_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOrExpressionAccess().getRightAndExpressionParserRuleCall_1_2_0()); }
		ruleAndExpression
		{ after(grammarAccess.getOrExpressionAccess().getRightAndExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__OperatorAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAndExpressionAccess().getOperatorAmpersandAmpersandKeyword_1_1_0()); }
		(
			{ before(grammarAccess.getAndExpressionAccess().getOperatorAmpersandAmpersandKeyword_1_1_0()); }
			'&&'
			{ after(grammarAccess.getAndExpressionAccess().getOperatorAmpersandAmpersandKeyword_1_1_0()); }
		)
		{ after(grammarAccess.getAndExpressionAccess().getOperatorAmpersandAmpersandKeyword_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAndExpressionAccess().getRightComparisonExpressionParserRuleCall_1_2_0()); }
		ruleComparisonExpression
		{ after(grammarAccess.getAndExpressionAccess().getRightComparisonExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__OperatorAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComparisonExpressionAccess().getOperatorAlternatives_1_1_0()); }
		(rule__ComparisonExpression__OperatorAlternatives_1_1_0)
		{ after(grammarAccess.getComparisonExpressionAccess().getOperatorAlternatives_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComparisonExpressionAccess().getRightBooleanPrimaryParserRuleCall_1_2_0()); }
		ruleBooleanPrimary
		{ after(grammarAccess.getComparisonExpressionAccess().getRightBooleanPrimaryParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanLiteral__ValAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBooleanLiteralAccess().getValTrueKeyword_0_0()); }
		(
			{ before(grammarAccess.getBooleanLiteralAccess().getValTrueKeyword_0_0()); }
			'true'
			{ after(grammarAccess.getBooleanLiteralAccess().getValTrueKeyword_0_0()); }
		)
		{ after(grammarAccess.getBooleanLiteralAccess().getValTrueKeyword_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanVarExpression__VarAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBooleanVarExpressionAccess().getVarVariableDeclarationCrossReference_0()); }
		(
			{ before(grammarAccess.getBooleanVarExpressionAccess().getVarVariableDeclarationIDTerminalRuleCall_0_1()); }
			RULE_ID
			{ after(grammarAccess.getBooleanVarExpressionAccess().getVarVariableDeclarationIDTerminalRuleCall_0_1()); }
		)
		{ after(grammarAccess.getBooleanVarExpressionAccess().getVarVariableDeclarationCrossReference_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeDeclaration__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAttributeDeclarationAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getAttributeDeclarationAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Crop__CropAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCropAccess().getCropIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getCropAccess().getCropIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Crop__CropNameAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCropAccess().getCropNameSTRINGTerminalRuleCall_5_0()); }
		RULE_STRING
		{ after(grammarAccess.getCropAccess().getCropNameSTRINGTerminalRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Crop__StatementsAssignment_9
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCropAccess().getStatementsCropStagesParserRuleCall_9_0()); }
		ruleCropStages
		{ after(grammarAccess.getCropAccess().getStatementsCropStagesParserRuleCall_9_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CropStages__ElementsAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCropStagesAccess().getElementsCropStageParserRuleCall_0_0()); }
		ruleCropStage
		{ after(grammarAccess.getCropStagesAccess().getElementsCropStageParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CropStages__ElementsAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCropStagesAccess().getElementsCropStageParserRuleCall_1_1_0()); }
		ruleCropStage
		{ after(grammarAccess.getCropStagesAccess().getElementsCropStageParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CropStage__NameAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCropStageAccess().getNameSTRINGTerminalRuleCall_3_0()); }
		RULE_STRING
		{ after(grammarAccess.getCropStageAccess().getNameSTRINGTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CropStage__TimeConsumendAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCropStageAccess().getTimeConsumendRealExpressionParserRuleCall_6_0()); }
		ruleRealExpression
		{ after(grammarAccess.getCropStageAccess().getTimeConsumendRealExpressionParserRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CropStage__ElementsAssignment_7
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCropStageAccess().getElementsCropAttributesParserRuleCall_7_0()); }
		ruleCropAttributes
		{ after(grammarAccess.getCropStageAccess().getElementsCropAttributesParserRuleCall_7_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CropAttributes__TypeAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCropAttributesAccess().getTypeAttributeDeclarationCrossReference_0_0()); }
		(
			{ before(grammarAccess.getCropAttributesAccess().getTypeAttributeDeclarationIDTerminalRuleCall_0_0_1()); }
			RULE_ID
			{ after(grammarAccess.getCropAttributesAccess().getTypeAttributeDeclarationIDTerminalRuleCall_0_0_1()); }
		)
		{ after(grammarAccess.getCropAttributesAccess().getTypeAttributeDeclarationCrossReference_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CropAttributes__ValueAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCropAttributesAccess().getValueRealExpressionParserRuleCall_2_0()); }
		ruleRealExpression
		{ after(grammarAccess.getCropAttributesAccess().getValueRealExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Machine__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMachineAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getMachineAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Machine__MachineNameAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMachineAccess().getMachineNameSTRINGTerminalRuleCall_5_0()); }
		RULE_STRING
		{ after(grammarAccess.getMachineAccess().getMachineNameSTRINGTerminalRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Machine__IpAssignment_8
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMachineAccess().getIpIPParserRuleCall_8_0()); }
		ruleIP
		{ after(grammarAccess.getMachineAccess().getIpIPParserRuleCall_8_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Machine__StatementsAssignment_9
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMachineAccess().getStatementsTaskParserRuleCall_9_0()); }
		ruleTask
		{ after(grammarAccess.getMachineAccess().getStatementsTaskParserRuleCall_9_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Field__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFieldAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getFieldAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Mission__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMissionAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getMissionAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Mission__StatementsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMissionAccess().getStatementsAlternatives_3_0()); }
		(rule__Mission__StatementsAlternatives_3_0)
		{ after(grammarAccess.getMissionAccess().getStatementsAlternatives_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTaskAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getTaskAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__ParmasAssignment_3_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTaskAccess().getParmasParamParserRuleCall_3_0_0()); }
		ruleParam
		{ after(grammarAccess.getTaskAccess().getParmasParamParserRuleCall_3_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__ParmasAssignment_3_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTaskAccess().getParmasParamParserRuleCall_3_1_1_0()); }
		ruleParam
		{ after(grammarAccess.getTaskAccess().getParmasParamParserRuleCall_3_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__TypeNameAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTaskAccess().getTypeNameTypeNameParserRuleCall_6_0()); }
		ruleTypeName
		{ after(grammarAccess.getTaskAccess().getTypeNameTypeNameParserRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__StatementsAssignment_8
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTaskAccess().getStatementsStatementParserRuleCall_8_0()); }
		ruleStatement
		{ after(grammarAccess.getTaskAccess().getStatementsStatementParserRuleCall_8_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
