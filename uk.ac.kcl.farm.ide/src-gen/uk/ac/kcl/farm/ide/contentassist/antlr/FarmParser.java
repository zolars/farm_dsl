/*
 * generated by Xtext 2.26.0
 */
package uk.ac.kcl.farm.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import uk.ac.kcl.farm.ide.contentassist.antlr.internal.InternalFarmParser;
import uk.ac.kcl.farm.services.FarmGrammarAccess;

public class FarmParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(FarmGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, FarmGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getFarmProgramAccess().getStatementsAlternatives_0(), "rule__FarmProgram__StatementsAlternatives_0");
			builder.put(grammarAccess.getClassAccess().getAlternatives(), "rule__Class__Alternatives");
			builder.put(grammarAccess.getParamAccess().getAlternatives(), "rule__Param__Alternatives");
			builder.put(grammarAccess.getTypeNameAccess().getAlternatives(), "rule__TypeName__Alternatives");
			builder.put(grammarAccess.getStatementAccess().getAlternatives(), "rule__Statement__Alternatives");
			builder.put(grammarAccess.getVariableExpressionAccess().getAlternatives(), "rule__VariableExpression__Alternatives");
			builder.put(grammarAccess.getAdditionAccess().getOperatorAlternatives_1_1_0(), "rule__Addition__OperatorAlternatives_1_1_0");
			builder.put(grammarAccess.getMultiplicationAccess().getOperatorAlternatives_1_1_0(), "rule__Multiplication__OperatorAlternatives_1_1_0");
			builder.put(grammarAccess.getRealPrimaryAccess().getAlternatives(), "rule__RealPrimary__Alternatives");
			builder.put(grammarAccess.getComparisonExpressionAccess().getOperatorAlternatives_1_1_0(), "rule__ComparisonExpression__OperatorAlternatives_1_1_0");
			builder.put(grammarAccess.getBooleanPrimaryAccess().getAlternatives(), "rule__BooleanPrimary__Alternatives");
			builder.put(grammarAccess.getBooleanLiteralAccess().getAlternatives(), "rule__BooleanLiteral__Alternatives");
			builder.put(grammarAccess.getMissionAccess().getStatementsAlternatives_3_0(), "rule__Mission__StatementsAlternatives_3_0");
			builder.put(grammarAccess.getParamAccess().getGroup_0(), "rule__Param__Group_0__0");
			builder.put(grammarAccess.getParamAccess().getGroup_1(), "rule__Param__Group_1__0");
			builder.put(grammarAccess.getParamAccess().getGroup_2(), "rule__Param__Group_2__0");
			builder.put(grammarAccess.getParamAccess().getGroup_3(), "rule__Param__Group_3__0");
			builder.put(grammarAccess.getParamAccess().getGroup_4(), "rule__Param__Group_4__0");
			builder.put(grammarAccess.getParamAccess().getGroup_5(), "rule__Param__Group_5__0");
			builder.put(grammarAccess.getVariableDeclarationAccess().getGroup(), "rule__VariableDeclaration__Group__0");
			builder.put(grammarAccess.getLoopStatementAccess().getGroup(), "rule__LoopStatement__Group__0");
			builder.put(grammarAccess.getAdditionAccess().getGroup(), "rule__Addition__Group__0");
			builder.put(grammarAccess.getAdditionAccess().getGroup_1(), "rule__Addition__Group_1__0");
			builder.put(grammarAccess.getMultiplicationAccess().getGroup(), "rule__Multiplication__Group__0");
			builder.put(grammarAccess.getMultiplicationAccess().getGroup_1(), "rule__Multiplication__Group_1__0");
			builder.put(grammarAccess.getRealPrimaryAccess().getGroup_2(), "rule__RealPrimary__Group_2__0");
			builder.put(grammarAccess.getREALAccess().getGroup(), "rule__REAL__Group__0");
			builder.put(grammarAccess.getOrExpressionAccess().getGroup(), "rule__OrExpression__Group__0");
			builder.put(grammarAccess.getOrExpressionAccess().getGroup_1(), "rule__OrExpression__Group_1__0");
			builder.put(grammarAccess.getAndExpressionAccess().getGroup(), "rule__AndExpression__Group__0");
			builder.put(grammarAccess.getAndExpressionAccess().getGroup_1(), "rule__AndExpression__Group_1__0");
			builder.put(grammarAccess.getComparisonExpressionAccess().getGroup(), "rule__ComparisonExpression__Group__0");
			builder.put(grammarAccess.getComparisonExpressionAccess().getGroup_1(), "rule__ComparisonExpression__Group_1__0");
			builder.put(grammarAccess.getBooleanPrimaryAccess().getGroup_1(), "rule__BooleanPrimary__Group_1__0");
			builder.put(grammarAccess.getAttributeDeclarationAccess().getGroup(), "rule__AttributeDeclaration__Group__0");
			builder.put(grammarAccess.getCropAccess().getGroup(), "rule__Crop__Group__0");
			builder.put(grammarAccess.getCropStagesAccess().getGroup(), "rule__CropStages__Group__0");
			builder.put(grammarAccess.getCropStagesAccess().getGroup_1(), "rule__CropStages__Group_1__0");
			builder.put(grammarAccess.getCropStageAccess().getGroup(), "rule__CropStage__Group__0");
			builder.put(grammarAccess.getCropAttributesAccess().getGroup(), "rule__CropAttributes__Group__0");
			builder.put(grammarAccess.getMachineAccess().getGroup(), "rule__Machine__Group__0");
			builder.put(grammarAccess.getIPAccess().getGroup(), "rule__IP__Group__0");
			builder.put(grammarAccess.getIPAccess().getGroup_2(), "rule__IP__Group_2__0");
			builder.put(grammarAccess.getIPAccess().getGroup_2_2(), "rule__IP__Group_2_2__0");
			builder.put(grammarAccess.getFieldAccess().getGroup(), "rule__Field__Group__0");
			builder.put(grammarAccess.getMissionAccess().getGroup(), "rule__Mission__Group__0");
			builder.put(grammarAccess.getTaskAccess().getGroup(), "rule__Task__Group__0");
			builder.put(grammarAccess.getTaskAccess().getGroup_3(), "rule__Task__Group_3__0");
			builder.put(grammarAccess.getTaskAccess().getGroup_3_1(), "rule__Task__Group_3_1__0");
			builder.put(grammarAccess.getFarmProgramAccess().getStatementsAssignment(), "rule__FarmProgram__StatementsAssignment");
			builder.put(grammarAccess.getParamAccess().getParamAssignment_0_1(), "rule__Param__ParamAssignment_0_1");
			builder.put(grammarAccess.getParamAccess().getParamAssignment_1_1(), "rule__Param__ParamAssignment_1_1");
			builder.put(grammarAccess.getParamAccess().getParamAssignment_2_1(), "rule__Param__ParamAssignment_2_1");
			builder.put(grammarAccess.getParamAccess().getParamAssignment_3_1(), "rule__Param__ParamAssignment_3_1");
			builder.put(grammarAccess.getParamAccess().getParamAssignment_4_1(), "rule__Param__ParamAssignment_4_1");
			builder.put(grammarAccess.getParamAccess().getParamAssignment_5_1(), "rule__Param__ParamAssignment_5_1");
			builder.put(grammarAccess.getVariableDeclarationAccess().getNameAssignment_1(), "rule__VariableDeclaration__NameAssignment_1");
			builder.put(grammarAccess.getVariableDeclarationAccess().getValueAssignment_3(), "rule__VariableDeclaration__ValueAssignment_3");
			builder.put(grammarAccess.getLoopStatementAccess().getConditionAssignment_2(), "rule__LoopStatement__ConditionAssignment_2");
			builder.put(grammarAccess.getLoopStatementAccess().getStatementsAssignment_5(), "rule__LoopStatement__StatementsAssignment_5");
			builder.put(grammarAccess.getAdditionAccess().getOperatorAssignment_1_1(), "rule__Addition__OperatorAssignment_1_1");
			builder.put(grammarAccess.getAdditionAccess().getRightAssignment_1_2(), "rule__Addition__RightAssignment_1_2");
			builder.put(grammarAccess.getMultiplicationAccess().getOperatorAssignment_1_1(), "rule__Multiplication__OperatorAssignment_1_1");
			builder.put(grammarAccess.getMultiplicationAccess().getRightAssignment_1_2(), "rule__Multiplication__RightAssignment_1_2");
			builder.put(grammarAccess.getRealLiteralAccess().getValAssignment(), "rule__RealLiteral__ValAssignment");
			builder.put(grammarAccess.getRealVarExpressionAccess().getVarAssignment(), "rule__RealVarExpression__VarAssignment");
			builder.put(grammarAccess.getOrExpressionAccess().getOperatorAssignment_1_1(), "rule__OrExpression__OperatorAssignment_1_1");
			builder.put(grammarAccess.getOrExpressionAccess().getRightAssignment_1_2(), "rule__OrExpression__RightAssignment_1_2");
			builder.put(grammarAccess.getAndExpressionAccess().getOperatorAssignment_1_1(), "rule__AndExpression__OperatorAssignment_1_1");
			builder.put(grammarAccess.getAndExpressionAccess().getRightAssignment_1_2(), "rule__AndExpression__RightAssignment_1_2");
			builder.put(grammarAccess.getComparisonExpressionAccess().getOperatorAssignment_1_1(), "rule__ComparisonExpression__OperatorAssignment_1_1");
			builder.put(grammarAccess.getComparisonExpressionAccess().getRightAssignment_1_2(), "rule__ComparisonExpression__RightAssignment_1_2");
			builder.put(grammarAccess.getBooleanLiteralAccess().getValAssignment_0(), "rule__BooleanLiteral__ValAssignment_0");
			builder.put(grammarAccess.getBooleanVarExpressionAccess().getVarAssignment(), "rule__BooleanVarExpression__VarAssignment");
			builder.put(grammarAccess.getAttributeDeclarationAccess().getNameAssignment_1(), "rule__AttributeDeclaration__NameAssignment_1");
			builder.put(grammarAccess.getCropAccess().getCropAssignment_1(), "rule__Crop__CropAssignment_1");
			builder.put(grammarAccess.getCropAccess().getCropNameAssignment_5(), "rule__Crop__CropNameAssignment_5");
			builder.put(grammarAccess.getCropAccess().getStatementsAssignment_9(), "rule__Crop__StatementsAssignment_9");
			builder.put(grammarAccess.getCropStagesAccess().getElementsAssignment_0(), "rule__CropStages__ElementsAssignment_0");
			builder.put(grammarAccess.getCropStagesAccess().getElementsAssignment_1_1(), "rule__CropStages__ElementsAssignment_1_1");
			builder.put(grammarAccess.getCropStageAccess().getNameAssignment_3(), "rule__CropStage__NameAssignment_3");
			builder.put(grammarAccess.getCropStageAccess().getTimeConsumendAssignment_6(), "rule__CropStage__TimeConsumendAssignment_6");
			builder.put(grammarAccess.getCropStageAccess().getElementsAssignment_7(), "rule__CropStage__ElementsAssignment_7");
			builder.put(grammarAccess.getCropAttributesAccess().getTypeAssignment_0(), "rule__CropAttributes__TypeAssignment_0");
			builder.put(grammarAccess.getCropAttributesAccess().getValueAssignment_2(), "rule__CropAttributes__ValueAssignment_2");
			builder.put(grammarAccess.getMachineAccess().getNameAssignment_1(), "rule__Machine__NameAssignment_1");
			builder.put(grammarAccess.getMachineAccess().getMachineNameAssignment_5(), "rule__Machine__MachineNameAssignment_5");
			builder.put(grammarAccess.getMachineAccess().getIpAssignment_8(), "rule__Machine__IpAssignment_8");
			builder.put(grammarAccess.getMachineAccess().getStatementsAssignment_9(), "rule__Machine__StatementsAssignment_9");
			builder.put(grammarAccess.getFieldAccess().getNameAssignment_1(), "rule__Field__NameAssignment_1");
			builder.put(grammarAccess.getMissionAccess().getNameAssignment_1(), "rule__Mission__NameAssignment_1");
			builder.put(grammarAccess.getMissionAccess().getStatementsAssignment_3(), "rule__Mission__StatementsAssignment_3");
			builder.put(grammarAccess.getTaskAccess().getNameAssignment_1(), "rule__Task__NameAssignment_1");
			builder.put(grammarAccess.getTaskAccess().getParmasAssignment_3_0(), "rule__Task__ParmasAssignment_3_0");
			builder.put(grammarAccess.getTaskAccess().getParmasAssignment_3_1_1(), "rule__Task__ParmasAssignment_3_1_1");
			builder.put(grammarAccess.getTaskAccess().getTypeNameAssignment_6(), "rule__Task__TypeNameAssignment_6");
			builder.put(grammarAccess.getTaskAccess().getStatementsAssignment_8(), "rule__Task__StatementsAssignment_8");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private FarmGrammarAccess grammarAccess;

	@Override
	protected InternalFarmParser createParser() {
		InternalFarmParser result = new InternalFarmParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public FarmGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(FarmGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
