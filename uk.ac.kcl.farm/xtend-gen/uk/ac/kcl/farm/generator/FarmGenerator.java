/**
 * generated by Xtext 2.18.0.M3
 */
package uk.ac.kcl.farm.generator;

import com.google.common.collect.Iterables;
import com.google.common.collect.Iterators;
import java.util.Arrays;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IntegerRange;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.eclipse.xtext.xbase.lib.StringExtensions;
import uk.ac.kcl.farm.farm.Addition;
import uk.ac.kcl.farm.farm.FarmProgram;
import uk.ac.kcl.farm.farm.LoopStatement;
import uk.ac.kcl.farm.farm.Multiplication;
import uk.ac.kcl.farm.farm.RealExpression;
import uk.ac.kcl.farm.farm.RealLiteral;
import uk.ac.kcl.farm.farm.RealVarExpression;
import uk.ac.kcl.farm.farm.Statement;
import uk.ac.kcl.farm.farm.VariableDeclaration;
import uk.ac.kcl.farm.farm.VariableExpression;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class FarmGenerator extends AbstractGenerator {
  private static class Environment {
    private int counter = 0;
    
    public CharSequence getFreshVarName() {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("i");
      int _plusPlus = this.counter++;
      _builder.append(_plusPlus);
      return _builder;
    }
    
    public int exit() {
      return this.counter--;
    }
  }
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    EObject _head = IterableExtensions.<EObject>head(resource.getContents());
    final FarmProgram model = ((FarmProgram) _head);
    fsa.generateFile(this.deriveStatsTargetFileNameFor(resource), this.doGenerateStats(model));
    final String className = this.deriveClassNameFor(resource);
    fsa.generateFile((className + ".java"), this.doGenerateClass(model, className));
  }
  
  public String deriveStatsTargetFileNameFor(final Resource resource) {
    return resource.getURI().appendFileExtension("txt").lastSegment();
  }
  
  public String deriveClassNameFor(final Resource resource) {
    String _xblockexpression = null;
    {
      final String origName = resource.getURI().lastSegment();
      String _firstUpper = StringExtensions.toFirstUpper(origName.substring(0, origName.indexOf(".")));
      _xblockexpression = (_firstUpper + "Farm");
    }
    return _xblockexpression;
  }
  
  public String doGenerateStats(final FarmProgram program) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("Program contains:");
    _builder.newLine();
    _builder.newLine();
    _builder.append("- ");
    int _size = IterableExtensions.size(Iterables.<LoopStatement>filter(program.getStatements(), LoopStatement.class));
    _builder.append(_size);
    _builder.append(" top-level loops");
    _builder.newLineIfNotEmpty();
    _builder.append("- ");
    int _size_1 = IteratorExtensions.size(Iterators.<VariableDeclaration>filter(program.eAllContents(), VariableDeclaration.class));
    _builder.append(_size_1);
    _builder.append(" variable declarations");
    _builder.newLineIfNotEmpty();
    return _builder.toString();
  }
  
  public String doGenerateClass(final FarmProgram program, final String className) {
    throw new Error("Unresolved compilation problems:"
      + "\nType mismatch: cannot convert implicit first argument from EObject to Statement");
  }
  
  protected String _generateJavaStatement(final Statement stmt, final FarmGenerator.Environment env) {
    StringConcatenation _builder = new StringConcatenation();
    return _builder.toString();
  }
  
  /**
   * dispatch def String generateJavaStatement(MoveStatement stmt, Environment env) '''move«stmt.command.getName.toFirstUpper»(«stmt.steps.generateJavaExpression»);'''
   * dispatch def String generateJavaStatement(TurnStatement stmt, Environment env) '''rotate(«if (stmt.command === TurnCommand.LEFT) {'''-'''}»«stmt.degrees»);'''
   * 
   * dispatch def String generateJavaStatement(LoopStatement stmt, Environment env) {
   * val freshVarName = env.getFreshVarName
   * 
   * val result =
   * '''
   * while ( «freshVarName» ) {
   * «stmt.statements.map[generateJavaStatement(env)].join('\n')»
   * }
   * '''
   * 
   * env.exit
   * 
   * result
   * }
   */
  protected String _generateJavaExpression(final RealExpression exp) {
    StringConcatenation _builder = new StringConcatenation();
    return _builder.toString();
  }
  
  protected String _generateJavaExpression(final Addition exp) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("(");
    String _generateJavaExpression = this.generateJavaExpression(exp.getLeft());
    _builder.append(_generateJavaExpression);
    {
      int _size = exp.getOperator().size();
      int _minus = (_size - 1);
      IntegerRange _upTo = new IntegerRange(0, _minus);
      for(final Integer idx : _upTo) {
        _builder.append(" ");
        String _get = exp.getOperator().get((idx).intValue());
        _builder.append(_get);
        _builder.append(" ");
        String _generateJavaExpression_1 = this.generateJavaExpression(exp.getRight().get((idx).intValue()));
        _builder.append(_generateJavaExpression_1);
      }
    }
    _builder.append(")");
    return _builder.toString();
  }
  
  protected String _generateJavaExpression(final Multiplication exp) {
    StringConcatenation _builder = new StringConcatenation();
    String _generateJavaExpression = this.generateJavaExpression(exp.getLeft());
    _builder.append(_generateJavaExpression);
    {
      int _size = exp.getOperator().size();
      int _minus = (_size - 1);
      IntegerRange _upTo = new IntegerRange(0, _minus);
      for(final Integer idx : _upTo) {
        _builder.append(" ");
        String _get = exp.getOperator().get((idx).intValue());
        _builder.append(_get);
        _builder.append(" ");
        String _generateJavaExpression_1 = this.generateJavaExpression(exp.getRight().get((idx).intValue()));
        _builder.append(_generateJavaExpression_1);
      }
    }
    return _builder.toString();
  }
  
  protected String _generateJavaExpression(final RealLiteral exp) {
    StringConcatenation _builder = new StringConcatenation();
    float _val = exp.getVal();
    _builder.append(_val);
    return _builder.toString();
  }
  
  protected String _generateJavaExpression(final RealVarExpression exp) {
    StringConcatenation _builder = new StringConcatenation();
    VariableExpression _value = exp.getVar().getValue();
    _builder.append(_value);
    return _builder.toString();
  }
  
  public String generateJavaStatement(final Statement stmt, final FarmGenerator.Environment env) {
    return _generateJavaStatement(stmt, env);
  }
  
  public String generateJavaExpression(final RealExpression exp) {
    if (exp instanceof Addition) {
      return _generateJavaExpression((Addition)exp);
    } else if (exp instanceof Multiplication) {
      return _generateJavaExpression((Multiplication)exp);
    } else if (exp instanceof RealLiteral) {
      return _generateJavaExpression((RealLiteral)exp);
    } else if (exp instanceof RealVarExpression) {
      return _generateJavaExpression((RealVarExpression)exp);
    } else if (exp != null) {
      return _generateJavaExpression(exp);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(exp).toString());
    }
  }
}
