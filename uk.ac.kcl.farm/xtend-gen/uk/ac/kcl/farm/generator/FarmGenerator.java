/**
 * generated by Xtext 2.18.0.M3
 */
package uk.ac.kcl.farm.generator;

import com.google.common.collect.Iterables;
import com.google.common.collect.Iterators;
import java.util.Arrays;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IntegerRange;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.eclipse.xtext.xbase.lib.ListExtensions;
import org.eclipse.xtext.xbase.lib.StringExtensions;
import uk.ac.kcl.farm.farm.Addition;
import uk.ac.kcl.farm.farm.FarmProgram;
import uk.ac.kcl.farm.farm.IntExpression;
import uk.ac.kcl.farm.farm.IntLiteral;
import uk.ac.kcl.farm.farm.IntVarExpression;
import uk.ac.kcl.farm.farm.LoopStatement;
import uk.ac.kcl.farm.farm.MoveStatement;
import uk.ac.kcl.farm.farm.Multiplication;
import uk.ac.kcl.farm.farm.Statement;
import uk.ac.kcl.farm.farm.TurnCommand;
import uk.ac.kcl.farm.farm.TurnStatement;
import uk.ac.kcl.farm.farm.VariableDeclaration;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class FarmGenerator extends AbstractGenerator {
  private static class Environment {
    private int counter = 0;
    
    public CharSequence getFreshVarName() {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("i");
      int _plusPlus = this.counter++;
      _builder.append(_plusPlus);
      return _builder;
    }
    
    public int exit() {
      return this.counter--;
    }
  }
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    EObject _head = IterableExtensions.<EObject>head(resource.getContents());
    final FarmProgram model = ((FarmProgram) _head);
    fsa.generateFile(this.deriveStatsTargetFileNameFor(resource), this.doGenerateStats(model));
    final String className = this.deriveClassNameFor(resource);
    fsa.generateFile((className + ".java"), this.doGenerateClass(model, className));
  }
  
  public String deriveStatsTargetFileNameFor(final Resource resource) {
    return resource.getURI().appendFileExtension("txt").lastSegment();
  }
  
  public String deriveClassNameFor(final Resource resource) {
    String _xblockexpression = null;
    {
      final String origName = resource.getURI().lastSegment();
      String _firstUpper = StringExtensions.toFirstUpper(origName.substring(0, origName.indexOf(".")));
      _xblockexpression = (_firstUpper + "Farm");
    }
    return _xblockexpression;
  }
  
  public String doGenerateStats(final FarmProgram program) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("Program contains:");
    _builder.newLine();
    _builder.newLine();
    _builder.append("- ");
    int _size = IteratorExtensions.size(Iterators.<TurnStatement>filter(program.eAllContents(), TurnStatement.class));
    _builder.append(_size);
    _builder.append(" turn commands");
    _builder.newLineIfNotEmpty();
    _builder.append("- ");
    int _size_1 = IteratorExtensions.size(Iterators.<MoveStatement>filter(program.eAllContents(), MoveStatement.class));
    _builder.append(_size_1);
    _builder.append(" move commands");
    _builder.newLineIfNotEmpty();
    _builder.append("- ");
    int _size_2 = IterableExtensions.size(Iterables.<LoopStatement>filter(program.getStatements(), LoopStatement.class));
    _builder.append(_size_2);
    _builder.append(" top-level loops");
    _builder.newLineIfNotEmpty();
    _builder.append("- ");
    int _size_3 = IteratorExtensions.size(Iterators.<VariableDeclaration>filter(program.eAllContents(), VariableDeclaration.class));
    _builder.append(_size_3);
    _builder.append(" variable declarations");
    _builder.newLineIfNotEmpty();
    return _builder.toString();
  }
  
  public String doGenerateClass(final FarmProgram program, final String className) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import uk.ac.kcl.farm.library.*");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class ");
    _builder.append(className);
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static void main (String[] args) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("FarmFrame tf = new FarmFrame();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Farm t = new Farm(tf) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("protected void run() {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    final Function1<Statement, String> _function = (Statement it) -> {
      FarmGenerator.Environment _environment = new FarmGenerator.Environment();
      return this.generateJavaStatement(it, _environment);
    };
    String _join = IterableExtensions.join(ListExtensions.<Statement, String>map(program.getStatements(), _function), "\n");
    _builder.append(_join, "\t\t\t\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("};");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("t.run();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder.toString();
  }
  
  protected String _generateJavaStatement(final Statement stmt, final FarmGenerator.Environment env) {
    StringConcatenation _builder = new StringConcatenation();
    return _builder.toString();
  }
  
  protected String _generateJavaStatement(final MoveStatement stmt, final FarmGenerator.Environment env) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("move");
    String _firstUpper = StringExtensions.toFirstUpper(stmt.getCommand().getName());
    _builder.append(_firstUpper);
    _builder.append("(");
    String _generateJavaExpression = this.generateJavaExpression(stmt.getSteps());
    _builder.append(_generateJavaExpression);
    _builder.append(");");
    return _builder.toString();
  }
  
  protected String _generateJavaStatement(final TurnStatement stmt, final FarmGenerator.Environment env) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("rotate(");
    CharSequence _xifexpression = null;
    TurnCommand _command = stmt.getCommand();
    boolean _tripleEquals = (_command == TurnCommand.LEFT);
    if (_tripleEquals) {
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("-");
      _xifexpression = _builder_1;
    }
    _builder.append(_xifexpression);
    float _degrees = stmt.getDegrees();
    _builder.append(_degrees);
    _builder.append(");");
    return _builder.toString();
  }
  
  protected String _generateJavaStatement(final LoopStatement stmt, final FarmGenerator.Environment env) {
    String _xblockexpression = null;
    {
      final CharSequence freshVarName = env.getFreshVarName();
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("for (int ");
      _builder.append(freshVarName);
      _builder.append(" = 0; ");
      _builder.append(freshVarName);
      _builder.append(" < ");
      String _generateJavaExpression = this.generateJavaExpression(stmt.getCount());
      _builder.append(_generateJavaExpression);
      _builder.append("; ");
      _builder.append(freshVarName);
      _builder.append("++) {");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      final Function1<Statement, String> _function = (Statement it) -> {
        return this.generateJavaStatement(it, env);
      };
      String _join = IterableExtensions.join(ListExtensions.<Statement, String>map(stmt.getStatements(), _function), "\n");
      _builder.append(_join, "\t");
      _builder.newLineIfNotEmpty();
      _builder.append("}");
      _builder.newLine();
      final String result = _builder.toString();
      env.exit();
      _xblockexpression = result;
    }
    return _xblockexpression;
  }
  
  protected String _generateJavaExpression(final IntExpression exp) {
    StringConcatenation _builder = new StringConcatenation();
    return _builder.toString();
  }
  
  protected String _generateJavaExpression(final Addition exp) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("(");
    String _generateJavaExpression = this.generateJavaExpression(exp.getLeft());
    _builder.append(_generateJavaExpression);
    {
      int _size = exp.getOperator().size();
      int _minus = (_size - 1);
      IntegerRange _upTo = new IntegerRange(0, _minus);
      for(final Integer idx : _upTo) {
        _builder.append(" ");
        String _get = exp.getOperator().get((idx).intValue());
        _builder.append(_get);
        _builder.append(" ");
        String _generateJavaExpression_1 = this.generateJavaExpression(exp.getRight().get((idx).intValue()));
        _builder.append(_generateJavaExpression_1);
      }
    }
    _builder.append(")");
    return _builder.toString();
  }
  
  protected String _generateJavaExpression(final Multiplication exp) {
    StringConcatenation _builder = new StringConcatenation();
    String _generateJavaExpression = this.generateJavaExpression(exp.getLeft());
    _builder.append(_generateJavaExpression);
    {
      int _size = exp.getOperator().size();
      int _minus = (_size - 1);
      IntegerRange _upTo = new IntegerRange(0, _minus);
      for(final Integer idx : _upTo) {
        _builder.append(" ");
        String _get = exp.getOperator().get((idx).intValue());
        _builder.append(_get);
        _builder.append(" ");
        String _generateJavaExpression_1 = this.generateJavaExpression(exp.getRight().get((idx).intValue()));
        _builder.append(_generateJavaExpression_1);
      }
    }
    return _builder.toString();
  }
  
  protected String _generateJavaExpression(final IntLiteral exp) {
    StringConcatenation _builder = new StringConcatenation();
    int _val = exp.getVal();
    _builder.append(_val);
    return _builder.toString();
  }
  
  protected String _generateJavaExpression(final IntVarExpression exp) {
    StringConcatenation _builder = new StringConcatenation();
    int _value = exp.getVar().getValue();
    _builder.append(_value);
    return _builder.toString();
  }
  
  public String generateJavaStatement(final Statement stmt, final FarmGenerator.Environment env) {
    if (stmt instanceof LoopStatement) {
      return _generateJavaStatement((LoopStatement)stmt, env);
    } else if (stmt instanceof MoveStatement) {
      return _generateJavaStatement((MoveStatement)stmt, env);
    } else if (stmt instanceof TurnStatement) {
      return _generateJavaStatement((TurnStatement)stmt, env);
    } else if (stmt != null) {
      return _generateJavaStatement(stmt, env);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(stmt, env).toString());
    }
  }
  
  public String generateJavaExpression(final IntExpression exp) {
    if (exp instanceof Addition) {
      return _generateJavaExpression((Addition)exp);
    } else if (exp instanceof IntLiteral) {
      return _generateJavaExpression((IntLiteral)exp);
    } else if (exp instanceof IntVarExpression) {
      return _generateJavaExpression((IntVarExpression)exp);
    } else if (exp instanceof Multiplication) {
      return _generateJavaExpression((Multiplication)exp);
    } else if (exp != null) {
      return _generateJavaExpression(exp);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(exp).toString());
    }
  }
}
