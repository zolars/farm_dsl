/**
 * generated by Xtext 2.18.0.M3
 */
package uk.ac.kcl.farm.generator;

import com.google.common.collect.Iterables;
import com.google.common.collect.Iterators;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.CollectionLiterals;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.InputOutput;
import org.eclipse.xtext.xbase.lib.IntegerRange;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.eclipse.xtext.xbase.lib.ListExtensions;
import org.eclipse.xtext.xbase.lib.StringExtensions;
import uk.ac.kcl.farm.farm.Assignment;
import uk.ac.kcl.farm.farm.Attribute;
import uk.ac.kcl.farm.farm.CallAttributes;
import uk.ac.kcl.farm.farm.Crop;
import uk.ac.kcl.farm.farm.CropStage;
import uk.ac.kcl.farm.farm.CropStages;
import uk.ac.kcl.farm.farm.ElseJudgeStatement;
import uk.ac.kcl.farm.farm.ElseStatement;
import uk.ac.kcl.farm.farm.ExpressionOrCall;
import uk.ac.kcl.farm.farm.FarmProgram;
import uk.ac.kcl.farm.farm.Field;
import uk.ac.kcl.farm.farm.JudgeStatement;
import uk.ac.kcl.farm.farm.LoopStatement;
import uk.ac.kcl.farm.farm.Mission;
import uk.ac.kcl.farm.farm.MoveFunction;
import uk.ac.kcl.farm.farm.ReportFunction;
import uk.ac.kcl.farm.farm.Statement;
import uk.ac.kcl.farm.farm.Variable;
import uk.ac.kcl.farm.farm.WaitFunction;
import uk.ac.kcl.farm.interpreter.Exp;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class FarmGenerator extends AbstractGenerator {
  private static class Environment {
    private int counter = 0;
    
    public CharSequence getFreshVarName() {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("i");
      int _plusPlus = this.counter++;
      _builder.append(_plusPlus);
      return _builder;
    }
    
    public int exit() {
      return this.counter--;
    }
  }
  
  private uk.ac.kcl.farm.generator.Runtime runtime = new uk.ac.kcl.farm.generator.Runtime();
  
  private Exp expRuntime = new Exp(this.runtime);
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    EObject _head = IterableExtensions.<EObject>head(resource.getContents());
    final FarmProgram model = ((FarmProgram) _head);
    fsa.generateFile(this.deriveStatsTargetFileNameFor(resource), this.doGenerateStats(model));
    final String className = this.deriveClassNameFor(resource);
    fsa.generateFile((className + ".java"), this.doGenerateClass(model, className));
  }
  
  public String deriveStatsTargetFileNameFor(final Resource resource) {
    return resource.getURI().appendFileExtension("txt").lastSegment();
  }
  
  public String deriveClassNameFor(final Resource resource) {
    String _xblockexpression = null;
    {
      final String origName = resource.getURI().lastSegment();
      String _firstUpper = StringExtensions.toFirstUpper(origName.substring(0, origName.indexOf(".")));
      _xblockexpression = (_firstUpper + "Farm");
    }
    return _xblockexpression;
  }
  
  public String doGenerateStats(final FarmProgram program) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("- ");
    int _size = IteratorExtensions.size(Iterators.<Attribute>filter(program.eAllContents(), Attribute.class));
    _builder.append(_size);
    _builder.append(" attribute declarations");
    _builder.newLineIfNotEmpty();
    final Function1<Attribute, String> _function = (Attribute it) -> {
      FarmGenerator.Environment _environment = new FarmGenerator.Environment();
      return this.generateTimetable(it, _environment);
    };
    String _join = IterableExtensions.join(IterableExtensions.<Attribute, String>map(Iterables.<Attribute>filter(program.getStatements(), Attribute.class), _function), "\n");
    _builder.append(_join);
    _builder.newLineIfNotEmpty();
    _builder.append("- ");
    int _size_1 = this.runtime.attributeList.size();
    _builder.append(_size_1);
    _builder.append(" attribute processed");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("- ");
    int _size_2 = IteratorExtensions.size(Iterators.<Crop>filter(program.eAllContents(), Crop.class));
    _builder.append(_size_2);
    _builder.append(" crop declarations");
    _builder.newLineIfNotEmpty();
    final Function1<Crop, String> _function_1 = (Crop it) -> {
      FarmGenerator.Environment _environment = new FarmGenerator.Environment();
      return this.generateTimetable(it, _environment);
    };
    String _join_1 = IterableExtensions.join(IterableExtensions.<Crop, String>map(Iterables.<Crop>filter(program.getStatements(), Crop.class), _function_1), "\n");
    _builder.append(_join_1);
    _builder.newLineIfNotEmpty();
    _builder.append("- ");
    int _size_3 = this.runtime.cropMap.size();
    _builder.append(_size_3);
    _builder.append(" crop processed");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("- ");
    int _size_4 = IteratorExtensions.size(Iterators.<Field>filter(program.eAllContents(), Field.class));
    _builder.append(_size_4);
    _builder.append(" field declarations");
    _builder.newLineIfNotEmpty();
    final Function1<Field, String> _function_2 = (Field it) -> {
      FarmGenerator.Environment _environment = new FarmGenerator.Environment();
      return this.generateTimetable(it, _environment);
    };
    String _join_2 = IterableExtensions.join(IterableExtensions.<Field, String>map(Iterables.<Field>filter(program.getStatements(), Field.class), _function_2), "\n");
    _builder.append(_join_2);
    _builder.newLineIfNotEmpty();
    _builder.append("- ");
    int _size_5 = this.runtime.fieldMap.size();
    _builder.append(_size_5);
    _builder.append(" field processed");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    final Function1<Mission, String> _function_3 = (Mission it) -> {
      FarmGenerator.Environment _environment = new FarmGenerator.Environment();
      return this.generateTimetable(it, _environment);
    };
    String _join_3 = IterableExtensions.join(IterableExtensions.<Mission, String>map(Iterables.<Mission>filter(program.getStatements(), Mission.class), _function_3), "\n");
    _builder.append(_join_3);
    _builder.newLineIfNotEmpty();
    return _builder.toString();
  }
  
  public String doGenerateClass(final FarmProgram program, final String className) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\t\t");
    _builder.append("import uk.ac.kcl.farm.library.*");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public class ");
    _builder.append(className, "\t\t");
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("public static void main (String[] args) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("FarmFrame tf = new FarmFrame();");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("Farm t = new Farm(tf) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("protected void run() {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    final Function1<EObject, String> _function = (EObject it) -> {
      FarmGenerator.Environment _environment = new FarmGenerator.Environment();
      return this.generateJavaStatement(it, _environment);
    };
    String _join = IterableExtensions.join(ListExtensions.<EObject, String>map(program.getStatements(), _function), "\n");
    _builder.append(_join, "\t\t\t\t\t\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("};");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("t.run();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("//\t");
    return _builder.toString();
  }
  
  /**
   * generateTimetable
   */
  protected String _generateTimetable(final Attribute attribute, final FarmGenerator.Environment env) {
    String _xblockexpression = null;
    {
      this.runtime.attributeList.add(attribute.getName());
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("    ");
      _builder.append("- Attribute `");
      String _name = attribute.getName();
      _builder.append(_name, "    ");
      _builder.append("` processed");
      _xblockexpression = _builder.toString();
    }
    return _xblockexpression;
  }
  
  protected String _generateTimetable(final Crop crop, final FarmGenerator.Environment env) {
    try {
      String _xblockexpression = null;
      {
        List<GeneratedStage> generatedStages = CollectionLiterals.<GeneratedStage>newArrayList();
        EList<CropStages> _cropStages = crop.getCropStages();
        for (final CropStages stages : _cropStages) {
          EList<CropStage> _elements = stages.getElements();
          for (final CropStage stage : _elements) {
            {
              HashMap<String, Float> attributes = new HashMap<String, Float>();
              EList<CallAttributes> _attributes = stage.getAttributes();
              for (final CallAttributes attribute : _attributes) {
                boolean _contains = this.runtime.attributeList.contains(attribute.getType().getName());
                if (_contains) {
                  attributes.put(attribute.getType().getName(), this.expRuntime.toFloat(attribute.getValue()));
                } else {
                  StringConcatenation _builder = new StringConcatenation();
                  _builder.append("Undefined attribute ");
                  String _name = attribute.getType().getName();
                  _builder.append(_name);
                  _builder.append(" used in Crop: ");
                  String _name_1 = crop.getName();
                  _builder.append(_name_1);
                  _builder.newLineIfNotEmpty();
                  _builder.append("Avaible attributes is as below: ");
                  _builder.append(this.runtime.attributeList);
                  _builder.newLineIfNotEmpty();
                  throw new Exception(_builder.toString());
                }
              }
              Float time = this.expRuntime.toFloat(stage.getTime());
              Float timeover = this.expRuntime.toFloat(stage.getTimeover());
              if (((time).floatValue() >= 0)) {
                String _name_2 = stage.getName();
                GeneratedStage newStage = new GeneratedStage(_name_2, (time).floatValue(), (timeover).floatValue(), attributes);
                generatedStages.add(newStage);
              } else {
                StringConcatenation _builder_1 = new StringConcatenation();
                _builder_1.append("At Crop `");
                String _name_3 = crop.getName();
                _builder_1.append(_name_3);
                _builder_1.append("`, `timeConsumed` must be a Float bigger than 0");
                _builder_1.newLineIfNotEmpty();
                throw new Exception(_builder_1.toString());
              }
            }
          }
        }
        String _cropName = crop.getCropName();
        GeneratedCrop newCrop = new GeneratedCrop(_cropName, generatedStages);
        this.runtime.cropMap.put(crop.getName(), newCrop);
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("    ");
        _builder.append("- Crop `");
        String _name = crop.getName();
        _builder.append(_name, "    ");
        _builder.append("` processed");
        _xblockexpression = _builder.toString();
      }
      return _xblockexpression;
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  protected String _generateTimetable(final Field field, final FarmGenerator.Environment env) {
    try {
      String _xblockexpression = null;
      {
        HashMap<String, Float> attributes = new HashMap<String, Float>();
        EList<CallAttributes> _attributes = field.getAttributes();
        for (final CallAttributes attribute : _attributes) {
          boolean _contains = this.runtime.attributeList.contains(attribute.getType().getName());
          if (_contains) {
            attributes.put(attribute.getType().getName(), this.expRuntime.toFloat(attribute.getValue()));
          } else {
            StringConcatenation _builder = new StringConcatenation();
            _builder.append("Undefined attribute ");
            String _name = attribute.getType().getName();
            _builder.append(_name);
            _builder.append(" used in Field: ");
            String _name_1 = field.getName();
            _builder.append(_name_1);
            _builder.newLineIfNotEmpty();
            _builder.append("Avaible attributes is as below: ");
            _builder.append(this.runtime.attributeList);
            _builder.newLineIfNotEmpty();
            throw new Exception(_builder.toString());
          }
        }
        String _fieldName = field.getFieldName();
        String _fieldIP = field.getFieldIP();
        String _fieldType = field.getFieldType();
        String _fieldLight = field.getFieldLight();
        GeneratedField newField = new GeneratedField(_fieldName, _fieldIP, _fieldType, _fieldLight, attributes);
        this.runtime.fieldMap.put(field.getName(), newField);
        StringConcatenation _builder_1 = new StringConcatenation();
        _builder_1.append("    ");
        _builder_1.append("- Field `");
        String _name_2 = field.getName();
        _builder_1.append(_name_2, "    ");
        _builder_1.append("` processed");
        _xblockexpression = _builder_1.toString();
      }
      return _xblockexpression;
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  protected String _generateTimetable(final Mission mission, final FarmGenerator.Environment env) {
    StringConcatenation _builder = new StringConcatenation();
    final Function1<Statement, String> _function = (Statement it) -> {
      FarmGenerator.Environment _environment = new FarmGenerator.Environment();
      return this.generateTimetable(it, _environment);
    };
    String _join = IterableExtensions.join(ListExtensions.<Statement, String>map(mission.getMissionStatements(), _function), "");
    _builder.append(_join);
    return _builder.toString();
  }
  
  protected String _generateTimetable(final Variable variable, final FarmGenerator.Environment env) {
    try {
      String _xblockexpression = null;
      {
        ExpressionOrCall exp = variable.getExpression();
        try {
          this.runtime.variableMap.put(variable.getName(), this.expRuntime.toFloat(exp));
        } catch (final Throwable _t) {
          if (_t instanceof Exception) {
            try {
              this.runtime.variableMap.put(variable.getName(), this.expRuntime.toBoolean(exp));
            } catch (final Throwable _t_1) {
              if (_t_1 instanceof Exception) {
                final Exception e2 = (Exception)_t_1;
                throw e2;
              } else {
                throw Exceptions.sneakyThrow(_t_1);
              }
            }
          } else {
            throw Exceptions.sneakyThrow(_t);
          }
        }
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("- Variable `");
        String _name = variable.getName();
        _builder.append(_name);
        _builder.append(" : ");
        Object _get = this.runtime.variableMap.get(variable.getName());
        _builder.append(_get);
        _builder.append("` processed");
        InputOutput.<String>println(_builder.toString());
        StringConcatenation _builder_1 = new StringConcatenation();
        _xblockexpression = _builder_1.toString();
      }
      return _xblockexpression;
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  protected String _generateTimetable(final Assignment assignment, final FarmGenerator.Environment env) {
    try {
      String _xblockexpression = null;
      {
        ExpressionOrCall exp = assignment.getExpression();
        try {
          this.runtime.variableMap.put(assignment.getVar().getName(), this.expRuntime.toFloat(exp));
        } catch (final Throwable _t) {
          if (_t instanceof Exception) {
            try {
              this.runtime.variableMap.put(assignment.getVar().getName(), this.expRuntime.toBoolean(exp));
            } catch (final Throwable _t_1) {
              if (_t_1 instanceof Exception) {
                final Exception e2 = (Exception)_t_1;
                throw e2;
              } else {
                throw Exceptions.sneakyThrow(_t_1);
              }
            }
          } else {
            throw Exceptions.sneakyThrow(_t);
          }
        }
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("- Assignment `");
        String _name = assignment.getVar().getName();
        _builder.append(_name);
        _builder.append(" : ");
        Object _get = this.runtime.variableMap.get(assignment.getVar().getName());
        _builder.append(_get);
        _builder.append("` processed");
        InputOutput.<String>println(_builder.toString());
        StringConcatenation _builder_1 = new StringConcatenation();
        _xblockexpression = _builder_1.toString();
      }
      return _xblockexpression;
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  protected String _generateTimetable(final LoopStatement loop, final FarmGenerator.Environment env) {
    String _xblockexpression = null;
    {
      String result = "";
      while ((this.expRuntime.toBoolean(loop.getCondition())).booleanValue()) {
        String _result = result;
        final Function1<Statement, String> _function = (Statement it) -> {
          FarmGenerator.Environment _environment = new FarmGenerator.Environment();
          return this.generateTimetable(it, _environment);
        };
        String _join = IterableExtensions.join(ListExtensions.<Statement, String>map(loop.getLoopStatements(), _function), "");
        result = (_result + _join);
      }
      _xblockexpression = result;
    }
    return _xblockexpression;
  }
  
  protected String _generateTimetable(final JudgeStatement judge, final FarmGenerator.Environment env) {
    String _xblockexpression = null;
    {
      String result = "";
      Boolean _boolean = this.expRuntime.toBoolean(judge.getCondition());
      if ((_boolean).booleanValue()) {
        String _result = result;
        final Function1<Statement, String> _function = (Statement it) -> {
          FarmGenerator.Environment _environment = new FarmGenerator.Environment();
          return this.generateTimetable(it, _environment);
        };
        String _join = IterableExtensions.join(ListExtensions.<Statement, String>map(judge.getJudgeStatements(), _function), "");
        result = (_result + _join);
      } else {
        boolean successKey = false;
        EList<ElseJudgeStatement> _elseJudgeStatements = judge.getElseJudgeStatements();
        for (final ElseJudgeStatement elseJudgeStatement : _elseJudgeStatements) {
          if (((this.expRuntime.toBoolean(elseJudgeStatement.getCondition())).booleanValue() && (!successKey))) {
            successKey = true;
            String _result_1 = result;
            final Function1<Statement, String> _function_1 = (Statement it) -> {
              FarmGenerator.Environment _environment = new FarmGenerator.Environment();
              return this.generateTimetable(it, _environment);
            };
            String _join_1 = IterableExtensions.join(ListExtensions.<Statement, String>map(elseJudgeStatement.getElseJudgeStatements(), _function_1), "");
            result = (_result_1 + _join_1);
          }
        }
        if ((!successKey)) {
          EList<ElseStatement> _elseStatement = judge.getElseStatement();
          for (final ElseStatement elseStatement : _elseStatement) {
            String _result_2 = result;
            final Function1<Statement, String> _function_2 = (Statement it) -> {
              FarmGenerator.Environment _environment = new FarmGenerator.Environment();
              return this.generateTimetable(it, _environment);
            };
            String _join_2 = IterableExtensions.join(ListExtensions.<Statement, String>map(elseStatement.getElseStatements(), _function_2), "");
            result = (_result_2 + _join_2);
          }
        }
      }
      _xblockexpression = result;
    }
    return _xblockexpression;
  }
  
  protected String _generateTimetable(final ReportFunction function, final FarmGenerator.Environment env) {
    String _xblockexpression = null;
    {
      InputOutput.<String>println(function.getInstance().toString());
      StringConcatenation _builder = new StringConcatenation();
      _xblockexpression = _builder.toString();
    }
    return _xblockexpression;
  }
  
  protected String _generateTimetable(final MoveFunction function, final FarmGenerator.Environment env) {
    try {
      String _xblockexpression = null;
      {
        GeneratedField moveFromField = this.runtime.fieldMap.get(function.getMoveFromField().getName());
        GeneratedField moveToField = this.runtime.fieldMap.get(function.getMoveToField().getName());
        if ((moveFromField.crop == null)) {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("Field `");
          _builder.append(moveFromField.name);
          _builder.append("` is empty");
          throw new Exception(_builder.toString());
        } else {
          if ((moveToField.crop != null)) {
            StringConcatenation _builder_1 = new StringConcatenation();
            _builder_1.append("Field `");
            _builder_1.append(moveToField.name);
            _builder_1.append("` is not empty");
            throw new Exception(_builder_1.toString());
          } else {
            Boolean _judegeEnvironment = this.expRuntime.judegeEnvironment(moveToField, moveFromField.crop.currentStage);
            if ((_judegeEnvironment).booleanValue()) {
              moveToField.crop = moveFromField.crop;
              moveFromField.crop = null;
              moveToField.crop.field = moveToField;
            }
          }
        }
        StringConcatenation _builder_2 = new StringConcatenation();
        _xblockexpression = _builder_2.toString();
      }
      return _xblockexpression;
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  protected String _generateTimetable(final WaitFunction function, final FarmGenerator.Environment env) {
    try {
      String _xblockexpression = null;
      {
        String result = "";
        float _time = this.runtime.time;
        Float _float = this.expRuntime.toFloat(function.getValue());
        this.runtime.time = (_time + (_float).floatValue());
        Set<Map.Entry<String, GeneratedCrop>> _entrySet = this.runtime.cropMap.entrySet();
        for (final Map.Entry<String, GeneratedCrop> e : _entrySet) {
          {
            GeneratedCrop crop = e.getValue();
            if ((crop.field != null)) {
              float _time_1 = crop.time;
              Float _float_1 = this.expRuntime.toFloat(function.getValue());
              crop.time = (_time_1 + (_float_1).floatValue());
              float timeNeeded = 0;
              IntegerRange _upTo = new IntegerRange(0, crop.currentStageID);
              for (final Integer i : _upTo) {
                float _timeNeeded = timeNeeded;
                float _time_2 = crop.stage.get((i).intValue()).getTime();
                timeNeeded = (_timeNeeded + _time_2);
              }
              float _timeover = crop.currentStage.getTimeover();
              float timeOverflow = (timeNeeded + _timeover);
              Float _float_2 = this.expRuntime.toFloat(function.getValue());
              float timeExised = ((_float_2).floatValue() + crop.time);
              if ((timeExised < timeNeeded)) {
                String _result = result;
                StringConcatenation _builder = new StringConcatenation();
                _builder.append("Crop `");
                _builder.append(crop.name);
                _builder.append("` is growing in Field `");
                _builder.append(crop.field.name);
                _builder.append("`.");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.append("Stage is still in `");
                String _name = crop.currentStage.getName();
                _builder.append(_name, "\t");
                _builder.append("`.");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.append("Need ");
                _builder.append((timeNeeded - timeExised), "\t");
                _builder.append(" days to step into the next stage.");
                _builder.newLineIfNotEmpty();
                result = (_result + _builder);
              } else {
                if (((timeExised >= timeNeeded) && (timeExised < timeOverflow))) {
                  int _currentStageID = crop.currentStageID;
                  crop.currentStageID = (_currentStageID + 1);
                  crop.currentStage = crop.stage.get(crop.currentStageID);
                  String _result_1 = result;
                  StringConcatenation _builder_1 = new StringConcatenation();
                  _builder_1.append("Crop `");
                  _builder_1.append(crop.name);
                  _builder_1.append("` is growing in Field `");
                  _builder_1.append(crop.field.name);
                  _builder_1.append("`.");
                  _builder_1.newLineIfNotEmpty();
                  _builder_1.append("\t");
                  _builder_1.append("Stage is changed to `");
                  String _name_1 = crop.currentStage.getName();
                  _builder_1.append(_name_1, "\t");
                  _builder_1.append("`.");
                  _builder_1.newLineIfNotEmpty();
                  _builder_1.append("\t");
                  _builder_1.append("You need to handle the crop in ");
                  _builder_1.append((timeOverflow - timeExised), "\t");
                  _builder_1.append(" days otherwise it will die.");
                  _builder_1.newLineIfNotEmpty();
                  result = (_result_1 + _builder_1);
                } else {
                  if ((timeExised >= timeOverflow)) {
                    StringConcatenation _builder_2 = new StringConcatenation();
                    _builder_2.append("Crop `");
                    _builder_2.append(crop.name);
                    _builder_2.append("` is died because time exceeded");
                    throw new Exception(_builder_2.toString());
                  }
                }
              }
            }
          }
        }
        _xblockexpression = result;
      }
      return _xblockexpression;
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  protected String _generateTimetable(final Statement stmt, final FarmGenerator.Environment env) {
    StringConcatenation _builder = new StringConcatenation();
    return _builder.toString();
  }
  
  /**
   * generateJavaStatement
   */
  protected String _generateJavaStatement(final Attribute attribute, final FarmGenerator.Environment env) {
    StringConcatenation _builder = new StringConcatenation();
    String _name = attribute.getName();
    _builder.append(_name);
    _builder.newLineIfNotEmpty();
    return _builder.toString();
  }
  
  protected String _generateJavaStatement(final ReportFunction func, final FarmGenerator.Environment env) {
    StringConcatenation _builder = new StringConcatenation();
    return _builder.toString();
  }
  
  protected String _generateJavaStatement(final Crop stmt, final FarmGenerator.Environment env) {
    StringConcatenation _builder = new StringConcatenation();
    return _builder.toString();
  }
  
  protected String _generateJavaStatement(final Field stmt, final FarmGenerator.Environment env) {
    StringConcatenation _builder = new StringConcatenation();
    return _builder.toString();
  }
  
  protected String _generateJavaStatement(final Mission stmt, final FarmGenerator.Environment env) {
    StringConcatenation _builder = new StringConcatenation();
    return _builder.toString();
  }
  
  protected String _generateJavaStatement(final Statement stmt, final FarmGenerator.Environment env) {
    StringConcatenation _builder = new StringConcatenation();
    return _builder.toString();
  }
  
  public String generateTimetable(final EObject function, final FarmGenerator.Environment env) {
    if (function instanceof MoveFunction) {
      return _generateTimetable((MoveFunction)function, env);
    } else if (function instanceof ReportFunction) {
      return _generateTimetable((ReportFunction)function, env);
    } else if (function instanceof WaitFunction) {
      return _generateTimetable((WaitFunction)function, env);
    } else if (function instanceof Assignment) {
      return _generateTimetable((Assignment)function, env);
    } else if (function instanceof Crop) {
      return _generateTimetable((Crop)function, env);
    } else if (function instanceof Field) {
      return _generateTimetable((Field)function, env);
    } else if (function instanceof JudgeStatement) {
      return _generateTimetable((JudgeStatement)function, env);
    } else if (function instanceof LoopStatement) {
      return _generateTimetable((LoopStatement)function, env);
    } else if (function instanceof Variable) {
      return _generateTimetable((Variable)function, env);
    } else if (function instanceof Attribute) {
      return _generateTimetable((Attribute)function, env);
    } else if (function instanceof Mission) {
      return _generateTimetable((Mission)function, env);
    } else if (function instanceof Statement) {
      return _generateTimetable((Statement)function, env);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(function, env).toString());
    }
  }
  
  public String generateJavaStatement(final EObject func, final FarmGenerator.Environment env) {
    if (func instanceof ReportFunction) {
      return _generateJavaStatement((ReportFunction)func, env);
    } else if (func instanceof Crop) {
      return _generateJavaStatement((Crop)func, env);
    } else if (func instanceof Field) {
      return _generateJavaStatement((Field)func, env);
    } else if (func instanceof Attribute) {
      return _generateJavaStatement((Attribute)func, env);
    } else if (func instanceof Mission) {
      return _generateJavaStatement((Mission)func, env);
    } else if (func instanceof Statement) {
      return _generateJavaStatement((Statement)func, env);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(func, env).toString());
    }
  }
}
