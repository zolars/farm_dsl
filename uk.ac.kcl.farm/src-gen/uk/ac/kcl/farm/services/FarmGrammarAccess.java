/*
 * generated by Xtext 2.26.0
 */
package uk.ac.kcl.farm.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class FarmGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class FarmProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.farm.Farm.FarmProgram");
		private final Assignment cStatementsAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cStatementsAlternatives_0 = (Alternatives)cStatementsAssignment.eContents().get(0);
		private final RuleCall cStatementsClassParserRuleCall_0_0 = (RuleCall)cStatementsAlternatives_0.eContents().get(0);
		private final RuleCall cStatementsAttributeDeclarationParserRuleCall_0_1 = (RuleCall)cStatementsAlternatives_0.eContents().get(1);
		
		//FarmProgram:
		//    statements += (Class | AttributeDeclaration)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//statements += (Class | AttributeDeclaration)*
		public Assignment getStatementsAssignment() { return cStatementsAssignment; }
		
		//(Class | AttributeDeclaration)
		public Alternatives getStatementsAlternatives_0() { return cStatementsAlternatives_0; }
		
		//Class
		public RuleCall getStatementsClassParserRuleCall_0_0() { return cStatementsClassParserRuleCall_0_0; }
		
		//AttributeDeclaration
		public RuleCall getStatementsAttributeDeclarationParserRuleCall_0_1() { return cStatementsAttributeDeclarationParserRuleCall_0_1; }
	}
	public class ClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.farm.Farm.Class");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCropParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMachineParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFieldParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cMissionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//// General statement
		//Class:
		//    Crop |
		//    Machine |
		//    Field |
		//    Mission
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Crop |
		//Machine |
		//Field |
		//Mission
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Crop
		public RuleCall getCropParserRuleCall_0() { return cCropParserRuleCall_0; }
		
		//Machine
		public RuleCall getMachineParserRuleCall_1() { return cMachineParserRuleCall_1; }
		
		//Field
		public RuleCall getFieldParserRuleCall_2() { return cFieldParserRuleCall_2; }
		
		//Mission
		public RuleCall getMissionParserRuleCall_3() { return cMissionParserRuleCall_3; }
	}
	public class ParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.farm.Farm.Param");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cCropKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cParamAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cParamIDTerminalRuleCall_0_1_0 = (RuleCall)cParamAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cMachineKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cParamAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cParamIDTerminalRuleCall_1_1_0 = (RuleCall)cParamAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cFieldKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cParamAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cParamIDTerminalRuleCall_2_1_0 = (RuleCall)cParamAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cMissionKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cParamAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cParamIDTerminalRuleCall_3_1_0 = (RuleCall)cParamAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Keyword cRealKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cParamAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cParamIDTerminalRuleCall_4_1_0 = (RuleCall)cParamAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Keyword cStringKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cParamAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cParamIDTerminalRuleCall_5_1_0 = (RuleCall)cParamAssignment_5_1.eContents().get(0);
		
		//Param:
		//    "crop" param=ID |
		//    "machine" param=ID |
		//    "field" param=ID |
		//    "mission" param=ID |
		//    "real" param=ID |
		//    "string" param=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"crop" param=ID |
		//"machine" param=ID |
		//"field" param=ID |
		//"mission" param=ID |
		//"real" param=ID |
		//"string" param=ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"crop" param=ID
		public Group getGroup_0() { return cGroup_0; }
		
		//"crop"
		public Keyword getCropKeyword_0_0() { return cCropKeyword_0_0; }
		
		//param=ID
		public Assignment getParamAssignment_0_1() { return cParamAssignment_0_1; }
		
		//ID
		public RuleCall getParamIDTerminalRuleCall_0_1_0() { return cParamIDTerminalRuleCall_0_1_0; }
		
		//"machine" param=ID
		public Group getGroup_1() { return cGroup_1; }
		
		//"machine"
		public Keyword getMachineKeyword_1_0() { return cMachineKeyword_1_0; }
		
		//param=ID
		public Assignment getParamAssignment_1_1() { return cParamAssignment_1_1; }
		
		//ID
		public RuleCall getParamIDTerminalRuleCall_1_1_0() { return cParamIDTerminalRuleCall_1_1_0; }
		
		//"field" param=ID
		public Group getGroup_2() { return cGroup_2; }
		
		//"field"
		public Keyword getFieldKeyword_2_0() { return cFieldKeyword_2_0; }
		
		//param=ID
		public Assignment getParamAssignment_2_1() { return cParamAssignment_2_1; }
		
		//ID
		public RuleCall getParamIDTerminalRuleCall_2_1_0() { return cParamIDTerminalRuleCall_2_1_0; }
		
		//"mission" param=ID
		public Group getGroup_3() { return cGroup_3; }
		
		//"mission"
		public Keyword getMissionKeyword_3_0() { return cMissionKeyword_3_0; }
		
		//param=ID
		public Assignment getParamAssignment_3_1() { return cParamAssignment_3_1; }
		
		//ID
		public RuleCall getParamIDTerminalRuleCall_3_1_0() { return cParamIDTerminalRuleCall_3_1_0; }
		
		//"real" param=ID
		public Group getGroup_4() { return cGroup_4; }
		
		//"real"
		public Keyword getRealKeyword_4_0() { return cRealKeyword_4_0; }
		
		//param=ID
		public Assignment getParamAssignment_4_1() { return cParamAssignment_4_1; }
		
		//ID
		public RuleCall getParamIDTerminalRuleCall_4_1_0() { return cParamIDTerminalRuleCall_4_1_0; }
		
		//"string" param=ID
		public Group getGroup_5() { return cGroup_5; }
		
		//"string"
		public Keyword getStringKeyword_5_0() { return cStringKeyword_5_0; }
		
		//param=ID
		public Assignment getParamAssignment_5_1() { return cParamAssignment_5_1; }
		
		//ID
		public RuleCall getParamIDTerminalRuleCall_5_1_0() { return cParamIDTerminalRuleCall_5_1_0; }
	}
	public class TypeNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.farm.Farm.TypeName");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cNullKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cRealKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cBooleanKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cStringKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//TypeName:
		//    "null" | "real" | "boolean" | "string"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"null" | "real" | "boolean" | "string"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"null"
		public Keyword getNullKeyword_0() { return cNullKeyword_0; }
		
		//"real"
		public Keyword getRealKeyword_1() { return cRealKeyword_1; }
		
		//"boolean"
		public Keyword getBooleanKeyword_2() { return cBooleanKeyword_2; }
		
		//"string"
		public Keyword getStringKeyword_3() { return cStringKeyword_3; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.farm.Farm.Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVariableDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLoopStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Statement:
		//    VariableDeclaration |
		//    LoopStatement
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//VariableDeclaration |
		//LoopStatement
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//VariableDeclaration
		public RuleCall getVariableDeclarationParserRuleCall_0() { return cVariableDeclarationParserRuleCall_0; }
		
		//LoopStatement
		public RuleCall getLoopStatementParserRuleCall_1() { return cLoopStatementParserRuleCall_1; }
	}
	public class VariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.farm.Farm.VariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueVariableExpressionParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//VariableDeclaration:
		//    "var" name=ID "=" value=VariableExpression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"var" name=ID "=" value=VariableExpression
		public Group getGroup() { return cGroup; }
		
		//"var"
		public Keyword getVarKeyword_0() { return cVarKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//value=VariableExpression
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//VariableExpression
		public RuleCall getValueVariableExpressionParserRuleCall_3_0() { return cValueVariableExpressionParserRuleCall_3_0; }
	}
	public class VariableExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.farm.Farm.VariableExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRealExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cConditionExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//VariableExpression:
		//    RealExpression | ConditionExpression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//RealExpression | ConditionExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//RealExpression
		public RuleCall getRealExpressionParserRuleCall_0() { return cRealExpressionParserRuleCall_0; }
		
		//ConditionExpression
		public RuleCall getConditionExpressionParserRuleCall_1() { return cConditionExpressionParserRuleCall_1; }
	}
	public class LoopStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.farm.Farm.LoopStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConditionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionConditionExpressionParserRuleCall_2_0 = (RuleCall)cConditionAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cStatementsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cStatementsStatementParserRuleCall_5_0 = (RuleCall)cStatementsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//LoopStatement:
		//    "while" "(" condition=ConditionExpression ")" "{"
		//        statements += Statement+
		//    "}"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"while" "(" condition=ConditionExpression ")" "{"
		//    statements += Statement+
		//"}"
		public Group getGroup() { return cGroup; }
		
		//"while"
		public Keyword getWhileKeyword_0() { return cWhileKeyword_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//condition=ConditionExpression
		public Assignment getConditionAssignment_2() { return cConditionAssignment_2; }
		
		//ConditionExpression
		public RuleCall getConditionConditionExpressionParserRuleCall_2_0() { return cConditionConditionExpressionParserRuleCall_2_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//statements += Statement+
		public Assignment getStatementsAssignment_5() { return cStatementsAssignment_5; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_5_0() { return cStatementsStatementParserRuleCall_5_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class RealExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.farm.Farm.RealExpression");
		private final RuleCall cAdditionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		////ReturnStatement:
		////    "return" "(" value=(VariableExpression | [VariableDeclaration]) ")"
		////;
		//// MoveStatement:
		////     command = MoveCommand "(" steps = Addition ")"
		//// ;
		//// enum MoveCommand:
		////     forward | backward
		//// ;
		//// TurnStatement:
		////     "turn" command = TurnCommand "by" degrees = REAL "degrees"
		//// ;
		//// enum TurnCommand:
		////     left | right
		//// ;
		//RealExpression:
		//    Addition
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Addition
		public RuleCall getAdditionParserRuleCall() { return cAdditionParserRuleCall; }
	}
	public class AdditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.farm.Farm.Addition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplicationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAdditionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOperatorAlternatives_1_1_0 = (Alternatives)cOperatorAssignment_1_1.eContents().get(0);
		private final Keyword cOperatorPlusSignKeyword_1_1_0_0 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOperatorHyphenMinusKeyword_1_1_0_1 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightMultiplicationParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Addition returns RealExpression:
		//    Multiplication ({Addition.left = current} operator+=("+"|"-") right+=Multiplication)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Multiplication ({Addition.left = current} operator+=("+"|"-") right+=Multiplication)*
		public Group getGroup() { return cGroup; }
		
		//Multiplication
		public RuleCall getMultiplicationParserRuleCall_0() { return cMultiplicationParserRuleCall_0; }
		
		//({Addition.left = current} operator+=("+"|"-") right+=Multiplication)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Addition.left = current}
		public Action getAdditionLeftAction_1_0() { return cAdditionLeftAction_1_0; }
		
		//operator+=("+"|"-")
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//("+"|"-")
		public Alternatives getOperatorAlternatives_1_1_0() { return cOperatorAlternatives_1_1_0; }
		
		//"+"
		public Keyword getOperatorPlusSignKeyword_1_1_0_0() { return cOperatorPlusSignKeyword_1_1_0_0; }
		
		//"-"
		public Keyword getOperatorHyphenMinusKeyword_1_1_0_1() { return cOperatorHyphenMinusKeyword_1_1_0_1; }
		
		//right+=Multiplication
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Multiplication
		public RuleCall getRightMultiplicationParserRuleCall_1_2_0() { return cRightMultiplicationParserRuleCall_1_2_0; }
	}
	public class MultiplicationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.farm.Farm.Multiplication");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cRealPrimaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cMultiplicationLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOperatorAlternatives_1_1_0 = (Alternatives)cOperatorAssignment_1_1.eContents().get(0);
		private final Keyword cOperatorAsteriskKeyword_1_1_0_0 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOperatorSolidusKeyword_1_1_0_1 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightRealPrimaryParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Multiplication returns RealExpression:
		//    RealPrimary ({Multiplication.left = current} operator+=("*"|"/") right+=RealPrimary)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//RealPrimary ({Multiplication.left = current} operator+=("*"|"/") right+=RealPrimary)*
		public Group getGroup() { return cGroup; }
		
		//RealPrimary
		public RuleCall getRealPrimaryParserRuleCall_0() { return cRealPrimaryParserRuleCall_0; }
		
		//({Multiplication.left = current} operator+=("*"|"/") right+=RealPrimary)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Multiplication.left = current}
		public Action getMultiplicationLeftAction_1_0() { return cMultiplicationLeftAction_1_0; }
		
		//operator+=("*"|"/")
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//("*"|"/")
		public Alternatives getOperatorAlternatives_1_1_0() { return cOperatorAlternatives_1_1_0; }
		
		//"*"
		public Keyword getOperatorAsteriskKeyword_1_1_0_0() { return cOperatorAsteriskKeyword_1_1_0_0; }
		
		//"/"
		public Keyword getOperatorSolidusKeyword_1_1_0_1() { return cOperatorSolidusKeyword_1_1_0_1; }
		
		//right+=RealPrimary
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//RealPrimary
		public RuleCall getRightRealPrimaryParserRuleCall_1_2_0() { return cRightRealPrimaryParserRuleCall_1_2_0; }
	}
	public class RealPrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.farm.Farm.RealPrimary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRealLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRealVarExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cAdditionParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//RealPrimary returns RealExpression:
		//    RealLiteral |
		//    RealVarExpression |
		//    "(" Addition ")"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//RealLiteral |
		//RealVarExpression |
		//"(" Addition ")"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//RealLiteral
		public RuleCall getRealLiteralParserRuleCall_0() { return cRealLiteralParserRuleCall_0; }
		
		//RealVarExpression
		public RuleCall getRealVarExpressionParserRuleCall_1() { return cRealVarExpressionParserRuleCall_1; }
		
		//"(" Addition ")"
		public Group getGroup_2() { return cGroup_2; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//Addition
		public RuleCall getAdditionParserRuleCall_2_1() { return cAdditionParserRuleCall_2_1; }
		
		//")"
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
	}
	public class RealLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.farm.Farm.RealLiteral");
		private final Assignment cValAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValREALParserRuleCall_0 = (RuleCall)cValAssignment.eContents().get(0);
		
		//RealLiteral:
		//    val = REAL
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//val = REAL
		public Assignment getValAssignment() { return cValAssignment; }
		
		//REAL
		public RuleCall getValREALParserRuleCall_0() { return cValREALParserRuleCall_0; }
	}
	public class RealVarExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.farm.Farm.RealVarExpression");
		private final Assignment cVarAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cVarVariableDeclarationCrossReference_0 = (CrossReference)cVarAssignment.eContents().get(0);
		private final RuleCall cVarVariableDeclarationIDTerminalRuleCall_0_1 = (RuleCall)cVarVariableDeclarationCrossReference_0.eContents().get(1);
		
		//RealVarExpression:
		//    var = [VariableDeclaration]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//var = [VariableDeclaration]
		public Assignment getVarAssignment() { return cVarAssignment; }
		
		//[VariableDeclaration]
		public CrossReference getVarVariableDeclarationCrossReference_0() { return cVarVariableDeclarationCrossReference_0; }
		
		//ID
		public RuleCall getVarVariableDeclarationIDTerminalRuleCall_0_1() { return cVarVariableDeclarationIDTerminalRuleCall_0_1; }
	}
	public class REALElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.farm.Farm.REAL");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//REAL returns ecore::EFloat hidden():
		//    INT? "." INT
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//INT? "." INT
		public Group getGroup() { return cGroup; }
		
		//INT?
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
	}
	public class ConditionExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.farm.Farm.ConditionExpression");
		private final RuleCall cOrExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ConditionExpression:
		//    OrExpression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//OrExpression
		public RuleCall getOrExpressionParserRuleCall() { return cOrExpressionParserRuleCall; }
	}
	public class OrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.farm.Farm.OrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOrExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOperatorVerticalLineVerticalLineKeyword_1_1_0 = (Keyword)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAndExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//OrExpression returns ConditionExpression:
		//    AndExpression ({OrExpression.left = current} operator+=("||") right+=AndExpression)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//AndExpression ({OrExpression.left = current} operator+=("||") right+=AndExpression)*
		public Group getGroup() { return cGroup; }
		
		//AndExpression
		public RuleCall getAndExpressionParserRuleCall_0() { return cAndExpressionParserRuleCall_0; }
		
		//({OrExpression.left = current} operator+=("||") right+=AndExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{OrExpression.left = current}
		public Action getOrExpressionLeftAction_1_0() { return cOrExpressionLeftAction_1_0; }
		
		//operator+=("||")
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//("||")
		public Keyword getOperatorVerticalLineVerticalLineKeyword_1_1_0() { return cOperatorVerticalLineVerticalLineKeyword_1_1_0; }
		
		//right+=AndExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//AndExpression
		public RuleCall getRightAndExpressionParserRuleCall_1_2_0() { return cRightAndExpressionParserRuleCall_1_2_0; }
	}
	public class AndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.farm.Farm.AndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cComparisonExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAndExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOperatorAmpersandAmpersandKeyword_1_1_0 = (Keyword)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightComparisonExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//AndExpression returns ConditionExpression:
		//    ComparisonExpression ({AndExpression.left = current} operator+=("&&") right+=ComparisonExpression)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ComparisonExpression ({AndExpression.left = current} operator+=("&&") right+=ComparisonExpression)*
		public Group getGroup() { return cGroup; }
		
		//ComparisonExpression
		public RuleCall getComparisonExpressionParserRuleCall_0() { return cComparisonExpressionParserRuleCall_0; }
		
		//({AndExpression.left = current} operator+=("&&") right+=ComparisonExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{AndExpression.left = current}
		public Action getAndExpressionLeftAction_1_0() { return cAndExpressionLeftAction_1_0; }
		
		//operator+=("&&")
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//("&&")
		public Keyword getOperatorAmpersandAmpersandKeyword_1_1_0() { return cOperatorAmpersandAmpersandKeyword_1_1_0; }
		
		//right+=ComparisonExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//ComparisonExpression
		public RuleCall getRightComparisonExpressionParserRuleCall_1_2_0() { return cRightComparisonExpressionParserRuleCall_1_2_0; }
	}
	public class ComparisonExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.farm.Farm.ComparisonExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBooleanPrimaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cComparisonExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOperatorAlternatives_1_1_0 = (Alternatives)cOperatorAssignment_1_1.eContents().get(0);
		private final Keyword cOperatorLessThanSignKeyword_1_1_0_0 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOperatorLessThanSignEqualsSignKeyword_1_1_0_1 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(1);
		private final Keyword cOperatorEqualsSignEqualsSignKeyword_1_1_0_2 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(2);
		private final Keyword cOperatorGreaterThanSignEqualsSignKeyword_1_1_0_3 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(3);
		private final Keyword cOperatorGreaterThanSignKeyword_1_1_0_4 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(4);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightBooleanPrimaryParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//ComparisonExpression returns ConditionExpression:
		//    BooleanPrimary ({ComparisonExpression.left=current} operator=("<"|"<="|"=="|">="|">") right=BooleanPrimary)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//BooleanPrimary ({ComparisonExpression.left=current} operator=("<"|"<="|"=="|">="|">") right=BooleanPrimary)*
		public Group getGroup() { return cGroup; }
		
		//BooleanPrimary
		public RuleCall getBooleanPrimaryParserRuleCall_0() { return cBooleanPrimaryParserRuleCall_0; }
		
		//({ComparisonExpression.left=current} operator=("<"|"<="|"=="|">="|">") right=BooleanPrimary)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{ComparisonExpression.left=current}
		public Action getComparisonExpressionLeftAction_1_0() { return cComparisonExpressionLeftAction_1_0; }
		
		//operator=("<"|"<="|"=="|">="|">")
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//("<"|"<="|"=="|">="|">")
		public Alternatives getOperatorAlternatives_1_1_0() { return cOperatorAlternatives_1_1_0; }
		
		//"<"
		public Keyword getOperatorLessThanSignKeyword_1_1_0_0() { return cOperatorLessThanSignKeyword_1_1_0_0; }
		
		//"<="
		public Keyword getOperatorLessThanSignEqualsSignKeyword_1_1_0_1() { return cOperatorLessThanSignEqualsSignKeyword_1_1_0_1; }
		
		//"=="
		public Keyword getOperatorEqualsSignEqualsSignKeyword_1_1_0_2() { return cOperatorEqualsSignEqualsSignKeyword_1_1_0_2; }
		
		//">="
		public Keyword getOperatorGreaterThanSignEqualsSignKeyword_1_1_0_3() { return cOperatorGreaterThanSignEqualsSignKeyword_1_1_0_3; }
		
		//">"
		public Keyword getOperatorGreaterThanSignKeyword_1_1_0_4() { return cOperatorGreaterThanSignKeyword_1_1_0_4; }
		
		//right=BooleanPrimary
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//BooleanPrimary
		public RuleCall getRightBooleanPrimaryParserRuleCall_1_2_0() { return cRightBooleanPrimaryParserRuleCall_1_2_0; }
	}
	public class BooleanPrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.farm.Farm.BooleanPrimary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBooleanLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cOrExpressionParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final RuleCall cBooleanVarExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//BooleanPrimary returns ConditionExpression:
		//    BooleanLiteral | "[" OrExpression "]"  | BooleanVarExpression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//BooleanLiteral | "[" OrExpression "]"  | BooleanVarExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BooleanLiteral
		public RuleCall getBooleanLiteralParserRuleCall_0() { return cBooleanLiteralParserRuleCall_0; }
		
		//"[" OrExpression "]"
		public Group getGroup_1() { return cGroup_1; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }
		
		//OrExpression
		public RuleCall getOrExpressionParserRuleCall_1_1() { return cOrExpressionParserRuleCall_1_1; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_1_2() { return cRightSquareBracketKeyword_1_2; }
		
		//BooleanVarExpression
		public RuleCall getBooleanVarExpressionParserRuleCall_2() { return cBooleanVarExpressionParserRuleCall_2; }
	}
	public class BooleanLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.farm.Farm.BooleanLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cValAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cValTrueKeyword_0_0 = (Keyword)cValAssignment_0.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//BooleanLiteral:
		//    val="true" | "false"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//val="true" | "false"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//val="true"
		public Assignment getValAssignment_0() { return cValAssignment_0; }
		
		//"true"
		public Keyword getValTrueKeyword_0_0() { return cValTrueKeyword_0_0; }
		
		//"false"
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}
	public class BooleanVarExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.farm.Farm.BooleanVarExpression");
		private final Assignment cVarAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cVarVariableDeclarationCrossReference_0 = (CrossReference)cVarAssignment.eContents().get(0);
		private final RuleCall cVarVariableDeclarationIDTerminalRuleCall_0_1 = (RuleCall)cVarVariableDeclarationCrossReference_0.eContents().get(1);
		
		//BooleanVarExpression:
		//     var = [VariableDeclaration]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//var = [VariableDeclaration]
		public Assignment getVarAssignment() { return cVarAssignment; }
		
		//[VariableDeclaration]
		public CrossReference getVarVariableDeclarationCrossReference_0() { return cVarVariableDeclarationCrossReference_0; }
		
		//ID
		public RuleCall getVarVariableDeclarationIDTerminalRuleCall_0_1() { return cVarVariableDeclarationIDTerminalRuleCall_0_1; }
	}
	public class AttributeDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.farm.Farm.AttributeDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDefineKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//// Define codes
		//AttributeDeclaration:
		//    "define" name=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"define" name=ID
		public Group getGroup() { return cGroup; }
		
		//"define"
		public Keyword getDefineKeyword_0() { return cDefineKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class CropElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.farm.Farm.Crop");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCropKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCropAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCropIDTerminalRuleCall_1_0 = (RuleCall)cCropAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cNameKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cCropNameAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cCropNameSTRINGTerminalRuleCall_5_0 = (RuleCall)cCropNameAssignment_5.eContents().get(0);
		private final Keyword cStageKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cColonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cLeftSquareBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cStatementsAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cStatementsCropStagesParserRuleCall_9_0 = (RuleCall)cStatementsAssignment_9.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Keyword cRightCurlyBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		
		//// Crop code block
		//Crop:
		//    "crop" crop=ID "{"
		//        "name" ":" cropName=STRING
		//        "stage" ":" "["
		//            statements += CropStages
		//        "]"
		//    "}"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"crop" crop=ID "{"
		//    "name" ":" cropName=STRING
		//    "stage" ":" "["
		//        statements += CropStages
		//    "]"
		//"}"
		public Group getGroup() { return cGroup; }
		
		//"crop"
		public Keyword getCropKeyword_0() { return cCropKeyword_0; }
		
		//crop=ID
		public Assignment getCropAssignment_1() { return cCropAssignment_1; }
		
		//ID
		public RuleCall getCropIDTerminalRuleCall_1_0() { return cCropIDTerminalRuleCall_1_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//"name"
		public Keyword getNameKeyword_3() { return cNameKeyword_3; }
		
		//":"
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }
		
		//cropName=STRING
		public Assignment getCropNameAssignment_5() { return cCropNameAssignment_5; }
		
		//STRING
		public RuleCall getCropNameSTRINGTerminalRuleCall_5_0() { return cCropNameSTRINGTerminalRuleCall_5_0; }
		
		//"stage"
		public Keyword getStageKeyword_6() { return cStageKeyword_6; }
		
		//":"
		public Keyword getColonKeyword_7() { return cColonKeyword_7; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_8() { return cLeftSquareBracketKeyword_8; }
		
		//statements += CropStages
		public Assignment getStatementsAssignment_9() { return cStatementsAssignment_9; }
		
		//CropStages
		public RuleCall getStatementsCropStagesParserRuleCall_9_0() { return cStatementsCropStagesParserRuleCall_9_0; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_10() { return cRightSquareBracketKeyword_10; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_11() { return cRightCurlyBracketKeyword_11; }
	}
	public class CropStagesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.farm.Farm.CropStages");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cElementsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cElementsCropStageParserRuleCall_0_0 = (RuleCall)cElementsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cElementsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cElementsCropStageParserRuleCall_1_1_0 = (RuleCall)cElementsAssignment_1_1.eContents().get(0);
		
		//CropStages:
		//    elements += CropStage ("," elements += CropStage)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//elements += CropStage ("," elements += CropStage)*
		public Group getGroup() { return cGroup; }
		
		//elements += CropStage
		public Assignment getElementsAssignment_0() { return cElementsAssignment_0; }
		
		//CropStage
		public RuleCall getElementsCropStageParserRuleCall_0_0() { return cElementsCropStageParserRuleCall_0_0; }
		
		//("," elements += CropStage)*
		public Group getGroup_1() { return cGroup_1; }
		
		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//elements += CropStage
		public Assignment getElementsAssignment_1_1() { return cElementsAssignment_1_1; }
		
		//CropStage
		public RuleCall getElementsCropStageParserRuleCall_1_1_0() { return cElementsCropStageParserRuleCall_1_1_0; }
	}
	public class CropStageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.farm.Farm.CropStage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cNameKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameSTRINGTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cTimeConsumedKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cColonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cTimeConsumendAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cTimeConsumendRealExpressionParserRuleCall_6_0 = (RuleCall)cTimeConsumendAssignment_6.eContents().get(0);
		private final Assignment cElementsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cElementsCropAttributesParserRuleCall_7_0 = (RuleCall)cElementsAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//CropStage:
		//    "{"
		//        "name" ":" name=STRING
		//        "timeConsumed" ":" timeConsumend=RealExpression
		//        elements += CropAttributes*
		//    "}"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"{"
		//    "name" ":" name=STRING
		//    "timeConsumed" ":" timeConsumend=RealExpression
		//    elements += CropAttributes*
		//"}"
		public Group getGroup() { return cGroup; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//"name"
		public Keyword getNameKeyword_1() { return cNameKeyword_1; }
		
		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//name=STRING
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_3_0() { return cNameSTRINGTerminalRuleCall_3_0; }
		
		//"timeConsumed"
		public Keyword getTimeConsumedKeyword_4() { return cTimeConsumedKeyword_4; }
		
		//":"
		public Keyword getColonKeyword_5() { return cColonKeyword_5; }
		
		//timeConsumend=RealExpression
		public Assignment getTimeConsumendAssignment_6() { return cTimeConsumendAssignment_6; }
		
		//RealExpression
		public RuleCall getTimeConsumendRealExpressionParserRuleCall_6_0() { return cTimeConsumendRealExpressionParserRuleCall_6_0; }
		
		//elements += CropAttributes*
		public Assignment getElementsAssignment_7() { return cElementsAssignment_7; }
		
		//CropAttributes
		public RuleCall getElementsCropAttributesParserRuleCall_7_0() { return cElementsCropAttributesParserRuleCall_7_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class CropAttributesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.farm.Farm.CropAttributes");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTypeAttributeDeclarationCrossReference_0_0 = (CrossReference)cTypeAssignment_0.eContents().get(0);
		private final RuleCall cTypeAttributeDeclarationIDTerminalRuleCall_0_0_1 = (RuleCall)cTypeAttributeDeclarationCrossReference_0_0.eContents().get(1);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueRealExpressionParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//CropAttributes:
		//    type=[AttributeDeclaration] ":" value=RealExpression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//type=[AttributeDeclaration] ":" value=RealExpression
		public Group getGroup() { return cGroup; }
		
		//type=[AttributeDeclaration]
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//[AttributeDeclaration]
		public CrossReference getTypeAttributeDeclarationCrossReference_0_0() { return cTypeAttributeDeclarationCrossReference_0_0; }
		
		//ID
		public RuleCall getTypeAttributeDeclarationIDTerminalRuleCall_0_0_1() { return cTypeAttributeDeclarationIDTerminalRuleCall_0_0_1; }
		
		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//value=RealExpression
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//RealExpression
		public RuleCall getValueRealExpressionParserRuleCall_2_0() { return cValueRealExpressionParserRuleCall_2_0; }
	}
	public class MachineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.farm.Farm.Machine");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMachineKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cNameKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cMachineNameAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cMachineNameSTRINGTerminalRuleCall_5_0 = (RuleCall)cMachineNameAssignment_5.eContents().get(0);
		private final Keyword cIpKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cColonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cIpAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cIpIPParserRuleCall_8_0 = (RuleCall)cIpAssignment_8.eContents().get(0);
		private final Assignment cStatementsAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cStatementsTaskParserRuleCall_9_0 = (RuleCall)cStatementsAssignment_9.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//// Machine code block
		//Machine:
		//    "machine" name=ID "{"
		//        "name" ":" machineName=STRING
		//        "ip" ":" ip=IP
		//        statements += Task+
		//    "}"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"machine" name=ID "{"
		//    "name" ":" machineName=STRING
		//    "ip" ":" ip=IP
		//    statements += Task+
		//"}"
		public Group getGroup() { return cGroup; }
		
		//"machine"
		public Keyword getMachineKeyword_0() { return cMachineKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//"name"
		public Keyword getNameKeyword_3() { return cNameKeyword_3; }
		
		//":"
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }
		
		//machineName=STRING
		public Assignment getMachineNameAssignment_5() { return cMachineNameAssignment_5; }
		
		//STRING
		public RuleCall getMachineNameSTRINGTerminalRuleCall_5_0() { return cMachineNameSTRINGTerminalRuleCall_5_0; }
		
		//"ip"
		public Keyword getIpKeyword_6() { return cIpKeyword_6; }
		
		//":"
		public Keyword getColonKeyword_7() { return cColonKeyword_7; }
		
		//ip=IP
		public Assignment getIpAssignment_8() { return cIpAssignment_8; }
		
		//IP
		public RuleCall getIpIPParserRuleCall_8_0() { return cIpIPParserRuleCall_8_0; }
		
		//statements += Task+
		public Assignment getStatementsAssignment_9() { return cStatementsAssignment_9; }
		
		//Task
		public RuleCall getStatementsTaskParserRuleCall_9_0() { return cStatementsTaskParserRuleCall_9_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }
	}
	public class IPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.farm.Farm.IP");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Keyword cFullStopKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_2_2_0 = (RuleCall)cGroup_2_2.eContents().get(0);
		private final Keyword cFullStopKeyword_2_2_1 = (Keyword)cGroup_2_2.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2_2_2 = (RuleCall)cGroup_2_2.eContents().get(2);
		
		//IP:
		//    (INT '.' (INT '.' (INT '.' (INT))))
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(INT '.' (INT '.' (INT '.' (INT))))
		public Group getGroup() { return cGroup; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//(INT '.' (INT '.' (INT)))
		public Group getGroup_2() { return cGroup_2; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2_0() { return cINTTerminalRuleCall_2_0; }
		
		//'.'
		public Keyword getFullStopKeyword_2_1() { return cFullStopKeyword_2_1; }
		
		//(INT '.' (INT))
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2_2_0() { return cINTTerminalRuleCall_2_2_0; }
		
		//'.'
		public Keyword getFullStopKeyword_2_2_1() { return cFullStopKeyword_2_2_1; }
		
		//(INT)
		public RuleCall getINTTerminalRuleCall_2_2_2() { return cINTTerminalRuleCall_2_2_2; }
	}
	public class FieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.farm.Farm.Field");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFieldKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cFieldKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//// Field code block
		//Field:
		//    "field" name=ID "{"
		//        "field"
		//    "}"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"field" name=ID "{"
		//    "field"
		//"}"
		public Group getGroup() { return cGroup; }
		
		//"field"
		public Keyword getFieldKeyword_0() { return cFieldKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//"field"
		public Keyword getFieldKeyword_3() { return cFieldKeyword_3; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class MissionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.farm.Farm.Mission");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMissionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStatementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Alternatives cStatementsAlternatives_3_0 = (Alternatives)cStatementsAssignment_3.eContents().get(0);
		private final RuleCall cStatementsStatementParserRuleCall_3_0_0 = (RuleCall)cStatementsAlternatives_3_0.eContents().get(0);
		private final RuleCall cStatementsTaskParserRuleCall_3_0_1 = (RuleCall)cStatementsAlternatives_3_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//// Main code block
		//Mission:
		//    "mission" name=ID "{"
		//        statements += (Statement | Task)+
		//    "}"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"mission" name=ID "{"
		//    statements += (Statement | Task)+
		//"}"
		public Group getGroup() { return cGroup; }
		
		//"mission"
		public Keyword getMissionKeyword_0() { return cMissionKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//statements += (Statement | Task)+
		public Assignment getStatementsAssignment_3() { return cStatementsAssignment_3; }
		
		//(Statement | Task)
		public Alternatives getStatementsAlternatives_3_0() { return cStatementsAlternatives_3_0; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_3_0_0() { return cStatementsStatementParserRuleCall_3_0_0; }
		
		//Task
		public RuleCall getStatementsTaskParserRuleCall_3_0_1() { return cStatementsTaskParserRuleCall_3_0_1; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class TaskElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.farm.Farm.Task");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTaskKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cParmasAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cParmasParamParserRuleCall_3_0_0 = (RuleCall)cParmasAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cParmasAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cParmasParamParserRuleCall_3_1_1_0 = (RuleCall)cParmasAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cColonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cTypeNameAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cTypeNameTypeNameParserRuleCall_6_0 = (RuleCall)cTypeNameAssignment_6.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cStatementsAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cStatementsStatementParserRuleCall_8_0 = (RuleCall)cStatementsAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//// Task code block
		//Task:
		//    "task" name=ID "(" (parmas+=Param ("," parmas+=Param)*)? ")" ":" typeName=TypeName "{"
		//        statements += Statement*
		//    "}"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"task" name=ID "(" (parmas+=Param ("," parmas+=Param)*)? ")" ":" typeName=TypeName "{"
		//    statements += Statement*
		//"}"
		public Group getGroup() { return cGroup; }
		
		//"task"
		public Keyword getTaskKeyword_0() { return cTaskKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//(parmas+=Param ("," parmas+=Param)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//parmas+=Param
		public Assignment getParmasAssignment_3_0() { return cParmasAssignment_3_0; }
		
		//Param
		public RuleCall getParmasParamParserRuleCall_3_0_0() { return cParmasParamParserRuleCall_3_0_0; }
		
		//("," parmas+=Param)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//parmas+=Param
		public Assignment getParmasAssignment_3_1_1() { return cParmasAssignment_3_1_1; }
		
		//Param
		public RuleCall getParmasParamParserRuleCall_3_1_1_0() { return cParmasParamParserRuleCall_3_1_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//":"
		public Keyword getColonKeyword_5() { return cColonKeyword_5; }
		
		//typeName=TypeName
		public Assignment getTypeNameAssignment_6() { return cTypeNameAssignment_6; }
		
		//TypeName
		public RuleCall getTypeNameTypeNameParserRuleCall_6_0() { return cTypeNameTypeNameParserRuleCall_6_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_7() { return cLeftCurlyBracketKeyword_7; }
		
		//statements += Statement*
		public Assignment getStatementsAssignment_8() { return cStatementsAssignment_8; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_8_0() { return cStatementsStatementParserRuleCall_8_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	
	
	private final FarmProgramElements pFarmProgram;
	private final ClassElements pClass;
	private final ParamElements pParam;
	private final TypeNameElements pTypeName;
	private final StatementElements pStatement;
	private final VariableDeclarationElements pVariableDeclaration;
	private final VariableExpressionElements pVariableExpression;
	private final LoopStatementElements pLoopStatement;
	private final RealExpressionElements pRealExpression;
	private final AdditionElements pAddition;
	private final MultiplicationElements pMultiplication;
	private final RealPrimaryElements pRealPrimary;
	private final RealLiteralElements pRealLiteral;
	private final RealVarExpressionElements pRealVarExpression;
	private final REALElements pREAL;
	private final ConditionExpressionElements pConditionExpression;
	private final OrExpressionElements pOrExpression;
	private final AndExpressionElements pAndExpression;
	private final ComparisonExpressionElements pComparisonExpression;
	private final BooleanPrimaryElements pBooleanPrimary;
	private final BooleanLiteralElements pBooleanLiteral;
	private final BooleanVarExpressionElements pBooleanVarExpression;
	private final AttributeDeclarationElements pAttributeDeclaration;
	private final CropElements pCrop;
	private final CropStagesElements pCropStages;
	private final CropStageElements pCropStage;
	private final CropAttributesElements pCropAttributes;
	private final MachineElements pMachine;
	private final IPElements pIP;
	private final FieldElements pField;
	private final MissionElements pMission;
	private final TaskElements pTask;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public FarmGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pFarmProgram = new FarmProgramElements();
		this.pClass = new ClassElements();
		this.pParam = new ParamElements();
		this.pTypeName = new TypeNameElements();
		this.pStatement = new StatementElements();
		this.pVariableDeclaration = new VariableDeclarationElements();
		this.pVariableExpression = new VariableExpressionElements();
		this.pLoopStatement = new LoopStatementElements();
		this.pRealExpression = new RealExpressionElements();
		this.pAddition = new AdditionElements();
		this.pMultiplication = new MultiplicationElements();
		this.pRealPrimary = new RealPrimaryElements();
		this.pRealLiteral = new RealLiteralElements();
		this.pRealVarExpression = new RealVarExpressionElements();
		this.pREAL = new REALElements();
		this.pConditionExpression = new ConditionExpressionElements();
		this.pOrExpression = new OrExpressionElements();
		this.pAndExpression = new AndExpressionElements();
		this.pComparisonExpression = new ComparisonExpressionElements();
		this.pBooleanPrimary = new BooleanPrimaryElements();
		this.pBooleanLiteral = new BooleanLiteralElements();
		this.pBooleanVarExpression = new BooleanVarExpressionElements();
		this.pAttributeDeclaration = new AttributeDeclarationElements();
		this.pCrop = new CropElements();
		this.pCropStages = new CropStagesElements();
		this.pCropStage = new CropStageElements();
		this.pCropAttributes = new CropAttributesElements();
		this.pMachine = new MachineElements();
		this.pIP = new IPElements();
		this.pField = new FieldElements();
		this.pMission = new MissionElements();
		this.pTask = new TaskElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("uk.ac.kcl.farm.Farm".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//FarmProgram:
	//    statements += (Class | AttributeDeclaration)*
	//;
	public FarmProgramElements getFarmProgramAccess() {
		return pFarmProgram;
	}
	
	public ParserRule getFarmProgramRule() {
		return getFarmProgramAccess().getRule();
	}
	
	//// General statement
	//Class:
	//    Crop |
	//    Machine |
	//    Field |
	//    Mission
	//;
	public ClassElements getClassAccess() {
		return pClass;
	}
	
	public ParserRule getClassRule() {
		return getClassAccess().getRule();
	}
	
	//Param:
	//    "crop" param=ID |
	//    "machine" param=ID |
	//    "field" param=ID |
	//    "mission" param=ID |
	//    "real" param=ID |
	//    "string" param=ID
	//;
	public ParamElements getParamAccess() {
		return pParam;
	}
	
	public ParserRule getParamRule() {
		return getParamAccess().getRule();
	}
	
	//TypeName:
	//    "null" | "real" | "boolean" | "string"
	//;
	public TypeNameElements getTypeNameAccess() {
		return pTypeName;
	}
	
	public ParserRule getTypeNameRule() {
		return getTypeNameAccess().getRule();
	}
	
	//Statement:
	//    VariableDeclaration |
	//    LoopStatement
	//;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//VariableDeclaration:
	//    "var" name=ID "=" value=VariableExpression
	//;
	public VariableDeclarationElements getVariableDeclarationAccess() {
		return pVariableDeclaration;
	}
	
	public ParserRule getVariableDeclarationRule() {
		return getVariableDeclarationAccess().getRule();
	}
	
	//VariableExpression:
	//    RealExpression | ConditionExpression
	//;
	public VariableExpressionElements getVariableExpressionAccess() {
		return pVariableExpression;
	}
	
	public ParserRule getVariableExpressionRule() {
		return getVariableExpressionAccess().getRule();
	}
	
	//LoopStatement:
	//    "while" "(" condition=ConditionExpression ")" "{"
	//        statements += Statement+
	//    "}"
	//;
	public LoopStatementElements getLoopStatementAccess() {
		return pLoopStatement;
	}
	
	public ParserRule getLoopStatementRule() {
		return getLoopStatementAccess().getRule();
	}
	
	////ReturnStatement:
	////    "return" "(" value=(VariableExpression | [VariableDeclaration]) ")"
	////;
	//// MoveStatement:
	////     command = MoveCommand "(" steps = Addition ")"
	//// ;
	//// enum MoveCommand:
	////     forward | backward
	//// ;
	//// TurnStatement:
	////     "turn" command = TurnCommand "by" degrees = REAL "degrees"
	//// ;
	//// enum TurnCommand:
	////     left | right
	//// ;
	//RealExpression:
	//    Addition
	//;
	public RealExpressionElements getRealExpressionAccess() {
		return pRealExpression;
	}
	
	public ParserRule getRealExpressionRule() {
		return getRealExpressionAccess().getRule();
	}
	
	//Addition returns RealExpression:
	//    Multiplication ({Addition.left = current} operator+=("+"|"-") right+=Multiplication)*
	//;
	public AdditionElements getAdditionAccess() {
		return pAddition;
	}
	
	public ParserRule getAdditionRule() {
		return getAdditionAccess().getRule();
	}
	
	//Multiplication returns RealExpression:
	//    RealPrimary ({Multiplication.left = current} operator+=("*"|"/") right+=RealPrimary)*
	//;
	public MultiplicationElements getMultiplicationAccess() {
		return pMultiplication;
	}
	
	public ParserRule getMultiplicationRule() {
		return getMultiplicationAccess().getRule();
	}
	
	//RealPrimary returns RealExpression:
	//    RealLiteral |
	//    RealVarExpression |
	//    "(" Addition ")"
	//;
	public RealPrimaryElements getRealPrimaryAccess() {
		return pRealPrimary;
	}
	
	public ParserRule getRealPrimaryRule() {
		return getRealPrimaryAccess().getRule();
	}
	
	//RealLiteral:
	//    val = REAL
	//;
	public RealLiteralElements getRealLiteralAccess() {
		return pRealLiteral;
	}
	
	public ParserRule getRealLiteralRule() {
		return getRealLiteralAccess().getRule();
	}
	
	//RealVarExpression:
	//    var = [VariableDeclaration]
	//;
	public RealVarExpressionElements getRealVarExpressionAccess() {
		return pRealVarExpression;
	}
	
	public ParserRule getRealVarExpressionRule() {
		return getRealVarExpressionAccess().getRule();
	}
	
	//REAL returns ecore::EFloat hidden():
	//    INT? "." INT
	//;
	public REALElements getREALAccess() {
		return pREAL;
	}
	
	public ParserRule getREALRule() {
		return getREALAccess().getRule();
	}
	
	//ConditionExpression:
	//    OrExpression
	//;
	public ConditionExpressionElements getConditionExpressionAccess() {
		return pConditionExpression;
	}
	
	public ParserRule getConditionExpressionRule() {
		return getConditionExpressionAccess().getRule();
	}
	
	//OrExpression returns ConditionExpression:
	//    AndExpression ({OrExpression.left = current} operator+=("||") right+=AndExpression)*
	//;
	public OrExpressionElements getOrExpressionAccess() {
		return pOrExpression;
	}
	
	public ParserRule getOrExpressionRule() {
		return getOrExpressionAccess().getRule();
	}
	
	//AndExpression returns ConditionExpression:
	//    ComparisonExpression ({AndExpression.left = current} operator+=("&&") right+=ComparisonExpression)*
	//;
	public AndExpressionElements getAndExpressionAccess() {
		return pAndExpression;
	}
	
	public ParserRule getAndExpressionRule() {
		return getAndExpressionAccess().getRule();
	}
	
	//ComparisonExpression returns ConditionExpression:
	//    BooleanPrimary ({ComparisonExpression.left=current} operator=("<"|"<="|"=="|">="|">") right=BooleanPrimary)*
	//;
	public ComparisonExpressionElements getComparisonExpressionAccess() {
		return pComparisonExpression;
	}
	
	public ParserRule getComparisonExpressionRule() {
		return getComparisonExpressionAccess().getRule();
	}
	
	//BooleanPrimary returns ConditionExpression:
	//    BooleanLiteral | "[" OrExpression "]"  | BooleanVarExpression
	//;
	public BooleanPrimaryElements getBooleanPrimaryAccess() {
		return pBooleanPrimary;
	}
	
	public ParserRule getBooleanPrimaryRule() {
		return getBooleanPrimaryAccess().getRule();
	}
	
	//BooleanLiteral:
	//    val="true" | "false"
	//;
	public BooleanLiteralElements getBooleanLiteralAccess() {
		return pBooleanLiteral;
	}
	
	public ParserRule getBooleanLiteralRule() {
		return getBooleanLiteralAccess().getRule();
	}
	
	//BooleanVarExpression:
	//     var = [VariableDeclaration]
	//;
	public BooleanVarExpressionElements getBooleanVarExpressionAccess() {
		return pBooleanVarExpression;
	}
	
	public ParserRule getBooleanVarExpressionRule() {
		return getBooleanVarExpressionAccess().getRule();
	}
	
	//// Define codes
	//AttributeDeclaration:
	//    "define" name=ID
	//;
	public AttributeDeclarationElements getAttributeDeclarationAccess() {
		return pAttributeDeclaration;
	}
	
	public ParserRule getAttributeDeclarationRule() {
		return getAttributeDeclarationAccess().getRule();
	}
	
	//// Crop code block
	//Crop:
	//    "crop" crop=ID "{"
	//        "name" ":" cropName=STRING
	//        "stage" ":" "["
	//            statements += CropStages
	//        "]"
	//    "}"
	//;
	public CropElements getCropAccess() {
		return pCrop;
	}
	
	public ParserRule getCropRule() {
		return getCropAccess().getRule();
	}
	
	//CropStages:
	//    elements += CropStage ("," elements += CropStage)*
	//;
	public CropStagesElements getCropStagesAccess() {
		return pCropStages;
	}
	
	public ParserRule getCropStagesRule() {
		return getCropStagesAccess().getRule();
	}
	
	//CropStage:
	//    "{"
	//        "name" ":" name=STRING
	//        "timeConsumed" ":" timeConsumend=RealExpression
	//        elements += CropAttributes*
	//    "}"
	//;
	public CropStageElements getCropStageAccess() {
		return pCropStage;
	}
	
	public ParserRule getCropStageRule() {
		return getCropStageAccess().getRule();
	}
	
	//CropAttributes:
	//    type=[AttributeDeclaration] ":" value=RealExpression
	//;
	public CropAttributesElements getCropAttributesAccess() {
		return pCropAttributes;
	}
	
	public ParserRule getCropAttributesRule() {
		return getCropAttributesAccess().getRule();
	}
	
	//// Machine code block
	//Machine:
	//    "machine" name=ID "{"
	//        "name" ":" machineName=STRING
	//        "ip" ":" ip=IP
	//        statements += Task+
	//    "}"
	//;
	public MachineElements getMachineAccess() {
		return pMachine;
	}
	
	public ParserRule getMachineRule() {
		return getMachineAccess().getRule();
	}
	
	//IP:
	//    (INT '.' (INT '.' (INT '.' (INT))))
	//;
	public IPElements getIPAccess() {
		return pIP;
	}
	
	public ParserRule getIPRule() {
		return getIPAccess().getRule();
	}
	
	//// Field code block
	//Field:
	//    "field" name=ID "{"
	//        "field"
	//    "}"
	//;
	public FieldElements getFieldAccess() {
		return pField;
	}
	
	public ParserRule getFieldRule() {
		return getFieldAccess().getRule();
	}
	
	//// Main code block
	//Mission:
	//    "mission" name=ID "{"
	//        statements += (Statement | Task)+
	//    "}"
	//;
	public MissionElements getMissionAccess() {
		return pMission;
	}
	
	public ParserRule getMissionRule() {
		return getMissionAccess().getRule();
	}
	
	//// Task code block
	//Task:
	//    "task" name=ID "(" (parmas+=Param ("," parmas+=Param)*)? ")" ":" typeName=TypeName "{"
	//        statements += Statement*
	//    "}"
	//;
	public TaskElements getTaskAccess() {
		return pTask;
	}
	
	public ParserRule getTaskRule() {
		return getTaskAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
