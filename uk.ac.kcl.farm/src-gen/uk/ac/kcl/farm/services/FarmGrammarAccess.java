/*
 * generated by Xtext 2.26.0
 */
package uk.ac.kcl.farm.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class FarmGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class FarmProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.farm.Farm.FarmProgram");
		private final Assignment cStatementsAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cStatementsAlternatives_0 = (Alternatives)cStatementsAssignment.eContents().get(0);
		private final RuleCall cStatementsClassParserRuleCall_0_0 = (RuleCall)cStatementsAlternatives_0.eContents().get(0);
		private final RuleCall cStatementsAttributeParserRuleCall_0_1 = (RuleCall)cStatementsAlternatives_0.eContents().get(1);
		
		//FarmProgram:
		//    statements += (Class | Attribute)+
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//statements += (Class | Attribute)+
		public Assignment getStatementsAssignment() { return cStatementsAssignment; }
		
		//(Class | Attribute)
		public Alternatives getStatementsAlternatives_0() { return cStatementsAlternatives_0; }
		
		//Class
		public RuleCall getStatementsClassParserRuleCall_0_0() { return cStatementsClassParserRuleCall_0_0; }
		
		//Attribute
		public RuleCall getStatementsAttributeParserRuleCall_0_1() { return cStatementsAttributeParserRuleCall_0_1; }
	}
	public class ClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.farm.Farm.Class");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCropParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFieldParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cMissionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//// General statement
		//Class:
		//    Crop |
		//    Field |
		//    Mission
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Crop |
		//Field |
		//Mission
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Crop
		public RuleCall getCropParserRuleCall_0() { return cCropParserRuleCall_0; }
		
		//Field
		public RuleCall getFieldParserRuleCall_1() { return cFieldParserRuleCall_1; }
		
		//Mission
		public RuleCall getMissionParserRuleCall_2() { return cMissionParserRuleCall_2; }
	}
	public class ParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.farm.Farm.Param");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cCropKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cParamAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cParamIDTerminalRuleCall_0_1_0 = (RuleCall)cParamAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cFieldKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cParamAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cParamIDTerminalRuleCall_1_1_0 = (RuleCall)cParamAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cMissionKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cParamAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cParamIDTerminalRuleCall_2_1_0 = (RuleCall)cParamAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cRealKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cParamAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cParamIDTerminalRuleCall_3_1_0 = (RuleCall)cParamAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Keyword cStringKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cParamAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cParamIDTerminalRuleCall_4_1_0 = (RuleCall)cParamAssignment_4_1.eContents().get(0);
		
		//Param:
		//    "crop" param=ID |
		//    "field" param=ID |
		//    "mission" param=ID |
		//    "real" param=ID |
		//    "string" param=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"crop" param=ID |
		//"field" param=ID |
		//"mission" param=ID |
		//"real" param=ID |
		//"string" param=ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"crop" param=ID
		public Group getGroup_0() { return cGroup_0; }
		
		//"crop"
		public Keyword getCropKeyword_0_0() { return cCropKeyword_0_0; }
		
		//param=ID
		public Assignment getParamAssignment_0_1() { return cParamAssignment_0_1; }
		
		//ID
		public RuleCall getParamIDTerminalRuleCall_0_1_0() { return cParamIDTerminalRuleCall_0_1_0; }
		
		//"field" param=ID
		public Group getGroup_1() { return cGroup_1; }
		
		//"field"
		public Keyword getFieldKeyword_1_0() { return cFieldKeyword_1_0; }
		
		//param=ID
		public Assignment getParamAssignment_1_1() { return cParamAssignment_1_1; }
		
		//ID
		public RuleCall getParamIDTerminalRuleCall_1_1_0() { return cParamIDTerminalRuleCall_1_1_0; }
		
		//"mission" param=ID
		public Group getGroup_2() { return cGroup_2; }
		
		//"mission"
		public Keyword getMissionKeyword_2_0() { return cMissionKeyword_2_0; }
		
		//param=ID
		public Assignment getParamAssignment_2_1() { return cParamAssignment_2_1; }
		
		//ID
		public RuleCall getParamIDTerminalRuleCall_2_1_0() { return cParamIDTerminalRuleCall_2_1_0; }
		
		//"real" param=ID
		public Group getGroup_3() { return cGroup_3; }
		
		//"real"
		public Keyword getRealKeyword_3_0() { return cRealKeyword_3_0; }
		
		//param=ID
		public Assignment getParamAssignment_3_1() { return cParamAssignment_3_1; }
		
		//ID
		public RuleCall getParamIDTerminalRuleCall_3_1_0() { return cParamIDTerminalRuleCall_3_1_0; }
		
		//"string" param=ID
		public Group getGroup_4() { return cGroup_4; }
		
		//"string"
		public Keyword getStringKeyword_4_0() { return cStringKeyword_4_0; }
		
		//param=ID
		public Assignment getParamAssignment_4_1() { return cParamAssignment_4_1; }
		
		//ID
		public RuleCall getParamIDTerminalRuleCall_4_1_0() { return cParamIDTerminalRuleCall_4_1_0; }
	}
	public class TypeNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.farm.Farm.TypeName");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cNullKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cRealKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cBooleanKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cStringKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//TypeName:
		//    "null" | "real" | "boolean" | "string"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"null" | "real" | "boolean" | "string"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"null"
		public Keyword getNullKeyword_0() { return cNullKeyword_0; }
		
		//"real"
		public Keyword getRealKeyword_1() { return cRealKeyword_1; }
		
		//"boolean"
		public Keyword getBooleanKeyword_2() { return cBooleanKeyword_2; }
		
		//"string"
		public Keyword getStringKeyword_3() { return cStringKeyword_3; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.farm.Farm.Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVariableParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLoopStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cJudgeStatementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cBuiltinFunctionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Statement:
		//    Variable |
		//    LoopStatement |
		//    JudgeStatement |
		//    BuiltinFunction
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Variable |
		//LoopStatement |
		//JudgeStatement |
		//BuiltinFunction
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Variable
		public RuleCall getVariableParserRuleCall_0() { return cVariableParserRuleCall_0; }
		
		//LoopStatement
		public RuleCall getLoopStatementParserRuleCall_1() { return cLoopStatementParserRuleCall_1; }
		
		//JudgeStatement
		public RuleCall getJudgeStatementParserRuleCall_2() { return cJudgeStatementParserRuleCall_2; }
		
		//BuiltinFunction
		public RuleCall getBuiltinFunctionParserRuleCall_3() { return cBuiltinFunctionParserRuleCall_3; }
	}
	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.farm.Farm.Variable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueExpressionParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//Variable:
		//    "var" name=ID "=" value=Expression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"var" name=ID "=" value=Expression
		public Group getGroup() { return cGroup; }
		
		//"var"
		public Keyword getVarKeyword_0() { return cVarKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//value=Expression
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//Expression
		public RuleCall getValueExpressionParserRuleCall_3_0() { return cValueExpressionParserRuleCall_3_0; }
	}
	public class LoopStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.farm.Farm.LoopStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConditionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionExpressionParserRuleCall_2_0 = (RuleCall)cConditionAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cStatementsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cStatementsStatementParserRuleCall_5_0 = (RuleCall)cStatementsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//LoopStatement:
		//    "while" "(" condition=Expression ")" "{"
		//        statements += Statement*
		//    "}"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"while" "(" condition=Expression ")" "{"
		//    statements += Statement*
		//"}"
		public Group getGroup() { return cGroup; }
		
		//"while"
		public Keyword getWhileKeyword_0() { return cWhileKeyword_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//condition=Expression
		public Assignment getConditionAssignment_2() { return cConditionAssignment_2; }
		
		//Expression
		public RuleCall getConditionExpressionParserRuleCall_2_0() { return cConditionExpressionParserRuleCall_2_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//statements += Statement*
		public Assignment getStatementsAssignment_5() { return cStatementsAssignment_5; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_5_0() { return cStatementsStatementParserRuleCall_5_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class JudgeStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.farm.Farm.JudgeStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConditionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionExpressionParserRuleCall_2_0 = (RuleCall)cConditionAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cStatementsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cStatementsStatementParserRuleCall_5_0 = (RuleCall)cStatementsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cElseifAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cElseifElseJudgeStatementParserRuleCall_7_0 = (RuleCall)cElseifAssignment_7.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cElseKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Assignment cElseStatementAssignment_8_2 = (Assignment)cGroup_8.eContents().get(2);
		private final RuleCall cElseStatementStatementParserRuleCall_8_2_0 = (RuleCall)cElseStatementAssignment_8_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8_3 = (Keyword)cGroup_8.eContents().get(3);
		
		//JudgeStatement:
		//    "if" "(" condition=Expression ")" "{"
		//        statements += Statement*
		//    "}" elseif += ElseJudgeStatement*
		//    ("else" "{" elseStatement += Statement* "}")?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"if" "(" condition=Expression ")" "{"
		//    statements += Statement*
		//"}" elseif += ElseJudgeStatement*
		//("else" "{" elseStatement += Statement* "}")?
		public Group getGroup() { return cGroup; }
		
		//"if"
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//condition=Expression
		public Assignment getConditionAssignment_2() { return cConditionAssignment_2; }
		
		//Expression
		public RuleCall getConditionExpressionParserRuleCall_2_0() { return cConditionExpressionParserRuleCall_2_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//statements += Statement*
		public Assignment getStatementsAssignment_5() { return cStatementsAssignment_5; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_5_0() { return cStatementsStatementParserRuleCall_5_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
		
		//elseif += ElseJudgeStatement*
		public Assignment getElseifAssignment_7() { return cElseifAssignment_7; }
		
		//ElseJudgeStatement
		public RuleCall getElseifElseJudgeStatementParserRuleCall_7_0() { return cElseifElseJudgeStatementParserRuleCall_7_0; }
		
		//("else" "{" elseStatement += Statement* "}")?
		public Group getGroup_8() { return cGroup_8; }
		
		//"else"
		public Keyword getElseKeyword_8_0() { return cElseKeyword_8_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_8_1() { return cLeftCurlyBracketKeyword_8_1; }
		
		//elseStatement += Statement*
		public Assignment getElseStatementAssignment_8_2() { return cElseStatementAssignment_8_2; }
		
		//Statement
		public RuleCall getElseStatementStatementParserRuleCall_8_2_0() { return cElseStatementStatementParserRuleCall_8_2_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_8_3() { return cRightCurlyBracketKeyword_8_3; }
	}
	public class ElseJudgeStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.farm.Farm.ElseJudgeStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cElseifKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConditionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionExpressionParserRuleCall_2_0 = (RuleCall)cConditionAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cStatementsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cStatementsStatementParserRuleCall_5_0 = (RuleCall)cStatementsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//ElseJudgeStatement:
		//    "elseif" "(" condition=Expression ")" "{"
		//        statements += Statement*
		//    "}"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"elseif" "(" condition=Expression ")" "{"
		//    statements += Statement*
		//"}"
		public Group getGroup() { return cGroup; }
		
		//"elseif"
		public Keyword getElseifKeyword_0() { return cElseifKeyword_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//condition=Expression
		public Assignment getConditionAssignment_2() { return cConditionAssignment_2; }
		
		//Expression
		public RuleCall getConditionExpressionParserRuleCall_2_0() { return cConditionExpressionParserRuleCall_2_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//statements += Statement*
		public Assignment getStatementsAssignment_5() { return cStatementsAssignment_5; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_5_0() { return cStatementsStatementParserRuleCall_5_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class BuiltinFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.farm.Farm.BuiltinFunction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cReportFunctionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cGetStageFunctionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCountStageFunctionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cGetValueFunctionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cSetFieldValueFunctionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cPlantFunctionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cMoveFunctionParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cWaitFunctionParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		
		//BuiltinFunction:
		//    ReportFunction |
		//    GetStageFunction |
		//    CountStageFunction |
		//    GetValueFunction |
		//    SetFieldValueFunction |
		//    PlantFunction |
		//    MoveFunction |
		//    WaitFunction
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ReportFunction |
		//GetStageFunction |
		//CountStageFunction |
		//GetValueFunction |
		//SetFieldValueFunction |
		//PlantFunction |
		//MoveFunction |
		//WaitFunction
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ReportFunction
		public RuleCall getReportFunctionParserRuleCall_0() { return cReportFunctionParserRuleCall_0; }
		
		//GetStageFunction
		public RuleCall getGetStageFunctionParserRuleCall_1() { return cGetStageFunctionParserRuleCall_1; }
		
		//CountStageFunction
		public RuleCall getCountStageFunctionParserRuleCall_2() { return cCountStageFunctionParserRuleCall_2; }
		
		//GetValueFunction
		public RuleCall getGetValueFunctionParserRuleCall_3() { return cGetValueFunctionParserRuleCall_3; }
		
		//SetFieldValueFunction
		public RuleCall getSetFieldValueFunctionParserRuleCall_4() { return cSetFieldValueFunctionParserRuleCall_4; }
		
		//PlantFunction
		public RuleCall getPlantFunctionParserRuleCall_5() { return cPlantFunctionParserRuleCall_5; }
		
		//MoveFunction
		public RuleCall getMoveFunctionParserRuleCall_6() { return cMoveFunctionParserRuleCall_6; }
		
		//WaitFunction
		public RuleCall getWaitFunctionParserRuleCall_7() { return cWaitFunctionParserRuleCall_7; }
	}
	public class EntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.farm.Farm.Entity");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCropParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFieldParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cVariableParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Entity:
		//    Crop | Field | Variable
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Crop | Field | Variable
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Crop
		public RuleCall getCropParserRuleCall_0() { return cCropParserRuleCall_0; }
		
		//Field
		public RuleCall getFieldParserRuleCall_1() { return cFieldParserRuleCall_1; }
		
		//Variable
		public RuleCall getVariableParserRuleCall_2() { return cVariableParserRuleCall_2; }
	}
	public class ReportFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.farm.Farm.ReportFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEntityAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cEntityEntityCrossReference_0_0 = (CrossReference)cEntityAssignment_0.eContents().get(0);
		private final RuleCall cEntityEntityIDTerminalRuleCall_0_0_1 = (RuleCall)cEntityEntityCrossReference_0_0.eContents().get(1);
		private final Keyword cReportKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ReportFunction hidden():
		//    entity=[Entity]  ".report(" ")"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//entity=[Entity]  ".report(" ")"
		public Group getGroup() { return cGroup; }
		
		//entity=[Entity]
		public Assignment getEntityAssignment_0() { return cEntityAssignment_0; }
		
		//[Entity]
		public CrossReference getEntityEntityCrossReference_0_0() { return cEntityEntityCrossReference_0_0; }
		
		//ID
		public RuleCall getEntityEntityIDTerminalRuleCall_0_0_1() { return cEntityEntityIDTerminalRuleCall_0_0_1; }
		
		//".report("
		public Keyword getReportKeyword_1() { return cReportKeyword_1; }
		
		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class GetStageFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.farm.Farm.GetStageFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cGetStageCropAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cGetStageCropCropCrossReference_0_0 = (CrossReference)cGetStageCropAssignment_0.eContents().get(0);
		private final RuleCall cGetStageCropCropIDTerminalRuleCall_0_0_1 = (RuleCall)cGetStageCropCropCrossReference_0_0.eContents().get(1);
		private final Keyword cGetStageKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStageNumberAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStageNumberINTTerminalRuleCall_2_0 = (RuleCall)cStageNumberAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//GetStageFunction hidden():
		//    getStageCrop=[Crop | ID] ".getStage(" stageNumber=INT ")"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//getStageCrop=[Crop | ID] ".getStage(" stageNumber=INT ")"
		public Group getGroup() { return cGroup; }
		
		//getStageCrop=[Crop | ID]
		public Assignment getGetStageCropAssignment_0() { return cGetStageCropAssignment_0; }
		
		//[Crop | ID]
		public CrossReference getGetStageCropCropCrossReference_0_0() { return cGetStageCropCropCrossReference_0_0; }
		
		//ID
		public RuleCall getGetStageCropCropIDTerminalRuleCall_0_0_1() { return cGetStageCropCropIDTerminalRuleCall_0_0_1; }
		
		//".getStage("
		public Keyword getGetStageKeyword_1() { return cGetStageKeyword_1; }
		
		//stageNumber=INT
		public Assignment getStageNumberAssignment_2() { return cStageNumberAssignment_2; }
		
		//INT
		public RuleCall getStageNumberINTTerminalRuleCall_2_0() { return cStageNumberINTTerminalRuleCall_2_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class CountStageFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.farm.Farm.CountStageFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCountStageCropAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cCountStageCropCropCrossReference_0_0 = (CrossReference)cCountStageCropAssignment_0.eContents().get(0);
		private final RuleCall cCountStageCropCropIDTerminalRuleCall_0_0_1 = (RuleCall)cCountStageCropCropCrossReference_0_0.eContents().get(1);
		private final Keyword cCountStageKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//CountStageFunction hidden():
		//    countStageCrop=[Crop | ID] ".countStage(" ")"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//countStageCrop=[Crop | ID] ".countStage(" ")"
		public Group getGroup() { return cGroup; }
		
		//countStageCrop=[Crop | ID]
		public Assignment getCountStageCropAssignment_0() { return cCountStageCropAssignment_0; }
		
		//[Crop | ID]
		public CrossReference getCountStageCropCropCrossReference_0_0() { return cCountStageCropCropCrossReference_0_0; }
		
		//ID
		public RuleCall getCountStageCropCropIDTerminalRuleCall_0_0_1() { return cCountStageCropCropIDTerminalRuleCall_0_0_1; }
		
		//".countStage("
		public Keyword getCountStageKeyword_1() { return cCountStageKeyword_1; }
		
		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class GetValueFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.farm.Farm.GetValueFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEntityAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cEntityEntityCrossReference_0_0 = (CrossReference)cEntityAssignment_0.eContents().get(0);
		private final RuleCall cEntityEntityIDTerminalRuleCall_0_0_1 = (RuleCall)cEntityEntityCrossReference_0_0.eContents().get(1);
		private final Keyword cGetValueKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAttributeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAttributeSTRINGTerminalRuleCall_2_0 = (RuleCall)cAttributeAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//GetValueFunction hidden():
		//    entity=[Entity] ".getValue(" attribute=STRING ")"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//entity=[Entity] ".getValue(" attribute=STRING ")"
		public Group getGroup() { return cGroup; }
		
		//entity=[Entity]
		public Assignment getEntityAssignment_0() { return cEntityAssignment_0; }
		
		//[Entity]
		public CrossReference getEntityEntityCrossReference_0_0() { return cEntityEntityCrossReference_0_0; }
		
		//ID
		public RuleCall getEntityEntityIDTerminalRuleCall_0_0_1() { return cEntityEntityIDTerminalRuleCall_0_0_1; }
		
		//".getValue("
		public Keyword getGetValueKeyword_1() { return cGetValueKeyword_1; }
		
		//attribute=STRING
		public Assignment getAttributeAssignment_2() { return cAttributeAssignment_2; }
		
		//STRING
		public RuleCall getAttributeSTRINGTerminalRuleCall_2_0() { return cAttributeSTRINGTerminalRuleCall_2_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class SetFieldValueFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.farm.Farm.SetFieldValueFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSetValueFieldAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cSetValueFieldFieldCrossReference_0_0 = (CrossReference)cSetValueFieldAssignment_0.eContents().get(0);
		private final RuleCall cSetValueFieldFieldIDTerminalRuleCall_0_0_1 = (RuleCall)cSetValueFieldFieldCrossReference_0_0.eContents().get(1);
		private final Keyword cSetFieldValueKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSetFieldAttributeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSetFieldAttributeSTRINGTerminalRuleCall_2_0 = (RuleCall)cSetFieldAttributeAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSetFieldValueAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSetFieldValueAdditionExpressionParserRuleCall_4_0 = (RuleCall)cSetFieldValueAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//SetFieldValueFunction hidden():
		//    setValueField=[Field | ID] ".setFieldValue(" setFieldAttribute=STRING "," setFieldValue=AdditionExpression ")"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//setValueField=[Field | ID] ".setFieldValue(" setFieldAttribute=STRING "," setFieldValue=AdditionExpression ")"
		public Group getGroup() { return cGroup; }
		
		//setValueField=[Field | ID]
		public Assignment getSetValueFieldAssignment_0() { return cSetValueFieldAssignment_0; }
		
		//[Field | ID]
		public CrossReference getSetValueFieldFieldCrossReference_0_0() { return cSetValueFieldFieldCrossReference_0_0; }
		
		//ID
		public RuleCall getSetValueFieldFieldIDTerminalRuleCall_0_0_1() { return cSetValueFieldFieldIDTerminalRuleCall_0_0_1; }
		
		//".setFieldValue("
		public Keyword getSetFieldValueKeyword_1() { return cSetFieldValueKeyword_1; }
		
		//setFieldAttribute=STRING
		public Assignment getSetFieldAttributeAssignment_2() { return cSetFieldAttributeAssignment_2; }
		
		//STRING
		public RuleCall getSetFieldAttributeSTRINGTerminalRuleCall_2_0() { return cSetFieldAttributeSTRINGTerminalRuleCall_2_0; }
		
		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//setFieldValue=AdditionExpression
		public Assignment getSetFieldValueAssignment_4() { return cSetFieldValueAssignment_4; }
		
		//AdditionExpression
		public RuleCall getSetFieldValueAdditionExpressionParserRuleCall_4_0() { return cSetFieldValueAdditionExpressionParserRuleCall_4_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class PlantFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.farm.Farm.PlantFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPlantInFieldAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cPlantInFieldFieldCrossReference_0_0 = (CrossReference)cPlantInFieldAssignment_0.eContents().get(0);
		private final RuleCall cPlantInFieldFieldIDTerminalRuleCall_0_0_1 = (RuleCall)cPlantInFieldFieldCrossReference_0_0.eContents().get(1);
		private final Keyword cPlantKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPlantCropAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cPlantCropCropCrossReference_2_0 = (CrossReference)cPlantCropAssignment_2.eContents().get(0);
		private final RuleCall cPlantCropCropIDTerminalRuleCall_2_0_1 = (RuleCall)cPlantCropCropCrossReference_2_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//PlantFunction hidden():
		//    plantInField=[Field | ID] ".plant(" plantCrop=[Crop | ID] ")"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//plantInField=[Field | ID] ".plant(" plantCrop=[Crop | ID] ")"
		public Group getGroup() { return cGroup; }
		
		//plantInField=[Field | ID]
		public Assignment getPlantInFieldAssignment_0() { return cPlantInFieldAssignment_0; }
		
		//[Field | ID]
		public CrossReference getPlantInFieldFieldCrossReference_0_0() { return cPlantInFieldFieldCrossReference_0_0; }
		
		//ID
		public RuleCall getPlantInFieldFieldIDTerminalRuleCall_0_0_1() { return cPlantInFieldFieldIDTerminalRuleCall_0_0_1; }
		
		//".plant("
		public Keyword getPlantKeyword_1() { return cPlantKeyword_1; }
		
		//plantCrop=[Crop | ID]
		public Assignment getPlantCropAssignment_2() { return cPlantCropAssignment_2; }
		
		//[Crop | ID]
		public CrossReference getPlantCropCropCrossReference_2_0() { return cPlantCropCropCrossReference_2_0; }
		
		//ID
		public RuleCall getPlantCropCropIDTerminalRuleCall_2_0_1() { return cPlantCropCropIDTerminalRuleCall_2_0_1; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class MoveFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.farm.Farm.MoveFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMoveKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMoveFromFieldAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cMoveFromFieldFieldCrossReference_1_0 = (CrossReference)cMoveFromFieldAssignment_1.eContents().get(0);
		private final RuleCall cMoveFromFieldFieldIDTerminalRuleCall_1_0_1 = (RuleCall)cMoveFromFieldFieldCrossReference_1_0.eContents().get(1);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMoveToFieldAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cMoveToFieldFieldCrossReference_3_0 = (CrossReference)cMoveToFieldAssignment_3.eContents().get(0);
		private final RuleCall cMoveToFieldFieldIDTerminalRuleCall_3_0_1 = (RuleCall)cMoveToFieldFieldCrossReference_3_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//MoveFunction hidden():
		//    "move(" moveFromField=[Field | ID] ","  moveToField=[Field | ID] ")"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"move(" moveFromField=[Field | ID] ","  moveToField=[Field | ID] ")"
		public Group getGroup() { return cGroup; }
		
		//"move("
		public Keyword getMoveKeyword_0() { return cMoveKeyword_0; }
		
		//moveFromField=[Field | ID]
		public Assignment getMoveFromFieldAssignment_1() { return cMoveFromFieldAssignment_1; }
		
		//[Field | ID]
		public CrossReference getMoveFromFieldFieldCrossReference_1_0() { return cMoveFromFieldFieldCrossReference_1_0; }
		
		//ID
		public RuleCall getMoveFromFieldFieldIDTerminalRuleCall_1_0_1() { return cMoveFromFieldFieldIDTerminalRuleCall_1_0_1; }
		
		//","
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
		
		//moveToField=[Field | ID]
		public Assignment getMoveToFieldAssignment_3() { return cMoveToFieldAssignment_3; }
		
		//[Field | ID]
		public CrossReference getMoveToFieldFieldCrossReference_3_0() { return cMoveToFieldFieldCrossReference_3_0; }
		
		//ID
		public RuleCall getMoveToFieldFieldIDTerminalRuleCall_3_0_1() { return cMoveToFieldFieldIDTerminalRuleCall_3_0_1; }
		
		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class WaitFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.farm.Farm.WaitFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWaitKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueAdditionExpressionParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//WaitFunction hidden():
		//    "wait(" value=AdditionExpression ")"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"wait(" value=AdditionExpression ")"
		public Group getGroup() { return cGroup; }
		
		//"wait("
		public Keyword getWaitKeyword_0() { return cWaitKeyword_0; }
		
		//value=AdditionExpression
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//AdditionExpression
		public RuleCall getValueAdditionExpressionParserRuleCall_1_0() { return cValueAdditionExpressionParserRuleCall_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.farm.Farm.Expression");
		private final RuleCall cConditionOrExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//// MoveStatement:
		////     command=MoveCommand "(" steps=Addition ")"
		//// ;
		//// enum MoveCommand:
		////     forward | backward
		//// ;
		//// TurnStatement:
		////     "turn" command=TurnCommand "by" degrees=REAL "degrees"
		//// ;
		//// enum TurnCommand:
		////     left | right
		//// ;
		////Expressions
		//Expression:
		//    ConditionOrExpression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ConditionOrExpression
		public RuleCall getConditionOrExpressionParserRuleCall() { return cConditionOrExpressionParserRuleCall; }
	}
	public class ConditionOrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.farm.Farm.ConditionOrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cConditionAndExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cConditionOrExpressionLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Keyword cVerticalLineVerticalLineKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cRightConditionAndExpressionParserRuleCall_1_0_2_0 = (RuleCall)cRightAssignment_1_0_2.eContents().get(0);
		
		//ConditionOrExpression returns Expression:
		//    ConditionAndExpression => (
		//        {ConditionOrExpression.left=current} "||" right=ConditionAndExpression
		//    )*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ConditionAndExpression => (
		//    {ConditionOrExpression.left=current} "||" right=ConditionAndExpression
		//)*
		public Group getGroup() { return cGroup; }
		
		//ConditionAndExpression
		public RuleCall getConditionAndExpressionParserRuleCall_0() { return cConditionAndExpressionParserRuleCall_0; }
		
		//=> (
		//       {ConditionOrExpression.left=current} "||" right=ConditionAndExpression
		//   )*
		public Group getGroup_1() { return cGroup_1; }
		
		//{ConditionOrExpression.left=current} "||" right=ConditionAndExpression
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{ConditionOrExpression.left=current}
		public Action getConditionOrExpressionLeftAction_1_0_0() { return cConditionOrExpressionLeftAction_1_0_0; }
		
		//"||"
		public Keyword getVerticalLineVerticalLineKeyword_1_0_1() { return cVerticalLineVerticalLineKeyword_1_0_1; }
		
		//right=ConditionAndExpression
		public Assignment getRightAssignment_1_0_2() { return cRightAssignment_1_0_2; }
		
		//ConditionAndExpression
		public RuleCall getRightConditionAndExpressionParserRuleCall_1_0_2_0() { return cRightConditionAndExpressionParserRuleCall_1_0_2_0; }
	}
	public class ConditionAndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.farm.Farm.ConditionAndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cRelationOrExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cConditionAndExpressionLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Keyword cAmpersandAmpersandKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cRightRelationOrExpressionParserRuleCall_1_0_2_0 = (RuleCall)cRightAssignment_1_0_2.eContents().get(0);
		
		//ConditionAndExpression returns Expression:
		//    RelationOrExpression => (
		//        {ConditionAndExpression.left=current} "&&" right=RelationOrExpression
		//    )*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//RelationOrExpression => (
		//    {ConditionAndExpression.left=current} "&&" right=RelationOrExpression
		//)*
		public Group getGroup() { return cGroup; }
		
		//RelationOrExpression
		public RuleCall getRelationOrExpressionParserRuleCall_0() { return cRelationOrExpressionParserRuleCall_0; }
		
		//=> (
		//       {ConditionAndExpression.left=current} "&&" right=RelationOrExpression
		//   )*
		public Group getGroup_1() { return cGroup_1; }
		
		//{ConditionAndExpression.left=current} "&&" right=RelationOrExpression
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{ConditionAndExpression.left=current}
		public Action getConditionAndExpressionLeftAction_1_0_0() { return cConditionAndExpressionLeftAction_1_0_0; }
		
		//"&&"
		public Keyword getAmpersandAmpersandKeyword_1_0_1() { return cAmpersandAmpersandKeyword_1_0_1; }
		
		//right=RelationOrExpression
		public Assignment getRightAssignment_1_0_2() { return cRightAssignment_1_0_2; }
		
		//RelationOrExpression
		public RuleCall getRightRelationOrExpressionParserRuleCall_1_0_2_0() { return cRightRelationOrExpressionParserRuleCall_1_0_2_0; }
	}
	public class RelationOrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.farm.Farm.RelationOrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAdditionExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_0_0 = (Alternatives)cGroup_1_0.eContents().get(0);
		private final Group cGroup_1_0_0_0 = (Group)cAlternatives_1_0_0.eContents().get(0);
		private final Action cLessThanOrEqualLeftAction_1_0_0_0_0 = (Action)cGroup_1_0_0_0.eContents().get(0);
		private final Keyword cLessThanSignEqualsSignKeyword_1_0_0_0_1 = (Keyword)cGroup_1_0_0_0.eContents().get(1);
		private final Group cGroup_1_0_0_1 = (Group)cAlternatives_1_0_0.eContents().get(1);
		private final Action cLessThanLeftAction_1_0_0_1_0 = (Action)cGroup_1_0_0_1.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1_0_0_1_1 = (Keyword)cGroup_1_0_0_1.eContents().get(1);
		private final Group cGroup_1_0_0_2 = (Group)cAlternatives_1_0_0.eContents().get(2);
		private final Action cGreaterThanOrEqualLeftAction_1_0_0_2_0 = (Action)cGroup_1_0_0_2.eContents().get(0);
		private final Keyword cGreaterThanSignEqualsSignKeyword_1_0_0_2_1 = (Keyword)cGroup_1_0_0_2.eContents().get(1);
		private final Group cGroup_1_0_0_3 = (Group)cAlternatives_1_0_0.eContents().get(3);
		private final Action cGreaterThanLeftAction_1_0_0_3_0 = (Action)cGroup_1_0_0_3.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1_0_0_3_1 = (Keyword)cGroup_1_0_0_3.eContents().get(1);
		private final Group cGroup_1_0_0_4 = (Group)cAlternatives_1_0_0.eContents().get(4);
		private final Action cEqualLeftAction_1_0_0_4_0 = (Action)cGroup_1_0_0_4.eContents().get(0);
		private final Keyword cEqualsSignEqualsSignKeyword_1_0_0_4_1 = (Keyword)cGroup_1_0_0_4.eContents().get(1);
		private final Group cGroup_1_0_0_5 = (Group)cAlternatives_1_0_0.eContents().get(5);
		private final Action cNotEqualLeftAction_1_0_0_5_0 = (Action)cGroup_1_0_0_5.eContents().get(0);
		private final Keyword cExclamationMarkEqualsSignKeyword_1_0_0_5_1 = (Keyword)cGroup_1_0_0_5.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightAdditionExpressionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//RelationOrExpression returns Expression:
		//    AdditionExpression ( => (
		//        {LessThanOrEqual.left=current} "<=" |
		//        {LessThan.left=current} "<" |
		//        {GreaterThanOrEqual.left=current} ">=" |
		//        {GreaterThan.left=current} ">" |
		//        {Equal.left=current} "==" |
		//        {NotEqual.left=current} "!="
		//    ) right=AdditionExpression )*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//AdditionExpression ( => (
		//    {LessThanOrEqual.left=current} "<=" |
		//    {LessThan.left=current} "<" |
		//    {GreaterThanOrEqual.left=current} ">=" |
		//    {GreaterThan.left=current} ">" |
		//    {Equal.left=current} "==" |
		//    {NotEqual.left=current} "!="
		//) right=AdditionExpression )*
		public Group getGroup() { return cGroup; }
		
		//AdditionExpression
		public RuleCall getAdditionExpressionParserRuleCall_0() { return cAdditionExpressionParserRuleCall_0; }
		
		//( => (
		//       {LessThanOrEqual.left=current} "<=" |
		//       {LessThan.left=current} "<" |
		//       {GreaterThanOrEqual.left=current} ">=" |
		//       {GreaterThan.left=current} ">" |
		//       {Equal.left=current} "==" |
		//       {NotEqual.left=current} "!="
		//   ) right=AdditionExpression )*
		public Group getGroup_1() { return cGroup_1; }
		
		//=> (
		//       {LessThanOrEqual.left=current} "<=" |
		//       {LessThan.left=current} "<" |
		//       {GreaterThanOrEqual.left=current} ">=" |
		//       {GreaterThan.left=current} ">" |
		//       {Equal.left=current} "==" |
		//       {NotEqual.left=current} "!="
		//   )
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{LessThanOrEqual.left=current} "<=" |
		//{LessThan.left=current} "<" |
		//{GreaterThanOrEqual.left=current} ">=" |
		//{GreaterThan.left=current} ">" |
		//{Equal.left=current} "==" |
		//{NotEqual.left=current} "!="
		public Alternatives getAlternatives_1_0_0() { return cAlternatives_1_0_0; }
		
		//{LessThanOrEqual.left=current} "<="
		public Group getGroup_1_0_0_0() { return cGroup_1_0_0_0; }
		
		//{LessThanOrEqual.left=current}
		public Action getLessThanOrEqualLeftAction_1_0_0_0_0() { return cLessThanOrEqualLeftAction_1_0_0_0_0; }
		
		//"<="
		public Keyword getLessThanSignEqualsSignKeyword_1_0_0_0_1() { return cLessThanSignEqualsSignKeyword_1_0_0_0_1; }
		
		//{LessThan.left=current} "<"
		public Group getGroup_1_0_0_1() { return cGroup_1_0_0_1; }
		
		//{LessThan.left=current}
		public Action getLessThanLeftAction_1_0_0_1_0() { return cLessThanLeftAction_1_0_0_1_0; }
		
		//"<"
		public Keyword getLessThanSignKeyword_1_0_0_1_1() { return cLessThanSignKeyword_1_0_0_1_1; }
		
		//{GreaterThanOrEqual.left=current} ">="
		public Group getGroup_1_0_0_2() { return cGroup_1_0_0_2; }
		
		//{GreaterThanOrEqual.left=current}
		public Action getGreaterThanOrEqualLeftAction_1_0_0_2_0() { return cGreaterThanOrEqualLeftAction_1_0_0_2_0; }
		
		//">="
		public Keyword getGreaterThanSignEqualsSignKeyword_1_0_0_2_1() { return cGreaterThanSignEqualsSignKeyword_1_0_0_2_1; }
		
		//{GreaterThan.left=current} ">"
		public Group getGroup_1_0_0_3() { return cGroup_1_0_0_3; }
		
		//{GreaterThan.left=current}
		public Action getGreaterThanLeftAction_1_0_0_3_0() { return cGreaterThanLeftAction_1_0_0_3_0; }
		
		//">"
		public Keyword getGreaterThanSignKeyword_1_0_0_3_1() { return cGreaterThanSignKeyword_1_0_0_3_1; }
		
		//{Equal.left=current} "=="
		public Group getGroup_1_0_0_4() { return cGroup_1_0_0_4; }
		
		//{Equal.left=current}
		public Action getEqualLeftAction_1_0_0_4_0() { return cEqualLeftAction_1_0_0_4_0; }
		
		//"=="
		public Keyword getEqualsSignEqualsSignKeyword_1_0_0_4_1() { return cEqualsSignEqualsSignKeyword_1_0_0_4_1; }
		
		//{NotEqual.left=current} "!="
		public Group getGroup_1_0_0_5() { return cGroup_1_0_0_5; }
		
		//{NotEqual.left=current}
		public Action getNotEqualLeftAction_1_0_0_5_0() { return cNotEqualLeftAction_1_0_0_5_0; }
		
		//"!="
		public Keyword getExclamationMarkEqualsSignKeyword_1_0_0_5_1() { return cExclamationMarkEqualsSignKeyword_1_0_0_5_1; }
		
		//right=AdditionExpression
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//AdditionExpression
		public RuleCall getRightAdditionExpressionParserRuleCall_1_1_0() { return cRightAdditionExpressionParserRuleCall_1_1_0; }
	}
	public class AdditionExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.farm.Farm.AdditionExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplicationExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_0_0 = (Alternatives)cGroup_1_0.eContents().get(0);
		private final Group cGroup_1_0_0_0 = (Group)cAlternatives_1_0_0.eContents().get(0);
		private final Action cPlusLeftAction_1_0_0_0_0 = (Action)cGroup_1_0_0_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_0_0_0_1 = (Keyword)cGroup_1_0_0_0.eContents().get(1);
		private final Group cGroup_1_0_0_1 = (Group)cAlternatives_1_0_0.eContents().get(1);
		private final Action cMinusLeftAction_1_0_0_1_0 = (Action)cGroup_1_0_0_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_0_0_1_1 = (Keyword)cGroup_1_0_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightMultiplicationExpressionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//AdditionExpression returns Expression:
		//    MultiplicationExpression ( => (
		//        {Plus.left=current} "+" |
		//        {Minus.left=current} "-"
		//    ) right+=MultiplicationExpression )*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//MultiplicationExpression ( => (
		//    {Plus.left=current} "+" |
		//    {Minus.left=current} "-"
		//) right+=MultiplicationExpression )*
		public Group getGroup() { return cGroup; }
		
		//MultiplicationExpression
		public RuleCall getMultiplicationExpressionParserRuleCall_0() { return cMultiplicationExpressionParserRuleCall_0; }
		
		//( => (
		//       {Plus.left=current} "+" |
		//       {Minus.left=current} "-"
		//   ) right+=MultiplicationExpression )*
		public Group getGroup_1() { return cGroup_1; }
		
		//=> (
		//       {Plus.left=current} "+" |
		//       {Minus.left=current} "-"
		//   )
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{Plus.left=current} "+" |
		//{Minus.left=current} "-"
		public Alternatives getAlternatives_1_0_0() { return cAlternatives_1_0_0; }
		
		//{Plus.left=current} "+"
		public Group getGroup_1_0_0_0() { return cGroup_1_0_0_0; }
		
		//{Plus.left=current}
		public Action getPlusLeftAction_1_0_0_0_0() { return cPlusLeftAction_1_0_0_0_0; }
		
		//"+"
		public Keyword getPlusSignKeyword_1_0_0_0_1() { return cPlusSignKeyword_1_0_0_0_1; }
		
		//{Minus.left=current} "-"
		public Group getGroup_1_0_0_1() { return cGroup_1_0_0_1; }
		
		//{Minus.left=current}
		public Action getMinusLeftAction_1_0_0_1_0() { return cMinusLeftAction_1_0_0_1_0; }
		
		//"-"
		public Keyword getHyphenMinusKeyword_1_0_0_1_1() { return cHyphenMinusKeyword_1_0_0_1_1; }
		
		//right+=MultiplicationExpression
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//MultiplicationExpression
		public RuleCall getRightMultiplicationExpressionParserRuleCall_1_1_0() { return cRightMultiplicationExpressionParserRuleCall_1_1_0; }
	}
	public class MultiplicationExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.farm.Farm.MultiplicationExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnaryExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_0_0 = (Alternatives)cGroup_1_0.eContents().get(0);
		private final Group cGroup_1_0_0_0 = (Group)cAlternatives_1_0_0.eContents().get(0);
		private final Action cMultiplyLeftAction_1_0_0_0_0 = (Action)cGroup_1_0_0_0.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_0_0_0_1 = (Keyword)cGroup_1_0_0_0.eContents().get(1);
		private final Group cGroup_1_0_0_1 = (Group)cAlternatives_1_0_0.eContents().get(1);
		private final Action cDivideLeftAction_1_0_0_1_0 = (Action)cGroup_1_0_0_1.eContents().get(0);
		private final Keyword cSolidusKeyword_1_0_0_1_1 = (Keyword)cGroup_1_0_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightUnaryExpressionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//MultiplicationExpression returns Expression:
		//    UnaryExpression ( => (
		//        {Multiply.left=current} "*" |
		//        {Divide.left=current} "/"
		//    ) right+=UnaryExpression)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//UnaryExpression ( => (
		//    {Multiply.left=current} "*" |
		//    {Divide.left=current} "/"
		//) right+=UnaryExpression)*
		public Group getGroup() { return cGroup; }
		
		//UnaryExpression
		public RuleCall getUnaryExpressionParserRuleCall_0() { return cUnaryExpressionParserRuleCall_0; }
		
		//( => (
		//       {Multiply.left=current} "*" |
		//       {Divide.left=current} "/"
		//   ) right+=UnaryExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//=> (
		//       {Multiply.left=current} "*" |
		//       {Divide.left=current} "/"
		//   )
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{Multiply.left=current} "*" |
		//{Divide.left=current} "/"
		public Alternatives getAlternatives_1_0_0() { return cAlternatives_1_0_0; }
		
		//{Multiply.left=current} "*"
		public Group getGroup_1_0_0_0() { return cGroup_1_0_0_0; }
		
		//{Multiply.left=current}
		public Action getMultiplyLeftAction_1_0_0_0_0() { return cMultiplyLeftAction_1_0_0_0_0; }
		
		//"*"
		public Keyword getAsteriskKeyword_1_0_0_0_1() { return cAsteriskKeyword_1_0_0_0_1; }
		
		//{Divide.left=current} "/"
		public Group getGroup_1_0_0_1() { return cGroup_1_0_0_1; }
		
		//{Divide.left=current}
		public Action getDivideLeftAction_1_0_0_1_0() { return cDivideLeftAction_1_0_0_1_0; }
		
		//"/"
		public Keyword getSolidusKeyword_1_0_0_1_1() { return cSolidusKeyword_1_0_0_1_1; }
		
		//right+=UnaryExpression
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//UnaryExpression
		public RuleCall getRightUnaryExpressionParserRuleCall_1_1_0() { return cRightUnaryExpressionParserRuleCall_1_1_0; }
	}
	public class UnaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.farm.Farm.UnaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cUnaryExpressionNotPlusMinusParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cUnaryExpressionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cExpAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cExpUnaryExpressionParserRuleCall_1_2_0 = (RuleCall)cExpAssignment_1_2.eContents().get(0);
		
		//UnaryExpression returns Expression:
		//    UnaryExpressionNotPlusMinus |
		//    ({UnaryExpression} "-" exp=UnaryExpression)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//UnaryExpressionNotPlusMinus |
		//({UnaryExpression} "-" exp=UnaryExpression)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//UnaryExpressionNotPlusMinus
		public RuleCall getUnaryExpressionNotPlusMinusParserRuleCall_0() { return cUnaryExpressionNotPlusMinusParserRuleCall_0; }
		
		//({UnaryExpression} "-" exp=UnaryExpression)
		public Group getGroup_1() { return cGroup_1; }
		
		//{UnaryExpression}
		public Action getUnaryExpressionAction_1_0() { return cUnaryExpressionAction_1_0; }
		
		//"-"
		public Keyword getHyphenMinusKeyword_1_1() { return cHyphenMinusKeyword_1_1; }
		
		//exp=UnaryExpression
		public Assignment getExpAssignment_1_2() { return cExpAssignment_1_2; }
		
		//UnaryExpression
		public RuleCall getExpUnaryExpressionParserRuleCall_1_2_0() { return cExpUnaryExpressionParserRuleCall_1_2_0; }
	}
	public class UnaryExpressionNotPlusMinusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.farm.Farm.UnaryExpressionNotPlusMinus");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNotBooleanExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPrimaryExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//UnaryExpressionNotPlusMinus returns Expression:
		//    NotBooleanExpression | PrimaryExpression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//NotBooleanExpression | PrimaryExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NotBooleanExpression
		public RuleCall getNotBooleanExpressionParserRuleCall_0() { return cNotBooleanExpressionParserRuleCall_0; }
		
		//PrimaryExpression
		public RuleCall getPrimaryExpressionParserRuleCall_1() { return cPrimaryExpressionParserRuleCall_1; }
	}
	public class NotBooleanExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.farm.Farm.NotBooleanExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpUnaryExpressionParserRuleCall_1_0 = (RuleCall)cExpAssignment_1.eContents().get(0);
		
		//NotBooleanExpression returns Expression:
		//    "!" exp=UnaryExpression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"!" exp=UnaryExpression
		public Group getGroup() { return cGroup; }
		
		//"!"
		public Keyword getExclamationMarkKeyword_0() { return cExclamationMarkKeyword_0; }
		
		//exp=UnaryExpression
		public Assignment getExpAssignment_1() { return cExpAssignment_1; }
		
		//UnaryExpression
		public RuleCall getExpUnaryExpressionParserRuleCall_1_0() { return cExpUnaryExpressionParserRuleCall_1_0; }
	}
	public class PrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.farm.Farm.PrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Assignment cVarAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final CrossReference cVarVariableCrossReference_1_0 = (CrossReference)cVarAssignment_1.eContents().get(0);
		private final RuleCall cVarVariableIDTerminalRuleCall_1_0_1 = (RuleCall)cVarVariableCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//PrimaryExpression returns Expression:
		//    Literal |
		//    var=[Variable | ID] |
		//    "(" Expression ")"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Literal |
		//var=[Variable | ID] |
		//"(" Expression ")"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Literal
		public RuleCall getLiteralParserRuleCall_0() { return cLiteralParserRuleCall_0; }
		
		//var=[Variable | ID]
		public Assignment getVarAssignment_1() { return cVarAssignment_1; }
		
		//[Variable | ID]
		public CrossReference getVarVariableCrossReference_1_0() { return cVarVariableCrossReference_1_0; }
		
		//ID
		public RuleCall getVarVariableIDTerminalRuleCall_1_0_1() { return cVarVariableIDTerminalRuleCall_1_0_1; }
		
		//"(" Expression ")"
		public Group getGroup_2() { return cGroup_2; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_2_1() { return cExpressionParserRuleCall_2_1; }
		
		//")"
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
	}
	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.farm.Farm.Literal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBooleanLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRealLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Literal:
		//    BooleanLiteral | RealLiteral
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//BooleanLiteral | RealLiteral
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BooleanLiteral
		public RuleCall getBooleanLiteralParserRuleCall_0() { return cBooleanLiteralParserRuleCall_0; }
		
		//RealLiteral
		public RuleCall getRealLiteralParserRuleCall_1() { return cRealLiteralParserRuleCall_1; }
	}
	public class BooleanLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.farm.Farm.BooleanLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBoolLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValBOOLEANTerminalRuleCall_1_0 = (RuleCall)cValAssignment_1.eContents().get(0);
		
		//BooleanLiteral:
		//    {BoolLiteral} val=BOOLEAN
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{BoolLiteral} val=BOOLEAN
		public Group getGroup() { return cGroup; }
		
		//{BoolLiteral}
		public Action getBoolLiteralAction_0() { return cBoolLiteralAction_0; }
		
		//val=BOOLEAN
		public Assignment getValAssignment_1() { return cValAssignment_1; }
		
		//BOOLEAN
		public RuleCall getValBOOLEANTerminalRuleCall_1_0() { return cValBOOLEANTerminalRuleCall_1_0; }
	}
	public class RealLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.farm.Farm.RealLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRealLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValREALParserRuleCall_1_0 = (RuleCall)cValAssignment_1.eContents().get(0);
		
		//RealLiteral:
		//    {RealLiteral} val=REAL
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{RealLiteral} val=REAL
		public Group getGroup() { return cGroup; }
		
		//{RealLiteral}
		public Action getRealLiteralAction_0() { return cRealLiteralAction_0; }
		
		//val=REAL
		public Assignment getValAssignment_1() { return cValAssignment_1; }
		
		//REAL
		public RuleCall getValREALParserRuleCall_1_0() { return cValREALParserRuleCall_1_0; }
	}
	public class REALElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.farm.Farm.REAL");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//REAL returns ecore::EFloat hidden():
		//    INT? "." INT
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//INT? "." INT
		public Group getGroup() { return cGroup; }
		
		//INT?
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
	}
	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.farm.Farm.Attribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDefineKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//// Define codes
		//Attribute:
		//    "define" name=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"define" name=ID
		public Group getGroup() { return cGroup; }
		
		//"define"
		public Keyword getDefineKeyword_0() { return cDefineKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class CropElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.farm.Farm.Crop");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCropKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cNameKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cCropNameAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cCropNameSTRINGTerminalRuleCall_5_0 = (RuleCall)cCropNameAssignment_5.eContents().get(0);
		private final Keyword cStageKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cColonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cLeftSquareBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cStatementsAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cStatementsCropStagesParserRuleCall_9_0 = (RuleCall)cStatementsAssignment_9.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Keyword cRightCurlyBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		
		//// Crop code block
		//Crop:
		//    "crop" name=ID "{"
		//        "name" ":" cropName=STRING
		//        "stage" ":" "["
		//            statements += CropStages
		//        "]"
		//    "}"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"crop" name=ID "{"
		//    "name" ":" cropName=STRING
		//    "stage" ":" "["
		//        statements += CropStages
		//    "]"
		//"}"
		public Group getGroup() { return cGroup; }
		
		//"crop"
		public Keyword getCropKeyword_0() { return cCropKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//"name"
		public Keyword getNameKeyword_3() { return cNameKeyword_3; }
		
		//":"
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }
		
		//cropName=STRING
		public Assignment getCropNameAssignment_5() { return cCropNameAssignment_5; }
		
		//STRING
		public RuleCall getCropNameSTRINGTerminalRuleCall_5_0() { return cCropNameSTRINGTerminalRuleCall_5_0; }
		
		//"stage"
		public Keyword getStageKeyword_6() { return cStageKeyword_6; }
		
		//":"
		public Keyword getColonKeyword_7() { return cColonKeyword_7; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_8() { return cLeftSquareBracketKeyword_8; }
		
		//statements += CropStages
		public Assignment getStatementsAssignment_9() { return cStatementsAssignment_9; }
		
		//CropStages
		public RuleCall getStatementsCropStagesParserRuleCall_9_0() { return cStatementsCropStagesParserRuleCall_9_0; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_10() { return cRightSquareBracketKeyword_10; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_11() { return cRightCurlyBracketKeyword_11; }
	}
	public class CropStagesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.farm.Farm.CropStages");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cElementsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cElementsCropStageParserRuleCall_0_0 = (RuleCall)cElementsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cElementsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cElementsCropStageParserRuleCall_1_1_0 = (RuleCall)cElementsAssignment_1_1.eContents().get(0);
		
		//CropStages:
		//    elements += CropStage ("," elements += CropStage)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//elements += CropStage ("," elements += CropStage)*
		public Group getGroup() { return cGroup; }
		
		//elements += CropStage
		public Assignment getElementsAssignment_0() { return cElementsAssignment_0; }
		
		//CropStage
		public RuleCall getElementsCropStageParserRuleCall_0_0() { return cElementsCropStageParserRuleCall_0_0; }
		
		//("," elements += CropStage)*
		public Group getGroup_1() { return cGroup_1; }
		
		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//elements += CropStage
		public Assignment getElementsAssignment_1_1() { return cElementsAssignment_1_1; }
		
		//CropStage
		public RuleCall getElementsCropStageParserRuleCall_1_1_0() { return cElementsCropStageParserRuleCall_1_1_0; }
	}
	public class CropStageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.farm.Farm.CropStage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cNameKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameSTRINGTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cTimeConsumedKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cColonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cTimeConsumendAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cTimeConsumendExpressionParserRuleCall_6_0 = (RuleCall)cTimeConsumendAssignment_6.eContents().get(0);
		private final Assignment cElementsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cElementsCropAttributesParserRuleCall_7_0 = (RuleCall)cElementsAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//CropStage:
		//    "{"
		//        "name" ":" name=STRING
		//        "timeConsumed" ":" timeConsumend=Expression
		//        elements += CropAttributes*
		//    "}"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"{"
		//    "name" ":" name=STRING
		//    "timeConsumed" ":" timeConsumend=Expression
		//    elements += CropAttributes*
		//"}"
		public Group getGroup() { return cGroup; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//"name"
		public Keyword getNameKeyword_1() { return cNameKeyword_1; }
		
		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//name=STRING
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_3_0() { return cNameSTRINGTerminalRuleCall_3_0; }
		
		//"timeConsumed"
		public Keyword getTimeConsumedKeyword_4() { return cTimeConsumedKeyword_4; }
		
		//":"
		public Keyword getColonKeyword_5() { return cColonKeyword_5; }
		
		//timeConsumend=Expression
		public Assignment getTimeConsumendAssignment_6() { return cTimeConsumendAssignment_6; }
		
		//Expression
		public RuleCall getTimeConsumendExpressionParserRuleCall_6_0() { return cTimeConsumendExpressionParserRuleCall_6_0; }
		
		//elements += CropAttributes*
		public Assignment getElementsAssignment_7() { return cElementsAssignment_7; }
		
		//CropAttributes
		public RuleCall getElementsCropAttributesParserRuleCall_7_0() { return cElementsCropAttributesParserRuleCall_7_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class CropAttributesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.farm.Farm.CropAttributes");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTypeAttributeCrossReference_0_0 = (CrossReference)cTypeAssignment_0.eContents().get(0);
		private final RuleCall cTypeAttributeIDTerminalRuleCall_0_0_1 = (RuleCall)cTypeAttributeCrossReference_0_0.eContents().get(1);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueExpressionParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//CropAttributes:
		//    type=[Attribute | ID] ":" value=Expression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//type=[Attribute | ID] ":" value=Expression
		public Group getGroup() { return cGroup; }
		
		//type=[Attribute | ID]
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//[Attribute | ID]
		public CrossReference getTypeAttributeCrossReference_0_0() { return cTypeAttributeCrossReference_0_0; }
		
		//ID
		public RuleCall getTypeAttributeIDTerminalRuleCall_0_0_1() { return cTypeAttributeIDTerminalRuleCall_0_0_1; }
		
		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//value=Expression
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//Expression
		public RuleCall getValueExpressionParserRuleCall_2_0() { return cValueExpressionParserRuleCall_2_0; }
	}
	public class FieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.farm.Farm.Field");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFieldKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cNameKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cFieldNameAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cFieldNameSTRINGTerminalRuleCall_5_0 = (RuleCall)cFieldNameAssignment_5.eContents().get(0);
		private final Keyword cIpKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cColonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cIpAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cIpIPParserRuleCall_8_0 = (RuleCall)cIpAssignment_8.eContents().get(0);
		private final Keyword cTypeKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cColonKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cFieldTypeAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final Alternatives cFieldTypeAlternatives_11_0 = (Alternatives)cFieldTypeAssignment_11.eContents().get(0);
		private final Keyword cFieldTypeInsideKeyword_11_0_0 = (Keyword)cFieldTypeAlternatives_11_0.eContents().get(0);
		private final Keyword cFieldTypeOutsideKeyword_11_0_1 = (Keyword)cFieldTypeAlternatives_11_0.eContents().get(1);
		private final Keyword cLightKeyword_12 = (Keyword)cGroup.eContents().get(12);
		private final Keyword cColonKeyword_13 = (Keyword)cGroup.eContents().get(13);
		private final Assignment cFieldLightAssignment_14 = (Assignment)cGroup.eContents().get(14);
		private final Alternatives cFieldLightAlternatives_14_0 = (Alternatives)cFieldLightAssignment_14.eContents().get(0);
		private final Keyword cFieldLightSunlightKeyword_14_0_0 = (Keyword)cFieldLightAlternatives_14_0.eContents().get(0);
		private final Keyword cFieldLightLEDKeyword_14_0_1 = (Keyword)cFieldLightAlternatives_14_0.eContents().get(1);
		private final Keyword cMonitorKeyword_15 = (Keyword)cGroup.eContents().get(15);
		private final Keyword cColonKeyword_16 = (Keyword)cGroup.eContents().get(16);
		private final Keyword cLeftSquareBracketKeyword_17 = (Keyword)cGroup.eContents().get(17);
		private final Assignment cFieldMonitorsAssignment_18 = (Assignment)cGroup.eContents().get(18);
		private final RuleCall cFieldMonitorsFieldMonitorParserRuleCall_18_0 = (RuleCall)cFieldMonitorsAssignment_18.eContents().get(0);
		private final Group cGroup_19 = (Group)cGroup.eContents().get(19);
		private final Keyword cCommaKeyword_19_0 = (Keyword)cGroup_19.eContents().get(0);
		private final Assignment cFieldMonitorsAssignment_19_1 = (Assignment)cGroup_19.eContents().get(1);
		private final RuleCall cFieldMonitorsFieldMonitorParserRuleCall_19_1_0 = (RuleCall)cFieldMonitorsAssignment_19_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_20 = (Keyword)cGroup.eContents().get(20);
		private final Keyword cRightCurlyBracketKeyword_21 = (Keyword)cGroup.eContents().get(21);
		
		//// Field code block
		//Field:
		//    "field" name=ID "{"
		//        "name" ":" fieldName=STRING
		//        "ip" ":" ip=IP
		//        "type" ":" fieldType=("inside" | "outside")
		//        "light" ":" fieldLight=("sunlight" | "LED")
		//        "monitor" ":" "[" fieldMonitors+=FieldMonitor ("," fieldMonitors+=FieldMonitor)* "]"
		//    "}"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"field" name=ID "{"
		//    "name" ":" fieldName=STRING
		//    "ip" ":" ip=IP
		//    "type" ":" fieldType=("inside" | "outside")
		//    "light" ":" fieldLight=("sunlight" | "LED")
		//    "monitor" ":" "[" fieldMonitors+=FieldMonitor ("," fieldMonitors+=FieldMonitor)* "]"
		//"}"
		public Group getGroup() { return cGroup; }
		
		//"field"
		public Keyword getFieldKeyword_0() { return cFieldKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//"name"
		public Keyword getNameKeyword_3() { return cNameKeyword_3; }
		
		//":"
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }
		
		//fieldName=STRING
		public Assignment getFieldNameAssignment_5() { return cFieldNameAssignment_5; }
		
		//STRING
		public RuleCall getFieldNameSTRINGTerminalRuleCall_5_0() { return cFieldNameSTRINGTerminalRuleCall_5_0; }
		
		//"ip"
		public Keyword getIpKeyword_6() { return cIpKeyword_6; }
		
		//":"
		public Keyword getColonKeyword_7() { return cColonKeyword_7; }
		
		//ip=IP
		public Assignment getIpAssignment_8() { return cIpAssignment_8; }
		
		//IP
		public RuleCall getIpIPParserRuleCall_8_0() { return cIpIPParserRuleCall_8_0; }
		
		//"type"
		public Keyword getTypeKeyword_9() { return cTypeKeyword_9; }
		
		//":"
		public Keyword getColonKeyword_10() { return cColonKeyword_10; }
		
		//fieldType=("inside" | "outside")
		public Assignment getFieldTypeAssignment_11() { return cFieldTypeAssignment_11; }
		
		//("inside" | "outside")
		public Alternatives getFieldTypeAlternatives_11_0() { return cFieldTypeAlternatives_11_0; }
		
		//"inside"
		public Keyword getFieldTypeInsideKeyword_11_0_0() { return cFieldTypeInsideKeyword_11_0_0; }
		
		//"outside"
		public Keyword getFieldTypeOutsideKeyword_11_0_1() { return cFieldTypeOutsideKeyword_11_0_1; }
		
		//"light"
		public Keyword getLightKeyword_12() { return cLightKeyword_12; }
		
		//":"
		public Keyword getColonKeyword_13() { return cColonKeyword_13; }
		
		//fieldLight=("sunlight" | "LED")
		public Assignment getFieldLightAssignment_14() { return cFieldLightAssignment_14; }
		
		//("sunlight" | "LED")
		public Alternatives getFieldLightAlternatives_14_0() { return cFieldLightAlternatives_14_0; }
		
		//"sunlight"
		public Keyword getFieldLightSunlightKeyword_14_0_0() { return cFieldLightSunlightKeyword_14_0_0; }
		
		//"LED"
		public Keyword getFieldLightLEDKeyword_14_0_1() { return cFieldLightLEDKeyword_14_0_1; }
		
		//"monitor"
		public Keyword getMonitorKeyword_15() { return cMonitorKeyword_15; }
		
		//":"
		public Keyword getColonKeyword_16() { return cColonKeyword_16; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_17() { return cLeftSquareBracketKeyword_17; }
		
		//fieldMonitors+=FieldMonitor
		public Assignment getFieldMonitorsAssignment_18() { return cFieldMonitorsAssignment_18; }
		
		//FieldMonitor
		public RuleCall getFieldMonitorsFieldMonitorParserRuleCall_18_0() { return cFieldMonitorsFieldMonitorParserRuleCall_18_0; }
		
		//("," fieldMonitors+=FieldMonitor)*
		public Group getGroup_19() { return cGroup_19; }
		
		//","
		public Keyword getCommaKeyword_19_0() { return cCommaKeyword_19_0; }
		
		//fieldMonitors+=FieldMonitor
		public Assignment getFieldMonitorsAssignment_19_1() { return cFieldMonitorsAssignment_19_1; }
		
		//FieldMonitor
		public RuleCall getFieldMonitorsFieldMonitorParserRuleCall_19_1_0() { return cFieldMonitorsFieldMonitorParserRuleCall_19_1_0; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_20() { return cRightSquareBracketKeyword_20; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_21() { return cRightCurlyBracketKeyword_21; }
	}
	public class IPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.farm.Farm.IP");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Keyword cFullStopKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_2_2_0 = (RuleCall)cGroup_2_2.eContents().get(0);
		private final Keyword cFullStopKeyword_2_2_1 = (Keyword)cGroup_2_2.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2_2_2 = (RuleCall)cGroup_2_2.eContents().get(2);
		
		//IP hidden():
		//    (INT '.' (INT '.' (INT '.' (INT))))
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(INT '.' (INT '.' (INT '.' (INT))))
		public Group getGroup() { return cGroup; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//(INT '.' (INT '.' (INT)))
		public Group getGroup_2() { return cGroup_2; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2_0() { return cINTTerminalRuleCall_2_0; }
		
		//'.'
		public Keyword getFullStopKeyword_2_1() { return cFullStopKeyword_2_1; }
		
		//(INT '.' (INT))
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2_2_0() { return cINTTerminalRuleCall_2_2_0; }
		
		//'.'
		public Keyword getFullStopKeyword_2_2_1() { return cFullStopKeyword_2_2_1; }
		
		//(INT)
		public RuleCall getINTTerminalRuleCall_2_2_2() { return cINTTerminalRuleCall_2_2_2; }
	}
	public class FieldMonitorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.farm.Farm.FieldMonitor");
		private final Assignment cMonitorAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cMonitorAttributeCrossReference_0 = (CrossReference)cMonitorAssignment.eContents().get(0);
		private final RuleCall cMonitorAttributeIDTerminalRuleCall_0_1 = (RuleCall)cMonitorAttributeCrossReference_0.eContents().get(1);
		
		//FieldMonitor:
		//    monitor=[Attribute | ID]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//monitor=[Attribute | ID]
		public Assignment getMonitorAssignment() { return cMonitorAssignment; }
		
		//[Attribute | ID]
		public CrossReference getMonitorAttributeCrossReference_0() { return cMonitorAttributeCrossReference_0; }
		
		//ID
		public RuleCall getMonitorAttributeIDTerminalRuleCall_0_1() { return cMonitorAttributeIDTerminalRuleCall_0_1; }
	}
	public class MissionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.farm.Farm.Mission");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMissionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStatementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Alternatives cStatementsAlternatives_3_0 = (Alternatives)cStatementsAssignment_3.eContents().get(0);
		private final RuleCall cStatementsTaskStatementParserRuleCall_3_0_0 = (RuleCall)cStatementsAlternatives_3_0.eContents().get(0);
		private final RuleCall cStatementsExecuteStatementParserRuleCall_3_0_1 = (RuleCall)cStatementsAlternatives_3_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//// Main code block
		//Mission:
		//    "mission" name=ID "{"
		//        statements += (TaskStatement | ExecuteStatement)+
		//    "}"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"mission" name=ID "{"
		//    statements += (TaskStatement | ExecuteStatement)+
		//"}"
		public Group getGroup() { return cGroup; }
		
		//"mission"
		public Keyword getMissionKeyword_0() { return cMissionKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//statements += (TaskStatement | ExecuteStatement)+
		public Assignment getStatementsAssignment_3() { return cStatementsAssignment_3; }
		
		//(TaskStatement | ExecuteStatement)
		public Alternatives getStatementsAlternatives_3_0() { return cStatementsAlternatives_3_0; }
		
		//TaskStatement
		public RuleCall getStatementsTaskStatementParserRuleCall_3_0_0() { return cStatementsTaskStatementParserRuleCall_3_0_0; }
		
		//ExecuteStatement
		public RuleCall getStatementsExecuteStatementParserRuleCall_3_0_1() { return cStatementsExecuteStatementParserRuleCall_3_0_1; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class TaskStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.farm.Farm.TaskStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTaskKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cParmasAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cParmasParamParserRuleCall_3_0_0 = (RuleCall)cParmasAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cParmasAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cParmasParamParserRuleCall_3_1_1_0 = (RuleCall)cParmasAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cColonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cTypeNameAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cTypeNameTypeNameParserRuleCall_6_0 = (RuleCall)cTypeNameAssignment_6.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cStatementsAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final Alternatives cStatementsAlternatives_8_0 = (Alternatives)cStatementsAssignment_8.eContents().get(0);
		private final RuleCall cStatementsStatementParserRuleCall_8_0_0 = (RuleCall)cStatementsAlternatives_8_0.eContents().get(0);
		private final RuleCall cStatementsReturnStatementParserRuleCall_8_0_1 = (RuleCall)cStatementsAlternatives_8_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//// Task code block
		//TaskStatement:
		//    "task" name=ID "(" (parmas+=Param ("," parmas+=Param)*)? ")" ":" typeName=TypeName "{"
		//        statements += (Statement | ReturnStatement)*
		//    "}"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"task" name=ID "(" (parmas+=Param ("," parmas+=Param)*)? ")" ":" typeName=TypeName "{"
		//    statements += (Statement | ReturnStatement)*
		//"}"
		public Group getGroup() { return cGroup; }
		
		//"task"
		public Keyword getTaskKeyword_0() { return cTaskKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//(parmas+=Param ("," parmas+=Param)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//parmas+=Param
		public Assignment getParmasAssignment_3_0() { return cParmasAssignment_3_0; }
		
		//Param
		public RuleCall getParmasParamParserRuleCall_3_0_0() { return cParmasParamParserRuleCall_3_0_0; }
		
		//("," parmas+=Param)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//parmas+=Param
		public Assignment getParmasAssignment_3_1_1() { return cParmasAssignment_3_1_1; }
		
		//Param
		public RuleCall getParmasParamParserRuleCall_3_1_1_0() { return cParmasParamParserRuleCall_3_1_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//":"
		public Keyword getColonKeyword_5() { return cColonKeyword_5; }
		
		//typeName=TypeName
		public Assignment getTypeNameAssignment_6() { return cTypeNameAssignment_6; }
		
		//TypeName
		public RuleCall getTypeNameTypeNameParserRuleCall_6_0() { return cTypeNameTypeNameParserRuleCall_6_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_7() { return cLeftCurlyBracketKeyword_7; }
		
		//statements += (Statement | ReturnStatement)*
		public Assignment getStatementsAssignment_8() { return cStatementsAssignment_8; }
		
		//(Statement | ReturnStatement)
		public Alternatives getStatementsAlternatives_8_0() { return cStatementsAlternatives_8_0; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_8_0_0() { return cStatementsStatementParserRuleCall_8_0_0; }
		
		//ReturnStatement
		public RuleCall getStatementsReturnStatementParserRuleCall_8_0_1() { return cStatementsReturnStatementParserRuleCall_8_0_1; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	public class ReturnStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.farm.Farm.ReturnStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReturnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueExpressionParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ReturnStatement:
		//    "return" "(" value=Expression ")"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"return" "(" value=Expression ")"
		public Group getGroup() { return cGroup; }
		
		//"return"
		public Keyword getReturnKeyword_0() { return cReturnKeyword_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//value=Expression
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//Expression
		public RuleCall getValueExpressionParserRuleCall_2_0() { return cValueExpressionParserRuleCall_2_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class ExecuteStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.farm.Farm.ExecuteStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExecuteKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStatementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatementsStatementParserRuleCall_2_0 = (RuleCall)cStatementsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ExecuteStatement:
		//    "execute" "{"
		//        statements += Statement*
		//    "}"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"execute" "{"
		//    statements += Statement*
		//"}"
		public Group getGroup() { return cGroup; }
		
		//"execute"
		public Keyword getExecuteKeyword_0() { return cExecuteKeyword_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//statements += Statement*
		public Assignment getStatementsAssignment_2() { return cStatementsAssignment_2; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_2_0() { return cStatementsStatementParserRuleCall_2_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	
	
	private final FarmProgramElements pFarmProgram;
	private final ClassElements pClass;
	private final ParamElements pParam;
	private final TypeNameElements pTypeName;
	private final StatementElements pStatement;
	private final VariableElements pVariable;
	private final LoopStatementElements pLoopStatement;
	private final JudgeStatementElements pJudgeStatement;
	private final ElseJudgeStatementElements pElseJudgeStatement;
	private final BuiltinFunctionElements pBuiltinFunction;
	private final EntityElements pEntity;
	private final ReportFunctionElements pReportFunction;
	private final GetStageFunctionElements pGetStageFunction;
	private final CountStageFunctionElements pCountStageFunction;
	private final GetValueFunctionElements pGetValueFunction;
	private final SetFieldValueFunctionElements pSetFieldValueFunction;
	private final PlantFunctionElements pPlantFunction;
	private final MoveFunctionElements pMoveFunction;
	private final WaitFunctionElements pWaitFunction;
	private final ExpressionElements pExpression;
	private final ConditionOrExpressionElements pConditionOrExpression;
	private final ConditionAndExpressionElements pConditionAndExpression;
	private final RelationOrExpressionElements pRelationOrExpression;
	private final AdditionExpressionElements pAdditionExpression;
	private final MultiplicationExpressionElements pMultiplicationExpression;
	private final UnaryExpressionElements pUnaryExpression;
	private final UnaryExpressionNotPlusMinusElements pUnaryExpressionNotPlusMinus;
	private final NotBooleanExpressionElements pNotBooleanExpression;
	private final PrimaryExpressionElements pPrimaryExpression;
	private final LiteralElements pLiteral;
	private final BooleanLiteralElements pBooleanLiteral;
	private final TerminalRule tBOOLEAN;
	private final RealLiteralElements pRealLiteral;
	private final REALElements pREAL;
	private final AttributeElements pAttribute;
	private final CropElements pCrop;
	private final CropStagesElements pCropStages;
	private final CropStageElements pCropStage;
	private final CropAttributesElements pCropAttributes;
	private final FieldElements pField;
	private final IPElements pIP;
	private final FieldMonitorElements pFieldMonitor;
	private final MissionElements pMission;
	private final TaskStatementElements pTaskStatement;
	private final ReturnStatementElements pReturnStatement;
	private final ExecuteStatementElements pExecuteStatement;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public FarmGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pFarmProgram = new FarmProgramElements();
		this.pClass = new ClassElements();
		this.pParam = new ParamElements();
		this.pTypeName = new TypeNameElements();
		this.pStatement = new StatementElements();
		this.pVariable = new VariableElements();
		this.pLoopStatement = new LoopStatementElements();
		this.pJudgeStatement = new JudgeStatementElements();
		this.pElseJudgeStatement = new ElseJudgeStatementElements();
		this.pBuiltinFunction = new BuiltinFunctionElements();
		this.pEntity = new EntityElements();
		this.pReportFunction = new ReportFunctionElements();
		this.pGetStageFunction = new GetStageFunctionElements();
		this.pCountStageFunction = new CountStageFunctionElements();
		this.pGetValueFunction = new GetValueFunctionElements();
		this.pSetFieldValueFunction = new SetFieldValueFunctionElements();
		this.pPlantFunction = new PlantFunctionElements();
		this.pMoveFunction = new MoveFunctionElements();
		this.pWaitFunction = new WaitFunctionElements();
		this.pExpression = new ExpressionElements();
		this.pConditionOrExpression = new ConditionOrExpressionElements();
		this.pConditionAndExpression = new ConditionAndExpressionElements();
		this.pRelationOrExpression = new RelationOrExpressionElements();
		this.pAdditionExpression = new AdditionExpressionElements();
		this.pMultiplicationExpression = new MultiplicationExpressionElements();
		this.pUnaryExpression = new UnaryExpressionElements();
		this.pUnaryExpressionNotPlusMinus = new UnaryExpressionNotPlusMinusElements();
		this.pNotBooleanExpression = new NotBooleanExpressionElements();
		this.pPrimaryExpression = new PrimaryExpressionElements();
		this.pLiteral = new LiteralElements();
		this.pBooleanLiteral = new BooleanLiteralElements();
		this.tBOOLEAN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.farm.Farm.BOOLEAN");
		this.pRealLiteral = new RealLiteralElements();
		this.pREAL = new REALElements();
		this.pAttribute = new AttributeElements();
		this.pCrop = new CropElements();
		this.pCropStages = new CropStagesElements();
		this.pCropStage = new CropStageElements();
		this.pCropAttributes = new CropAttributesElements();
		this.pField = new FieldElements();
		this.pIP = new IPElements();
		this.pFieldMonitor = new FieldMonitorElements();
		this.pMission = new MissionElements();
		this.pTaskStatement = new TaskStatementElements();
		this.pReturnStatement = new ReturnStatementElements();
		this.pExecuteStatement = new ExecuteStatementElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("uk.ac.kcl.farm.Farm".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//FarmProgram:
	//    statements += (Class | Attribute)+
	//;
	public FarmProgramElements getFarmProgramAccess() {
		return pFarmProgram;
	}
	
	public ParserRule getFarmProgramRule() {
		return getFarmProgramAccess().getRule();
	}
	
	//// General statement
	//Class:
	//    Crop |
	//    Field |
	//    Mission
	//;
	public ClassElements getClassAccess() {
		return pClass;
	}
	
	public ParserRule getClassRule() {
		return getClassAccess().getRule();
	}
	
	//Param:
	//    "crop" param=ID |
	//    "field" param=ID |
	//    "mission" param=ID |
	//    "real" param=ID |
	//    "string" param=ID
	//;
	public ParamElements getParamAccess() {
		return pParam;
	}
	
	public ParserRule getParamRule() {
		return getParamAccess().getRule();
	}
	
	//TypeName:
	//    "null" | "real" | "boolean" | "string"
	//;
	public TypeNameElements getTypeNameAccess() {
		return pTypeName;
	}
	
	public ParserRule getTypeNameRule() {
		return getTypeNameAccess().getRule();
	}
	
	//Statement:
	//    Variable |
	//    LoopStatement |
	//    JudgeStatement |
	//    BuiltinFunction
	//;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//Variable:
	//    "var" name=ID "=" value=Expression
	//;
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}
	
	//LoopStatement:
	//    "while" "(" condition=Expression ")" "{"
	//        statements += Statement*
	//    "}"
	//;
	public LoopStatementElements getLoopStatementAccess() {
		return pLoopStatement;
	}
	
	public ParserRule getLoopStatementRule() {
		return getLoopStatementAccess().getRule();
	}
	
	//JudgeStatement:
	//    "if" "(" condition=Expression ")" "{"
	//        statements += Statement*
	//    "}" elseif += ElseJudgeStatement*
	//    ("else" "{" elseStatement += Statement* "}")?
	//;
	public JudgeStatementElements getJudgeStatementAccess() {
		return pJudgeStatement;
	}
	
	public ParserRule getJudgeStatementRule() {
		return getJudgeStatementAccess().getRule();
	}
	
	//ElseJudgeStatement:
	//    "elseif" "(" condition=Expression ")" "{"
	//        statements += Statement*
	//    "}"
	//;
	public ElseJudgeStatementElements getElseJudgeStatementAccess() {
		return pElseJudgeStatement;
	}
	
	public ParserRule getElseJudgeStatementRule() {
		return getElseJudgeStatementAccess().getRule();
	}
	
	//BuiltinFunction:
	//    ReportFunction |
	//    GetStageFunction |
	//    CountStageFunction |
	//    GetValueFunction |
	//    SetFieldValueFunction |
	//    PlantFunction |
	//    MoveFunction |
	//    WaitFunction
	//;
	public BuiltinFunctionElements getBuiltinFunctionAccess() {
		return pBuiltinFunction;
	}
	
	public ParserRule getBuiltinFunctionRule() {
		return getBuiltinFunctionAccess().getRule();
	}
	
	//Entity:
	//    Crop | Field | Variable
	//;
	public EntityElements getEntityAccess() {
		return pEntity;
	}
	
	public ParserRule getEntityRule() {
		return getEntityAccess().getRule();
	}
	
	//ReportFunction hidden():
	//    entity=[Entity]  ".report(" ")"
	//;
	public ReportFunctionElements getReportFunctionAccess() {
		return pReportFunction;
	}
	
	public ParserRule getReportFunctionRule() {
		return getReportFunctionAccess().getRule();
	}
	
	//GetStageFunction hidden():
	//    getStageCrop=[Crop | ID] ".getStage(" stageNumber=INT ")"
	//;
	public GetStageFunctionElements getGetStageFunctionAccess() {
		return pGetStageFunction;
	}
	
	public ParserRule getGetStageFunctionRule() {
		return getGetStageFunctionAccess().getRule();
	}
	
	//CountStageFunction hidden():
	//    countStageCrop=[Crop | ID] ".countStage(" ")"
	//;
	public CountStageFunctionElements getCountStageFunctionAccess() {
		return pCountStageFunction;
	}
	
	public ParserRule getCountStageFunctionRule() {
		return getCountStageFunctionAccess().getRule();
	}
	
	//GetValueFunction hidden():
	//    entity=[Entity] ".getValue(" attribute=STRING ")"
	//;
	public GetValueFunctionElements getGetValueFunctionAccess() {
		return pGetValueFunction;
	}
	
	public ParserRule getGetValueFunctionRule() {
		return getGetValueFunctionAccess().getRule();
	}
	
	//SetFieldValueFunction hidden():
	//    setValueField=[Field | ID] ".setFieldValue(" setFieldAttribute=STRING "," setFieldValue=AdditionExpression ")"
	//;
	public SetFieldValueFunctionElements getSetFieldValueFunctionAccess() {
		return pSetFieldValueFunction;
	}
	
	public ParserRule getSetFieldValueFunctionRule() {
		return getSetFieldValueFunctionAccess().getRule();
	}
	
	//PlantFunction hidden():
	//    plantInField=[Field | ID] ".plant(" plantCrop=[Crop | ID] ")"
	//;
	public PlantFunctionElements getPlantFunctionAccess() {
		return pPlantFunction;
	}
	
	public ParserRule getPlantFunctionRule() {
		return getPlantFunctionAccess().getRule();
	}
	
	//MoveFunction hidden():
	//    "move(" moveFromField=[Field | ID] ","  moveToField=[Field | ID] ")"
	//;
	public MoveFunctionElements getMoveFunctionAccess() {
		return pMoveFunction;
	}
	
	public ParserRule getMoveFunctionRule() {
		return getMoveFunctionAccess().getRule();
	}
	
	//WaitFunction hidden():
	//    "wait(" value=AdditionExpression ")"
	//;
	public WaitFunctionElements getWaitFunctionAccess() {
		return pWaitFunction;
	}
	
	public ParserRule getWaitFunctionRule() {
		return getWaitFunctionAccess().getRule();
	}
	
	//// MoveStatement:
	////     command=MoveCommand "(" steps=Addition ")"
	//// ;
	//// enum MoveCommand:
	////     forward | backward
	//// ;
	//// TurnStatement:
	////     "turn" command=TurnCommand "by" degrees=REAL "degrees"
	//// ;
	//// enum TurnCommand:
	////     left | right
	//// ;
	////Expressions
	//Expression:
	//    ConditionOrExpression
	//;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//ConditionOrExpression returns Expression:
	//    ConditionAndExpression => (
	//        {ConditionOrExpression.left=current} "||" right=ConditionAndExpression
	//    )*
	//;
	public ConditionOrExpressionElements getConditionOrExpressionAccess() {
		return pConditionOrExpression;
	}
	
	public ParserRule getConditionOrExpressionRule() {
		return getConditionOrExpressionAccess().getRule();
	}
	
	//ConditionAndExpression returns Expression:
	//    RelationOrExpression => (
	//        {ConditionAndExpression.left=current} "&&" right=RelationOrExpression
	//    )*
	//;
	public ConditionAndExpressionElements getConditionAndExpressionAccess() {
		return pConditionAndExpression;
	}
	
	public ParserRule getConditionAndExpressionRule() {
		return getConditionAndExpressionAccess().getRule();
	}
	
	//RelationOrExpression returns Expression:
	//    AdditionExpression ( => (
	//        {LessThanOrEqual.left=current} "<=" |
	//        {LessThan.left=current} "<" |
	//        {GreaterThanOrEqual.left=current} ">=" |
	//        {GreaterThan.left=current} ">" |
	//        {Equal.left=current} "==" |
	//        {NotEqual.left=current} "!="
	//    ) right=AdditionExpression )*
	//;
	public RelationOrExpressionElements getRelationOrExpressionAccess() {
		return pRelationOrExpression;
	}
	
	public ParserRule getRelationOrExpressionRule() {
		return getRelationOrExpressionAccess().getRule();
	}
	
	//AdditionExpression returns Expression:
	//    MultiplicationExpression ( => (
	//        {Plus.left=current} "+" |
	//        {Minus.left=current} "-"
	//    ) right+=MultiplicationExpression )*
	//;
	public AdditionExpressionElements getAdditionExpressionAccess() {
		return pAdditionExpression;
	}
	
	public ParserRule getAdditionExpressionRule() {
		return getAdditionExpressionAccess().getRule();
	}
	
	//MultiplicationExpression returns Expression:
	//    UnaryExpression ( => (
	//        {Multiply.left=current} "*" |
	//        {Divide.left=current} "/"
	//    ) right+=UnaryExpression)*
	//;
	public MultiplicationExpressionElements getMultiplicationExpressionAccess() {
		return pMultiplicationExpression;
	}
	
	public ParserRule getMultiplicationExpressionRule() {
		return getMultiplicationExpressionAccess().getRule();
	}
	
	//UnaryExpression returns Expression:
	//    UnaryExpressionNotPlusMinus |
	//    ({UnaryExpression} "-" exp=UnaryExpression)
	//;
	public UnaryExpressionElements getUnaryExpressionAccess() {
		return pUnaryExpression;
	}
	
	public ParserRule getUnaryExpressionRule() {
		return getUnaryExpressionAccess().getRule();
	}
	
	//UnaryExpressionNotPlusMinus returns Expression:
	//    NotBooleanExpression | PrimaryExpression
	//;
	public UnaryExpressionNotPlusMinusElements getUnaryExpressionNotPlusMinusAccess() {
		return pUnaryExpressionNotPlusMinus;
	}
	
	public ParserRule getUnaryExpressionNotPlusMinusRule() {
		return getUnaryExpressionNotPlusMinusAccess().getRule();
	}
	
	//NotBooleanExpression returns Expression:
	//    "!" exp=UnaryExpression
	//;
	public NotBooleanExpressionElements getNotBooleanExpressionAccess() {
		return pNotBooleanExpression;
	}
	
	public ParserRule getNotBooleanExpressionRule() {
		return getNotBooleanExpressionAccess().getRule();
	}
	
	//PrimaryExpression returns Expression:
	//    Literal |
	//    var=[Variable | ID] |
	//    "(" Expression ")"
	//;
	public PrimaryExpressionElements getPrimaryExpressionAccess() {
		return pPrimaryExpression;
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}
	
	//Literal:
	//    BooleanLiteral | RealLiteral
	//;
	public LiteralElements getLiteralAccess() {
		return pLiteral;
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}
	
	//BooleanLiteral:
	//    {BoolLiteral} val=BOOLEAN
	//;
	public BooleanLiteralElements getBooleanLiteralAccess() {
		return pBooleanLiteral;
	}
	
	public ParserRule getBooleanLiteralRule() {
		return getBooleanLiteralAccess().getRule();
	}
	
	//terminal BOOLEAN returns ecore::EBoolean:
	//    "true" | "false"
	//;
	public TerminalRule getBOOLEANRule() {
		return tBOOLEAN;
	}
	
	//RealLiteral:
	//    {RealLiteral} val=REAL
	//;
	public RealLiteralElements getRealLiteralAccess() {
		return pRealLiteral;
	}
	
	public ParserRule getRealLiteralRule() {
		return getRealLiteralAccess().getRule();
	}
	
	//REAL returns ecore::EFloat hidden():
	//    INT? "." INT
	//;
	public REALElements getREALAccess() {
		return pREAL;
	}
	
	public ParserRule getREALRule() {
		return getREALAccess().getRule();
	}
	
	//// Define codes
	//Attribute:
	//    "define" name=ID
	//;
	public AttributeElements getAttributeAccess() {
		return pAttribute;
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}
	
	//// Crop code block
	//Crop:
	//    "crop" name=ID "{"
	//        "name" ":" cropName=STRING
	//        "stage" ":" "["
	//            statements += CropStages
	//        "]"
	//    "}"
	//;
	public CropElements getCropAccess() {
		return pCrop;
	}
	
	public ParserRule getCropRule() {
		return getCropAccess().getRule();
	}
	
	//CropStages:
	//    elements += CropStage ("," elements += CropStage)*
	//;
	public CropStagesElements getCropStagesAccess() {
		return pCropStages;
	}
	
	public ParserRule getCropStagesRule() {
		return getCropStagesAccess().getRule();
	}
	
	//CropStage:
	//    "{"
	//        "name" ":" name=STRING
	//        "timeConsumed" ":" timeConsumend=Expression
	//        elements += CropAttributes*
	//    "}"
	//;
	public CropStageElements getCropStageAccess() {
		return pCropStage;
	}
	
	public ParserRule getCropStageRule() {
		return getCropStageAccess().getRule();
	}
	
	//CropAttributes:
	//    type=[Attribute | ID] ":" value=Expression
	//;
	public CropAttributesElements getCropAttributesAccess() {
		return pCropAttributes;
	}
	
	public ParserRule getCropAttributesRule() {
		return getCropAttributesAccess().getRule();
	}
	
	//// Field code block
	//Field:
	//    "field" name=ID "{"
	//        "name" ":" fieldName=STRING
	//        "ip" ":" ip=IP
	//        "type" ":" fieldType=("inside" | "outside")
	//        "light" ":" fieldLight=("sunlight" | "LED")
	//        "monitor" ":" "[" fieldMonitors+=FieldMonitor ("," fieldMonitors+=FieldMonitor)* "]"
	//    "}"
	//;
	public FieldElements getFieldAccess() {
		return pField;
	}
	
	public ParserRule getFieldRule() {
		return getFieldAccess().getRule();
	}
	
	//IP hidden():
	//    (INT '.' (INT '.' (INT '.' (INT))))
	//;
	public IPElements getIPAccess() {
		return pIP;
	}
	
	public ParserRule getIPRule() {
		return getIPAccess().getRule();
	}
	
	//FieldMonitor:
	//    monitor=[Attribute | ID]
	//;
	public FieldMonitorElements getFieldMonitorAccess() {
		return pFieldMonitor;
	}
	
	public ParserRule getFieldMonitorRule() {
		return getFieldMonitorAccess().getRule();
	}
	
	//// Main code block
	//Mission:
	//    "mission" name=ID "{"
	//        statements += (TaskStatement | ExecuteStatement)+
	//    "}"
	//;
	public MissionElements getMissionAccess() {
		return pMission;
	}
	
	public ParserRule getMissionRule() {
		return getMissionAccess().getRule();
	}
	
	//// Task code block
	//TaskStatement:
	//    "task" name=ID "(" (parmas+=Param ("," parmas+=Param)*)? ")" ":" typeName=TypeName "{"
	//        statements += (Statement | ReturnStatement)*
	//    "}"
	//;
	public TaskStatementElements getTaskStatementAccess() {
		return pTaskStatement;
	}
	
	public ParserRule getTaskStatementRule() {
		return getTaskStatementAccess().getRule();
	}
	
	//ReturnStatement:
	//    "return" "(" value=Expression ")"
	//;
	public ReturnStatementElements getReturnStatementAccess() {
		return pReturnStatement;
	}
	
	public ParserRule getReturnStatementRule() {
		return getReturnStatementAccess().getRule();
	}
	
	//ExecuteStatement:
	//    "execute" "{"
	//        statements += Statement*
	//    "}"
	//;
	public ExecuteStatementElements getExecuteStatementAccess() {
		return pExecuteStatement;
	}
	
	public ParserRule getExecuteStatementRule() {
		return getExecuteStatementAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
