/**
 * generated by Xtext 2.26.0
 */
package uk.ac.kcl.farm.farm.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import uk.ac.kcl.farm.farm.Crop;
import uk.ac.kcl.farm.farm.CropStages;
import uk.ac.kcl.farm.farm.FarmPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Crop</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link uk.ac.kcl.farm.farm.impl.CropImpl#getCropName <em>Crop Name</em>}</li>
 *   <li>{@link uk.ac.kcl.farm.farm.impl.CropImpl#getCropStages <em>Crop Stages</em>}</li>
 * </ul>
 *
 * @generated
 */
public class CropImpl extends InstanceImpl implements Crop
{
  /**
   * The default value of the '{@link #getCropName() <em>Crop Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCropName()
   * @generated
   * @ordered
   */
  protected static final String CROP_NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getCropName() <em>Crop Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCropName()
   * @generated
   * @ordered
   */
  protected String cropName = CROP_NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getCropStages() <em>Crop Stages</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCropStages()
   * @generated
   * @ordered
   */
  protected EList<CropStages> cropStages;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CropImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return FarmPackage.Literals.CROP;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getCropName()
  {
    return cropName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setCropName(String newCropName)
  {
    String oldCropName = cropName;
    cropName = newCropName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, FarmPackage.CROP__CROP_NAME, oldCropName, cropName));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<CropStages> getCropStages()
  {
    if (cropStages == null)
    {
      cropStages = new EObjectContainmentEList<CropStages>(CropStages.class, this, FarmPackage.CROP__CROP_STAGES);
    }
    return cropStages;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case FarmPackage.CROP__CROP_STAGES:
        return ((InternalEList<?>)getCropStages()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case FarmPackage.CROP__CROP_NAME:
        return getCropName();
      case FarmPackage.CROP__CROP_STAGES:
        return getCropStages();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case FarmPackage.CROP__CROP_NAME:
        setCropName((String)newValue);
        return;
      case FarmPackage.CROP__CROP_STAGES:
        getCropStages().clear();
        getCropStages().addAll((Collection<? extends CropStages>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case FarmPackage.CROP__CROP_NAME:
        setCropName(CROP_NAME_EDEFAULT);
        return;
      case FarmPackage.CROP__CROP_STAGES:
        getCropStages().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case FarmPackage.CROP__CROP_NAME:
        return CROP_NAME_EDEFAULT == null ? cropName != null : !CROP_NAME_EDEFAULT.equals(cropName);
      case FarmPackage.CROP__CROP_STAGES:
        return cropStages != null && !cropStages.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (cropName: ");
    result.append(cropName);
    result.append(')');
    return result.toString();
  }

} //CropImpl
