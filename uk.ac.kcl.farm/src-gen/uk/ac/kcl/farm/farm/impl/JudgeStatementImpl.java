/**
 * generated by Xtext 2.26.0
 */
package uk.ac.kcl.farm.farm.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import uk.ac.kcl.farm.farm.ElseJudgeStatement;
import uk.ac.kcl.farm.farm.ElseStatement;
import uk.ac.kcl.farm.farm.Expression;
import uk.ac.kcl.farm.farm.FarmPackage;
import uk.ac.kcl.farm.farm.JudgeStatement;
import uk.ac.kcl.farm.farm.Statement;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Judge Statement</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link uk.ac.kcl.farm.farm.impl.JudgeStatementImpl#getCondition <em>Condition</em>}</li>
 *   <li>{@link uk.ac.kcl.farm.farm.impl.JudgeStatementImpl#getJudgeStatements <em>Judge Statements</em>}</li>
 *   <li>{@link uk.ac.kcl.farm.farm.impl.JudgeStatementImpl#getElseJudgeStatements <em>Else Judge Statements</em>}</li>
 *   <li>{@link uk.ac.kcl.farm.farm.impl.JudgeStatementImpl#getElseStatement <em>Else Statement</em>}</li>
 * </ul>
 *
 * @generated
 */
public class JudgeStatementImpl extends StatementImpl implements JudgeStatement
{
  /**
   * The cached value of the '{@link #getCondition() <em>Condition</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCondition()
   * @generated
   * @ordered
   */
  protected Expression condition;

  /**
   * The cached value of the '{@link #getJudgeStatements() <em>Judge Statements</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getJudgeStatements()
   * @generated
   * @ordered
   */
  protected EList<Statement> judgeStatements;

  /**
   * The cached value of the '{@link #getElseJudgeStatements() <em>Else Judge Statements</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getElseJudgeStatements()
   * @generated
   * @ordered
   */
  protected EList<ElseJudgeStatement> elseJudgeStatements;

  /**
   * The cached value of the '{@link #getElseStatement() <em>Else Statement</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getElseStatement()
   * @generated
   * @ordered
   */
  protected EList<ElseStatement> elseStatement;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected JudgeStatementImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return FarmPackage.Literals.JUDGE_STATEMENT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression getCondition()
  {
    return condition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetCondition(Expression newCondition, NotificationChain msgs)
  {
    Expression oldCondition = condition;
    condition = newCondition;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, FarmPackage.JUDGE_STATEMENT__CONDITION, oldCondition, newCondition);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setCondition(Expression newCondition)
  {
    if (newCondition != condition)
    {
      NotificationChain msgs = null;
      if (condition != null)
        msgs = ((InternalEObject)condition).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - FarmPackage.JUDGE_STATEMENT__CONDITION, null, msgs);
      if (newCondition != null)
        msgs = ((InternalEObject)newCondition).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - FarmPackage.JUDGE_STATEMENT__CONDITION, null, msgs);
      msgs = basicSetCondition(newCondition, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, FarmPackage.JUDGE_STATEMENT__CONDITION, newCondition, newCondition));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Statement> getJudgeStatements()
  {
    if (judgeStatements == null)
    {
      judgeStatements = new EObjectContainmentEList<Statement>(Statement.class, this, FarmPackage.JUDGE_STATEMENT__JUDGE_STATEMENTS);
    }
    return judgeStatements;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ElseJudgeStatement> getElseJudgeStatements()
  {
    if (elseJudgeStatements == null)
    {
      elseJudgeStatements = new EObjectContainmentEList<ElseJudgeStatement>(ElseJudgeStatement.class, this, FarmPackage.JUDGE_STATEMENT__ELSE_JUDGE_STATEMENTS);
    }
    return elseJudgeStatements;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ElseStatement> getElseStatement()
  {
    if (elseStatement == null)
    {
      elseStatement = new EObjectContainmentEList<ElseStatement>(ElseStatement.class, this, FarmPackage.JUDGE_STATEMENT__ELSE_STATEMENT);
    }
    return elseStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case FarmPackage.JUDGE_STATEMENT__CONDITION:
        return basicSetCondition(null, msgs);
      case FarmPackage.JUDGE_STATEMENT__JUDGE_STATEMENTS:
        return ((InternalEList<?>)getJudgeStatements()).basicRemove(otherEnd, msgs);
      case FarmPackage.JUDGE_STATEMENT__ELSE_JUDGE_STATEMENTS:
        return ((InternalEList<?>)getElseJudgeStatements()).basicRemove(otherEnd, msgs);
      case FarmPackage.JUDGE_STATEMENT__ELSE_STATEMENT:
        return ((InternalEList<?>)getElseStatement()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case FarmPackage.JUDGE_STATEMENT__CONDITION:
        return getCondition();
      case FarmPackage.JUDGE_STATEMENT__JUDGE_STATEMENTS:
        return getJudgeStatements();
      case FarmPackage.JUDGE_STATEMENT__ELSE_JUDGE_STATEMENTS:
        return getElseJudgeStatements();
      case FarmPackage.JUDGE_STATEMENT__ELSE_STATEMENT:
        return getElseStatement();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case FarmPackage.JUDGE_STATEMENT__CONDITION:
        setCondition((Expression)newValue);
        return;
      case FarmPackage.JUDGE_STATEMENT__JUDGE_STATEMENTS:
        getJudgeStatements().clear();
        getJudgeStatements().addAll((Collection<? extends Statement>)newValue);
        return;
      case FarmPackage.JUDGE_STATEMENT__ELSE_JUDGE_STATEMENTS:
        getElseJudgeStatements().clear();
        getElseJudgeStatements().addAll((Collection<? extends ElseJudgeStatement>)newValue);
        return;
      case FarmPackage.JUDGE_STATEMENT__ELSE_STATEMENT:
        getElseStatement().clear();
        getElseStatement().addAll((Collection<? extends ElseStatement>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case FarmPackage.JUDGE_STATEMENT__CONDITION:
        setCondition((Expression)null);
        return;
      case FarmPackage.JUDGE_STATEMENT__JUDGE_STATEMENTS:
        getJudgeStatements().clear();
        return;
      case FarmPackage.JUDGE_STATEMENT__ELSE_JUDGE_STATEMENTS:
        getElseJudgeStatements().clear();
        return;
      case FarmPackage.JUDGE_STATEMENT__ELSE_STATEMENT:
        getElseStatement().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case FarmPackage.JUDGE_STATEMENT__CONDITION:
        return condition != null;
      case FarmPackage.JUDGE_STATEMENT__JUDGE_STATEMENTS:
        return judgeStatements != null && !judgeStatements.isEmpty();
      case FarmPackage.JUDGE_STATEMENT__ELSE_JUDGE_STATEMENTS:
        return elseJudgeStatements != null && !elseJudgeStatements.isEmpty();
      case FarmPackage.JUDGE_STATEMENT__ELSE_STATEMENT:
        return elseStatement != null && !elseStatement.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //JudgeStatementImpl
