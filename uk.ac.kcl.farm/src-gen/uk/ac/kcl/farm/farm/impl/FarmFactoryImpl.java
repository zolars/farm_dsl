/**
 * generated by Xtext 2.26.0
 */
package uk.ac.kcl.farm.farm.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import uk.ac.kcl.farm.farm.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class FarmFactoryImpl extends EFactoryImpl implements FarmFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static FarmFactory init()
  {
    try
    {
      FarmFactory theFarmFactory = (FarmFactory)EPackage.Registry.INSTANCE.getEFactory(FarmPackage.eNS_URI);
      if (theFarmFactory != null)
      {
        return theFarmFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new FarmFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FarmFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case FarmPackage.FARM_PROGRAM: return createFarmProgram();
      case FarmPackage.STATEMENT: return createStatement();
      case FarmPackage.ATTRIBUTE: return createAttribute();
      case FarmPackage.EXPRESSION_OR_CALL: return createExpressionOrCall();
      case FarmPackage.VARIABLE: return createVariable();
      case FarmPackage.VAR_EXPRESSION: return createVarExpression();
      case FarmPackage.ASSIGNMENT: return createAssignment();
      case FarmPackage.CALL: return createCall();
      case FarmPackage.LOOP_STATEMENT: return createLoopStatement();
      case FarmPackage.JUDGE_STATEMENT: return createJudgeStatement();
      case FarmPackage.ELSE_JUDGE_STATEMENT: return createElseJudgeStatement();
      case FarmPackage.ELSE_STATEMENT: return createElseStatement();
      case FarmPackage.BUILTIN_FUNCTION: return createBuiltinFunction();
      case FarmPackage.INSTANCE: return createInstance();
      case FarmPackage.REPORT_FUNCTION: return createReportFunction();
      case FarmPackage.MOVE_FUNCTION: return createMoveFunction();
      case FarmPackage.WAIT_FUNCTION: return createWaitFunction();
      case FarmPackage.HARVEST_FUNCTION: return createHarvestFunction();
      case FarmPackage.CALL_FUNCTION: return createCallFunction();
      case FarmPackage.GET_STAGE_FUNCTION: return createGetStageFunction();
      case FarmPackage.FIELD_SET_FUNCTION: return createFieldSetFunction();
      case FarmPackage.PLANT_FUNCTION: return createPlantFunction();
      case FarmPackage.IS_EMPTY_FUNCTION: return createIsEmptyFunction();
      case FarmPackage.EXPRESSION: return createExpression();
      case FarmPackage.NOT_BOOLEAN_EXPRESSION: return createNotBooleanExpression();
      case FarmPackage.LITERAL: return createLiteral();
      case FarmPackage.TRUE_LITERAL: return createTrueLiteral();
      case FarmPackage.FALSE_LITERAL: return createFalseLiteral();
      case FarmPackage.REAL_LITERAL: return createRealLiteral();
      case FarmPackage.CROP: return createCrop();
      case FarmPackage.CROP_STAGES: return createCropStages();
      case FarmPackage.CROP_STAGE: return createCropStage();
      case FarmPackage.FIELD: return createField();
      case FarmPackage.CALL_ATTRIBUTES: return createCallAttributes();
      case FarmPackage.MISSION: return createMission();
      case FarmPackage.CONDITION_OR_EXPRESSION: return createConditionOrExpression();
      case FarmPackage.CONDITION_AND_EXPRESSION: return createConditionAndExpression();
      case FarmPackage.LESS_THAN_OR_EQUAL: return createLessThanOrEqual();
      case FarmPackage.LESS_THAN: return createLessThan();
      case FarmPackage.GREATER_THAN_OR_EQUAL: return createGreaterThanOrEqual();
      case FarmPackage.GREATER_THAN: return createGreaterThan();
      case FarmPackage.EQUAL: return createEqual();
      case FarmPackage.NOT_EQUAL: return createNotEqual();
      case FarmPackage.PLUS: return createPlus();
      case FarmPackage.MINUS: return createMinus();
      case FarmPackage.MULTIPLY: return createMultiply();
      case FarmPackage.DIVIDE: return createDivide();
      case FarmPackage.UNARY_EXPRESSION: return createUnaryExpression();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FarmProgram createFarmProgram()
  {
    FarmProgramImpl farmProgram = new FarmProgramImpl();
    return farmProgram;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Statement createStatement()
  {
    StatementImpl statement = new StatementImpl();
    return statement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Attribute createAttribute()
  {
    AttributeImpl attribute = new AttributeImpl();
    return attribute;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExpressionOrCall createExpressionOrCall()
  {
    ExpressionOrCallImpl expressionOrCall = new ExpressionOrCallImpl();
    return expressionOrCall;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Variable createVariable()
  {
    VariableImpl variable = new VariableImpl();
    return variable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VarExpression createVarExpression()
  {
    VarExpressionImpl varExpression = new VarExpressionImpl();
    return varExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Assignment createAssignment()
  {
    AssignmentImpl assignment = new AssignmentImpl();
    return assignment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Call createCall()
  {
    CallImpl call = new CallImpl();
    return call;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LoopStatement createLoopStatement()
  {
    LoopStatementImpl loopStatement = new LoopStatementImpl();
    return loopStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public JudgeStatement createJudgeStatement()
  {
    JudgeStatementImpl judgeStatement = new JudgeStatementImpl();
    return judgeStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ElseJudgeStatement createElseJudgeStatement()
  {
    ElseJudgeStatementImpl elseJudgeStatement = new ElseJudgeStatementImpl();
    return elseJudgeStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ElseStatement createElseStatement()
  {
    ElseStatementImpl elseStatement = new ElseStatementImpl();
    return elseStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BuiltinFunction createBuiltinFunction()
  {
    BuiltinFunctionImpl builtinFunction = new BuiltinFunctionImpl();
    return builtinFunction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Instance createInstance()
  {
    InstanceImpl instance = new InstanceImpl();
    return instance;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ReportFunction createReportFunction()
  {
    ReportFunctionImpl reportFunction = new ReportFunctionImpl();
    return reportFunction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MoveFunction createMoveFunction()
  {
    MoveFunctionImpl moveFunction = new MoveFunctionImpl();
    return moveFunction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public WaitFunction createWaitFunction()
  {
    WaitFunctionImpl waitFunction = new WaitFunctionImpl();
    return waitFunction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public HarvestFunction createHarvestFunction()
  {
    HarvestFunctionImpl harvestFunction = new HarvestFunctionImpl();
    return harvestFunction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CallFunction createCallFunction()
  {
    CallFunctionImpl callFunction = new CallFunctionImpl();
    return callFunction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public GetStageFunction createGetStageFunction()
  {
    GetStageFunctionImpl getStageFunction = new GetStageFunctionImpl();
    return getStageFunction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FieldSetFunction createFieldSetFunction()
  {
    FieldSetFunctionImpl fieldSetFunction = new FieldSetFunctionImpl();
    return fieldSetFunction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PlantFunction createPlantFunction()
  {
    PlantFunctionImpl plantFunction = new PlantFunctionImpl();
    return plantFunction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IsEmptyFunction createIsEmptyFunction()
  {
    IsEmptyFunctionImpl isEmptyFunction = new IsEmptyFunctionImpl();
    return isEmptyFunction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression createExpression()
  {
    ExpressionImpl expression = new ExpressionImpl();
    return expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotBooleanExpression createNotBooleanExpression()
  {
    NotBooleanExpressionImpl notBooleanExpression = new NotBooleanExpressionImpl();
    return notBooleanExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Literal createLiteral()
  {
    LiteralImpl literal = new LiteralImpl();
    return literal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TrueLiteral createTrueLiteral()
  {
    TrueLiteralImpl trueLiteral = new TrueLiteralImpl();
    return trueLiteral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FalseLiteral createFalseLiteral()
  {
    FalseLiteralImpl falseLiteral = new FalseLiteralImpl();
    return falseLiteral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RealLiteral createRealLiteral()
  {
    RealLiteralImpl realLiteral = new RealLiteralImpl();
    return realLiteral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Crop createCrop()
  {
    CropImpl crop = new CropImpl();
    return crop;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CropStages createCropStages()
  {
    CropStagesImpl cropStages = new CropStagesImpl();
    return cropStages;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CropStage createCropStage()
  {
    CropStageImpl cropStage = new CropStageImpl();
    return cropStage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Field createField()
  {
    FieldImpl field = new FieldImpl();
    return field;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CallAttributes createCallAttributes()
  {
    CallAttributesImpl callAttributes = new CallAttributesImpl();
    return callAttributes;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Mission createMission()
  {
    MissionImpl mission = new MissionImpl();
    return mission;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConditionOrExpression createConditionOrExpression()
  {
    ConditionOrExpressionImpl conditionOrExpression = new ConditionOrExpressionImpl();
    return conditionOrExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConditionAndExpression createConditionAndExpression()
  {
    ConditionAndExpressionImpl conditionAndExpression = new ConditionAndExpressionImpl();
    return conditionAndExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LessThanOrEqual createLessThanOrEqual()
  {
    LessThanOrEqualImpl lessThanOrEqual = new LessThanOrEqualImpl();
    return lessThanOrEqual;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LessThan createLessThan()
  {
    LessThanImpl lessThan = new LessThanImpl();
    return lessThan;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public GreaterThanOrEqual createGreaterThanOrEqual()
  {
    GreaterThanOrEqualImpl greaterThanOrEqual = new GreaterThanOrEqualImpl();
    return greaterThanOrEqual;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public GreaterThan createGreaterThan()
  {
    GreaterThanImpl greaterThan = new GreaterThanImpl();
    return greaterThan;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Equal createEqual()
  {
    EqualImpl equal = new EqualImpl();
    return equal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotEqual createNotEqual()
  {
    NotEqualImpl notEqual = new NotEqualImpl();
    return notEqual;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Plus createPlus()
  {
    PlusImpl plus = new PlusImpl();
    return plus;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Minus createMinus()
  {
    MinusImpl minus = new MinusImpl();
    return minus;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Multiply createMultiply()
  {
    MultiplyImpl multiply = new MultiplyImpl();
    return multiply;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Divide createDivide()
  {
    DivideImpl divide = new DivideImpl();
    return divide;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public UnaryExpression createUnaryExpression()
  {
    UnaryExpressionImpl unaryExpression = new UnaryExpressionImpl();
    return unaryExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FarmPackage getFarmPackage()
  {
    return (FarmPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static FarmPackage getPackage()
  {
    return FarmPackage.eINSTANCE;
  }

} //FarmFactoryImpl
