/**
 * generated by Xtext 2.26.0
 */
package uk.ac.kcl.farm.farm.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import uk.ac.kcl.farm.farm.Addition;
import uk.ac.kcl.farm.farm.AndExpression;
import uk.ac.kcl.farm.farm.AttributeDeclaration;
import uk.ac.kcl.farm.farm.BooleanLiteral;
import uk.ac.kcl.farm.farm.BooleanVarExpression;
import uk.ac.kcl.farm.farm.ComparisonExpression;
import uk.ac.kcl.farm.farm.ConditionExpression;
import uk.ac.kcl.farm.farm.Crop;
import uk.ac.kcl.farm.farm.CropAttributes;
import uk.ac.kcl.farm.farm.CropStage;
import uk.ac.kcl.farm.farm.CropStages;
import uk.ac.kcl.farm.farm.FarmFactory;
import uk.ac.kcl.farm.farm.FarmPackage;
import uk.ac.kcl.farm.farm.FarmProgram;
import uk.ac.kcl.farm.farm.Field;
import uk.ac.kcl.farm.farm.LoopStatement;
import uk.ac.kcl.farm.farm.Machine;
import uk.ac.kcl.farm.farm.Mission;
import uk.ac.kcl.farm.farm.Multiplication;
import uk.ac.kcl.farm.farm.OrExpression;
import uk.ac.kcl.farm.farm.Param;
import uk.ac.kcl.farm.farm.RealExpression;
import uk.ac.kcl.farm.farm.RealLiteral;
import uk.ac.kcl.farm.farm.RealVarExpression;
import uk.ac.kcl.farm.farm.Statement;
import uk.ac.kcl.farm.farm.Task;
import uk.ac.kcl.farm.farm.VariableDeclaration;
import uk.ac.kcl.farm.farm.VariableExpression;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class FarmFactoryImpl extends EFactoryImpl implements FarmFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static FarmFactory init()
  {
    try
    {
      FarmFactory theFarmFactory = (FarmFactory)EPackage.Registry.INSTANCE.getEFactory(FarmPackage.eNS_URI);
      if (theFarmFactory != null)
      {
        return theFarmFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new FarmFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FarmFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case FarmPackage.FARM_PROGRAM: return createFarmProgram();
      case FarmPackage.CLASS: return createClass();
      case FarmPackage.PARAM: return createParam();
      case FarmPackage.STATEMENT: return createStatement();
      case FarmPackage.VARIABLE_DECLARATION: return createVariableDeclaration();
      case FarmPackage.VARIABLE_EXPRESSION: return createVariableExpression();
      case FarmPackage.LOOP_STATEMENT: return createLoopStatement();
      case FarmPackage.REAL_EXPRESSION: return createRealExpression();
      case FarmPackage.REAL_LITERAL: return createRealLiteral();
      case FarmPackage.REAL_VAR_EXPRESSION: return createRealVarExpression();
      case FarmPackage.CONDITION_EXPRESSION: return createConditionExpression();
      case FarmPackage.BOOLEAN_LITERAL: return createBooleanLiteral();
      case FarmPackage.BOOLEAN_VAR_EXPRESSION: return createBooleanVarExpression();
      case FarmPackage.ATTRIBUTE_DECLARATION: return createAttributeDeclaration();
      case FarmPackage.CROP: return createCrop();
      case FarmPackage.CROP_STAGES: return createCropStages();
      case FarmPackage.CROP_STAGE: return createCropStage();
      case FarmPackage.CROP_ATTRIBUTES: return createCropAttributes();
      case FarmPackage.MACHINE: return createMachine();
      case FarmPackage.FIELD: return createField();
      case FarmPackage.MISSION: return createMission();
      case FarmPackage.TASK: return createTask();
      case FarmPackage.ADDITION: return createAddition();
      case FarmPackage.MULTIPLICATION: return createMultiplication();
      case FarmPackage.OR_EXPRESSION: return createOrExpression();
      case FarmPackage.AND_EXPRESSION: return createAndExpression();
      case FarmPackage.COMPARISON_EXPRESSION: return createComparisonExpression();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FarmProgram createFarmProgram()
  {
    FarmProgramImpl farmProgram = new FarmProgramImpl();
    return farmProgram;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public uk.ac.kcl.farm.farm.Class createClass()
  {
    ClassImpl class_ = new ClassImpl();
    return class_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Param createParam()
  {
    ParamImpl param = new ParamImpl();
    return param;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Statement createStatement()
  {
    StatementImpl statement = new StatementImpl();
    return statement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VariableDeclaration createVariableDeclaration()
  {
    VariableDeclarationImpl variableDeclaration = new VariableDeclarationImpl();
    return variableDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VariableExpression createVariableExpression()
  {
    VariableExpressionImpl variableExpression = new VariableExpressionImpl();
    return variableExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LoopStatement createLoopStatement()
  {
    LoopStatementImpl loopStatement = new LoopStatementImpl();
    return loopStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RealExpression createRealExpression()
  {
    RealExpressionImpl realExpression = new RealExpressionImpl();
    return realExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RealLiteral createRealLiteral()
  {
    RealLiteralImpl realLiteral = new RealLiteralImpl();
    return realLiteral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RealVarExpression createRealVarExpression()
  {
    RealVarExpressionImpl realVarExpression = new RealVarExpressionImpl();
    return realVarExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConditionExpression createConditionExpression()
  {
    ConditionExpressionImpl conditionExpression = new ConditionExpressionImpl();
    return conditionExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BooleanLiteral createBooleanLiteral()
  {
    BooleanLiteralImpl booleanLiteral = new BooleanLiteralImpl();
    return booleanLiteral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BooleanVarExpression createBooleanVarExpression()
  {
    BooleanVarExpressionImpl booleanVarExpression = new BooleanVarExpressionImpl();
    return booleanVarExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AttributeDeclaration createAttributeDeclaration()
  {
    AttributeDeclarationImpl attributeDeclaration = new AttributeDeclarationImpl();
    return attributeDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Crop createCrop()
  {
    CropImpl crop = new CropImpl();
    return crop;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CropStages createCropStages()
  {
    CropStagesImpl cropStages = new CropStagesImpl();
    return cropStages;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CropStage createCropStage()
  {
    CropStageImpl cropStage = new CropStageImpl();
    return cropStage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CropAttributes createCropAttributes()
  {
    CropAttributesImpl cropAttributes = new CropAttributesImpl();
    return cropAttributes;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Machine createMachine()
  {
    MachineImpl machine = new MachineImpl();
    return machine;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Field createField()
  {
    FieldImpl field = new FieldImpl();
    return field;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Mission createMission()
  {
    MissionImpl mission = new MissionImpl();
    return mission;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Task createTask()
  {
    TaskImpl task = new TaskImpl();
    return task;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Addition createAddition()
  {
    AdditionImpl addition = new AdditionImpl();
    return addition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Multiplication createMultiplication()
  {
    MultiplicationImpl multiplication = new MultiplicationImpl();
    return multiplication;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OrExpression createOrExpression()
  {
    OrExpressionImpl orExpression = new OrExpressionImpl();
    return orExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AndExpression createAndExpression()
  {
    AndExpressionImpl andExpression = new AndExpressionImpl();
    return andExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ComparisonExpression createComparisonExpression()
  {
    ComparisonExpressionImpl comparisonExpression = new ComparisonExpressionImpl();
    return comparisonExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FarmPackage getFarmPackage()
  {
    return (FarmPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static FarmPackage getPackage()
  {
    return FarmPackage.eINSTANCE;
  }

} //FarmFactoryImpl
