/*
 * generated by Xtext 2.26.0
 */
grammar InternalFarm;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package uk.ac.kcl.farm.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package uk.ac.kcl.farm.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import uk.ac.kcl.farm.services.FarmGrammarAccess;

}

@parser::members {

 	private FarmGrammarAccess grammarAccess;

    public InternalFarmParser(TokenStream input, FarmGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "FarmProgram";
   	}

   	@Override
   	protected FarmGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleFarmProgram
entryRuleFarmProgram returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFarmProgramRule()); }
	iv_ruleFarmProgram=ruleFarmProgram
	{ $current=$iv_ruleFarmProgram.current; }
	EOF;

// Rule FarmProgram
ruleFarmProgram returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getFarmProgramAccess().getStatementsClassParserRuleCall_0_0());
				}
				lv_statements_0_1=ruleClass
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFarmProgramRule());
					}
					add(
						$current,
						"statements",
						lv_statements_0_1,
						"uk.ac.kcl.farm.Farm.Class");
					afterParserOrEnumRuleCall();
				}
				    |
				{
					newCompositeNode(grammarAccess.getFarmProgramAccess().getStatementsAttributeDeclarationParserRuleCall_0_1());
				}
				lv_statements_0_2=ruleAttributeDeclaration
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFarmProgramRule());
					}
					add(
						$current,
						"statements",
						lv_statements_0_2,
						"uk.ac.kcl.farm.Farm.AttributeDeclaration");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)*
;

// Entry rule entryRuleClass
entryRuleClass returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getClassRule()); }
	iv_ruleClass=ruleClass
	{ $current=$iv_ruleClass.current; }
	EOF;

// Rule Class
ruleClass returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getClassAccess().getCropParserRuleCall_0());
		}
		this_Crop_0=ruleCrop
		{
			$current = $this_Crop_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getClassAccess().getMachineParserRuleCall_1());
		}
		this_Machine_1=ruleMachine
		{
			$current = $this_Machine_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getClassAccess().getFieldParserRuleCall_2());
		}
		this_Field_2=ruleField
		{
			$current = $this_Field_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getClassAccess().getMissionParserRuleCall_3());
		}
		this_Mission_3=ruleMission
		{
			$current = $this_Mission_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleParam
entryRuleParam returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParamRule()); }
	iv_ruleParam=ruleParam
	{ $current=$iv_ruleParam.current; }
	EOF;

// Rule Param
ruleParam returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='crop'
			{
				newLeafNode(otherlv_0, grammarAccess.getParamAccess().getCropKeyword_0_0());
			}
			(
				(
					lv_param_1_0=RULE_ID
					{
						newLeafNode(lv_param_1_0, grammarAccess.getParamAccess().getParamIDTerminalRuleCall_0_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getParamRule());
						}
						setWithLastConsumed(
							$current,
							"param",
							lv_param_1_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
		)
		    |
		(
			otherlv_2='machine'
			{
				newLeafNode(otherlv_2, grammarAccess.getParamAccess().getMachineKeyword_1_0());
			}
			(
				(
					lv_param_3_0=RULE_ID
					{
						newLeafNode(lv_param_3_0, grammarAccess.getParamAccess().getParamIDTerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getParamRule());
						}
						setWithLastConsumed(
							$current,
							"param",
							lv_param_3_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
		)
		    |
		(
			otherlv_4='field'
			{
				newLeafNode(otherlv_4, grammarAccess.getParamAccess().getFieldKeyword_2_0());
			}
			(
				(
					lv_param_5_0=RULE_ID
					{
						newLeafNode(lv_param_5_0, grammarAccess.getParamAccess().getParamIDTerminalRuleCall_2_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getParamRule());
						}
						setWithLastConsumed(
							$current,
							"param",
							lv_param_5_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
		)
		    |
		(
			otherlv_6='mission'
			{
				newLeafNode(otherlv_6, grammarAccess.getParamAccess().getMissionKeyword_3_0());
			}
			(
				(
					lv_param_7_0=RULE_ID
					{
						newLeafNode(lv_param_7_0, grammarAccess.getParamAccess().getParamIDTerminalRuleCall_3_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getParamRule());
						}
						setWithLastConsumed(
							$current,
							"param",
							lv_param_7_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
		)
		    |
		(
			otherlv_8='real'
			{
				newLeafNode(otherlv_8, grammarAccess.getParamAccess().getRealKeyword_4_0());
			}
			(
				(
					lv_param_9_0=RULE_ID
					{
						newLeafNode(lv_param_9_0, grammarAccess.getParamAccess().getParamIDTerminalRuleCall_4_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getParamRule());
						}
						setWithLastConsumed(
							$current,
							"param",
							lv_param_9_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
		)
		    |
		(
			otherlv_10='string'
			{
				newLeafNode(otherlv_10, grammarAccess.getParamAccess().getStringKeyword_5_0());
			}
			(
				(
					lv_param_11_0=RULE_ID
					{
						newLeafNode(lv_param_11_0, grammarAccess.getParamAccess().getParamIDTerminalRuleCall_5_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getParamRule());
						}
						setWithLastConsumed(
							$current,
							"param",
							lv_param_11_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
		)
	)
;

// Entry rule entryRuleTypeName
entryRuleTypeName returns [String current=null]:
	{ newCompositeNode(grammarAccess.getTypeNameRule()); }
	iv_ruleTypeName=ruleTypeName
	{ $current=$iv_ruleTypeName.current.getText(); }
	EOF;

// Rule TypeName
ruleTypeName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='null'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTypeNameAccess().getNullKeyword_0());
		}
		    |
		kw='real'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTypeNameAccess().getRealKeyword_1());
		}
		    |
		kw='boolean'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTypeNameAccess().getBooleanKeyword_2());
		}
		    |
		kw='string'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTypeNameAccess().getStringKeyword_3());
		}
	)
;

// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	iv_ruleStatement=ruleStatement
	{ $current=$iv_ruleStatement.current; }
	EOF;

// Rule Statement
ruleStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getStatementAccess().getVariableDeclarationParserRuleCall_0());
		}
		this_VariableDeclaration_0=ruleVariableDeclaration
		{
			$current = $this_VariableDeclaration_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getLoopStatementParserRuleCall_1());
		}
		this_LoopStatement_1=ruleLoopStatement
		{
			$current = $this_LoopStatement_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleVariableDeclaration
entryRuleVariableDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableDeclarationRule()); }
	iv_ruleVariableDeclaration=ruleVariableDeclaration
	{ $current=$iv_ruleVariableDeclaration.current; }
	EOF;

// Rule VariableDeclaration
ruleVariableDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='var'
		{
			newLeafNode(otherlv_0, grammarAccess.getVariableDeclarationAccess().getVarKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getVariableDeclarationAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVariableDeclarationRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='='
		{
			newLeafNode(otherlv_2, grammarAccess.getVariableDeclarationAccess().getEqualsSignKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getVariableDeclarationAccess().getValueVariableExpressionParserRuleCall_3_0());
				}
				lv_value_3_0=ruleVariableExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVariableDeclarationRule());
					}
					set(
						$current,
						"value",
						lv_value_3_0,
						"uk.ac.kcl.farm.Farm.VariableExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleVariableExpression
entryRuleVariableExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableExpressionRule()); }
	iv_ruleVariableExpression=ruleVariableExpression
	{ $current=$iv_ruleVariableExpression.current; }
	EOF;

// Rule VariableExpression
ruleVariableExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getVariableExpressionAccess().getRealExpressionParserRuleCall_0());
		}
		this_RealExpression_0=ruleRealExpression
		{
			$current = $this_RealExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getVariableExpressionAccess().getConditionExpressionParserRuleCall_1());
		}
		this_ConditionExpression_1=ruleConditionExpression
		{
			$current = $this_ConditionExpression_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleLoopStatement
entryRuleLoopStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLoopStatementRule()); }
	iv_ruleLoopStatement=ruleLoopStatement
	{ $current=$iv_ruleLoopStatement.current; }
	EOF;

// Rule LoopStatement
ruleLoopStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='while'
		{
			newLeafNode(otherlv_0, grammarAccess.getLoopStatementAccess().getWhileKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getLoopStatementAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLoopStatementAccess().getConditionConditionExpressionParserRuleCall_2_0());
				}
				lv_condition_2_0=ruleConditionExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLoopStatementRule());
					}
					set(
						$current,
						"condition",
						lv_condition_2_0,
						"uk.ac.kcl.farm.Farm.ConditionExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getLoopStatementAccess().getRightParenthesisKeyword_3());
		}
		otherlv_4='{'
		{
			newLeafNode(otherlv_4, grammarAccess.getLoopStatementAccess().getLeftCurlyBracketKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLoopStatementAccess().getStatementsStatementParserRuleCall_5_0());
				}
				lv_statements_5_0=ruleStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLoopStatementRule());
					}
					add(
						$current,
						"statements",
						lv_statements_5_0,
						"uk.ac.kcl.farm.Farm.Statement");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_6='}'
		{
			newLeafNode(otherlv_6, grammarAccess.getLoopStatementAccess().getRightCurlyBracketKeyword_6());
		}
	)
;

// Entry rule entryRuleRealExpression
entryRuleRealExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRealExpressionRule()); }
	iv_ruleRealExpression=ruleRealExpression
	{ $current=$iv_ruleRealExpression.current; }
	EOF;

// Rule RealExpression
ruleRealExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getRealExpressionAccess().getAdditionParserRuleCall());
	}
	this_Addition_0=ruleAddition
	{
		$current = $this_Addition_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleAddition
entryRuleAddition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAdditionRule()); }
	iv_ruleAddition=ruleAddition
	{ $current=$iv_ruleAddition.current; }
	EOF;

// Rule Addition
ruleAddition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAdditionAccess().getMultiplicationParserRuleCall_0());
		}
		this_Multiplication_0=ruleMultiplication
		{
			$current = $this_Multiplication_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getAdditionAccess().getAdditionLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					(
						lv_operator_2_1='+'
						{
							newLeafNode(lv_operator_2_1, grammarAccess.getAdditionAccess().getOperatorPlusSignKeyword_1_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getAdditionRule());
							}
							addWithLastConsumed($current, "operator", lv_operator_2_1, null);
						}
						    |
						lv_operator_2_2='-'
						{
							newLeafNode(lv_operator_2_2, grammarAccess.getAdditionAccess().getOperatorHyphenMinusKeyword_1_1_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getAdditionRule());
							}
							addWithLastConsumed($current, "operator", lv_operator_2_2, null);
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getAdditionAccess().getRightMultiplicationParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleMultiplication
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAdditionRule());
						}
						add(
							$current,
							"right",
							lv_right_3_0,
							"uk.ac.kcl.farm.Farm.Multiplication");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleMultiplication
entryRuleMultiplication returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMultiplicationRule()); }
	iv_ruleMultiplication=ruleMultiplication
	{ $current=$iv_ruleMultiplication.current; }
	EOF;

// Rule Multiplication
ruleMultiplication returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getMultiplicationAccess().getRealPrimaryParserRuleCall_0());
		}
		this_RealPrimary_0=ruleRealPrimary
		{
			$current = $this_RealPrimary_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getMultiplicationAccess().getMultiplicationLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					(
						lv_operator_2_1='*'
						{
							newLeafNode(lv_operator_2_1, grammarAccess.getMultiplicationAccess().getOperatorAsteriskKeyword_1_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getMultiplicationRule());
							}
							addWithLastConsumed($current, "operator", lv_operator_2_1, null);
						}
						    |
						lv_operator_2_2='/'
						{
							newLeafNode(lv_operator_2_2, grammarAccess.getMultiplicationAccess().getOperatorSolidusKeyword_1_1_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getMultiplicationRule());
							}
							addWithLastConsumed($current, "operator", lv_operator_2_2, null);
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getMultiplicationAccess().getRightRealPrimaryParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleRealPrimary
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMultiplicationRule());
						}
						add(
							$current,
							"right",
							lv_right_3_0,
							"uk.ac.kcl.farm.Farm.RealPrimary");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleRealPrimary
entryRuleRealPrimary returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRealPrimaryRule()); }
	iv_ruleRealPrimary=ruleRealPrimary
	{ $current=$iv_ruleRealPrimary.current; }
	EOF;

// Rule RealPrimary
ruleRealPrimary returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getRealPrimaryAccess().getRealLiteralParserRuleCall_0());
		}
		this_RealLiteral_0=ruleRealLiteral
		{
			$current = $this_RealLiteral_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getRealPrimaryAccess().getRealVarExpressionParserRuleCall_1());
		}
		this_RealVarExpression_1=ruleRealVarExpression
		{
			$current = $this_RealVarExpression_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			otherlv_2='('
			{
				newLeafNode(otherlv_2, grammarAccess.getRealPrimaryAccess().getLeftParenthesisKeyword_2_0());
			}
			{
				newCompositeNode(grammarAccess.getRealPrimaryAccess().getAdditionParserRuleCall_2_1());
			}
			this_Addition_3=ruleAddition
			{
				$current = $this_Addition_3.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_4=')'
			{
				newLeafNode(otherlv_4, grammarAccess.getRealPrimaryAccess().getRightParenthesisKeyword_2_2());
			}
		)
	)
;

// Entry rule entryRuleRealLiteral
entryRuleRealLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRealLiteralRule()); }
	iv_ruleRealLiteral=ruleRealLiteral
	{ $current=$iv_ruleRealLiteral.current; }
	EOF;

// Rule RealLiteral
ruleRealLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getRealLiteralAccess().getValREALParserRuleCall_0());
			}
			lv_val_0_0=ruleREAL
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getRealLiteralRule());
				}
				set(
					$current,
					"val",
					lv_val_0_0,
					"uk.ac.kcl.farm.Farm.REAL");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleRealVarExpression
entryRuleRealVarExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRealVarExpressionRule()); }
	iv_ruleRealVarExpression=ruleRealVarExpression
	{ $current=$iv_ruleRealVarExpression.current; }
	EOF;

// Rule RealVarExpression
ruleRealVarExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getRealVarExpressionRule());
				}
			}
			otherlv_0=RULE_ID
			{
				newLeafNode(otherlv_0, grammarAccess.getRealVarExpressionAccess().getVarVariableDeclarationCrossReference_0());
			}
		)
	)
;

// Entry rule entryRuleREAL
entryRuleREAL returns [String current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}:
	{ newCompositeNode(grammarAccess.getREALRule()); }
	iv_ruleREAL=ruleREAL
	{ $current=$iv_ruleREAL.current.getText(); }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule REAL
ruleREAL returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}
@after {
	leaveRule();
}:
	(
		(
			this_INT_0=RULE_INT
			{
				$current.merge(this_INT_0);
			}
			{
				newLeafNode(this_INT_0, grammarAccess.getREALAccess().getINTTerminalRuleCall_0());
			}
		)?
		kw='.'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getREALAccess().getFullStopKeyword_1());
		}
		this_INT_2=RULE_INT
		{
			$current.merge(this_INT_2);
		}
		{
			newLeafNode(this_INT_2, grammarAccess.getREALAccess().getINTTerminalRuleCall_2());
		}
	)
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRuleConditionExpression
entryRuleConditionExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConditionExpressionRule()); }
	iv_ruleConditionExpression=ruleConditionExpression
	{ $current=$iv_ruleConditionExpression.current; }
	EOF;

// Rule ConditionExpression
ruleConditionExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getConditionExpressionAccess().getOrExpressionParserRuleCall());
	}
	this_OrExpression_0=ruleOrExpression
	{
		$current = $this_OrExpression_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleOrExpression
entryRuleOrExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOrExpressionRule()); }
	iv_ruleOrExpression=ruleOrExpression
	{ $current=$iv_ruleOrExpression.current; }
	EOF;

// Rule OrExpression
ruleOrExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getOrExpressionAccess().getAndExpressionParserRuleCall_0());
		}
		this_AndExpression_0=ruleAndExpression
		{
			$current = $this_AndExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getOrExpressionAccess().getOrExpressionLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					lv_operator_2_0='||'
					{
						newLeafNode(lv_operator_2_0, grammarAccess.getOrExpressionAccess().getOperatorVerticalLineVerticalLineKeyword_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getOrExpressionRule());
						}
						addWithLastConsumed($current, "operator", lv_operator_2_0, "||");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getOrExpressionAccess().getRightAndExpressionParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleAndExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getOrExpressionRule());
						}
						add(
							$current,
							"right",
							lv_right_3_0,
							"uk.ac.kcl.farm.Farm.AndExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleAndExpression
entryRuleAndExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAndExpressionRule()); }
	iv_ruleAndExpression=ruleAndExpression
	{ $current=$iv_ruleAndExpression.current; }
	EOF;

// Rule AndExpression
ruleAndExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAndExpressionAccess().getComparisonExpressionParserRuleCall_0());
		}
		this_ComparisonExpression_0=ruleComparisonExpression
		{
			$current = $this_ComparisonExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getAndExpressionAccess().getAndExpressionLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					lv_operator_2_0='&&'
					{
						newLeafNode(lv_operator_2_0, grammarAccess.getAndExpressionAccess().getOperatorAmpersandAmpersandKeyword_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAndExpressionRule());
						}
						addWithLastConsumed($current, "operator", lv_operator_2_0, "&&");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getAndExpressionAccess().getRightComparisonExpressionParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleComparisonExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAndExpressionRule());
						}
						add(
							$current,
							"right",
							lv_right_3_0,
							"uk.ac.kcl.farm.Farm.ComparisonExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleComparisonExpression
entryRuleComparisonExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getComparisonExpressionRule()); }
	iv_ruleComparisonExpression=ruleComparisonExpression
	{ $current=$iv_ruleComparisonExpression.current; }
	EOF;

// Rule ComparisonExpression
ruleComparisonExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getComparisonExpressionAccess().getBooleanPrimaryParserRuleCall_0());
		}
		this_BooleanPrimary_0=ruleBooleanPrimary
		{
			$current = $this_BooleanPrimary_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getComparisonExpressionAccess().getComparisonExpressionLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					(
						lv_operator_2_1='<'
						{
							newLeafNode(lv_operator_2_1, grammarAccess.getComparisonExpressionAccess().getOperatorLessThanSignKeyword_1_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getComparisonExpressionRule());
							}
							setWithLastConsumed($current, "operator", lv_operator_2_1, null);
						}
						    |
						lv_operator_2_2='<='
						{
							newLeafNode(lv_operator_2_2, grammarAccess.getComparisonExpressionAccess().getOperatorLessThanSignEqualsSignKeyword_1_1_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getComparisonExpressionRule());
							}
							setWithLastConsumed($current, "operator", lv_operator_2_2, null);
						}
						    |
						lv_operator_2_3='=='
						{
							newLeafNode(lv_operator_2_3, grammarAccess.getComparisonExpressionAccess().getOperatorEqualsSignEqualsSignKeyword_1_1_0_2());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getComparisonExpressionRule());
							}
							setWithLastConsumed($current, "operator", lv_operator_2_3, null);
						}
						    |
						lv_operator_2_4='>='
						{
							newLeafNode(lv_operator_2_4, grammarAccess.getComparisonExpressionAccess().getOperatorGreaterThanSignEqualsSignKeyword_1_1_0_3());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getComparisonExpressionRule());
							}
							setWithLastConsumed($current, "operator", lv_operator_2_4, null);
						}
						    |
						lv_operator_2_5='>'
						{
							newLeafNode(lv_operator_2_5, grammarAccess.getComparisonExpressionAccess().getOperatorGreaterThanSignKeyword_1_1_0_4());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getComparisonExpressionRule());
							}
							setWithLastConsumed($current, "operator", lv_operator_2_5, null);
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getComparisonExpressionAccess().getRightBooleanPrimaryParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleBooleanPrimary
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getComparisonExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"uk.ac.kcl.farm.Farm.BooleanPrimary");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleBooleanPrimary
entryRuleBooleanPrimary returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBooleanPrimaryRule()); }
	iv_ruleBooleanPrimary=ruleBooleanPrimary
	{ $current=$iv_ruleBooleanPrimary.current; }
	EOF;

// Rule BooleanPrimary
ruleBooleanPrimary returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getBooleanPrimaryAccess().getBooleanLiteralParserRuleCall_0());
		}
		this_BooleanLiteral_0=ruleBooleanLiteral
		{
			$current = $this_BooleanLiteral_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			otherlv_1='['
			{
				newLeafNode(otherlv_1, grammarAccess.getBooleanPrimaryAccess().getLeftSquareBracketKeyword_1_0());
			}
			{
				newCompositeNode(grammarAccess.getBooleanPrimaryAccess().getOrExpressionParserRuleCall_1_1());
			}
			this_OrExpression_2=ruleOrExpression
			{
				$current = $this_OrExpression_2.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_3=']'
			{
				newLeafNode(otherlv_3, grammarAccess.getBooleanPrimaryAccess().getRightSquareBracketKeyword_1_2());
			}
		)
		    |
		{
			newCompositeNode(grammarAccess.getBooleanPrimaryAccess().getBooleanVarExpressionParserRuleCall_2());
		}
		this_BooleanVarExpression_4=ruleBooleanVarExpression
		{
			$current = $this_BooleanVarExpression_4.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleBooleanLiteral
entryRuleBooleanLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBooleanLiteralRule()); }
	iv_ruleBooleanLiteral=ruleBooleanLiteral
	{ $current=$iv_ruleBooleanLiteral.current; }
	EOF;

// Rule BooleanLiteral
ruleBooleanLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_val_0_0='true'
				{
					newLeafNode(lv_val_0_0, grammarAccess.getBooleanLiteralAccess().getValTrueKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBooleanLiteralRule());
					}
					setWithLastConsumed($current, "val", lv_val_0_0, "true");
				}
			)
		)
		    |
		otherlv_1='false'
		{
			newLeafNode(otherlv_1, grammarAccess.getBooleanLiteralAccess().getFalseKeyword_1());
		}
	)
;

// Entry rule entryRuleBooleanVarExpression
entryRuleBooleanVarExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBooleanVarExpressionRule()); }
	iv_ruleBooleanVarExpression=ruleBooleanVarExpression
	{ $current=$iv_ruleBooleanVarExpression.current; }
	EOF;

// Rule BooleanVarExpression
ruleBooleanVarExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getBooleanVarExpressionRule());
				}
			}
			otherlv_0=RULE_ID
			{
				newLeafNode(otherlv_0, grammarAccess.getBooleanVarExpressionAccess().getVarVariableDeclarationCrossReference_0());
			}
		)
	)
;

// Entry rule entryRuleAttributeDeclaration
entryRuleAttributeDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAttributeDeclarationRule()); }
	iv_ruleAttributeDeclaration=ruleAttributeDeclaration
	{ $current=$iv_ruleAttributeDeclaration.current; }
	EOF;

// Rule AttributeDeclaration
ruleAttributeDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='define'
		{
			newLeafNode(otherlv_0, grammarAccess.getAttributeDeclarationAccess().getDefineKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getAttributeDeclarationAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAttributeDeclarationRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleCrop
entryRuleCrop returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCropRule()); }
	iv_ruleCrop=ruleCrop
	{ $current=$iv_ruleCrop.current; }
	EOF;

// Rule Crop
ruleCrop returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='crop'
		{
			newLeafNode(otherlv_0, grammarAccess.getCropAccess().getCropKeyword_0());
		}
		(
			(
				lv_crop_1_0=RULE_ID
				{
					newLeafNode(lv_crop_1_0, grammarAccess.getCropAccess().getCropIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCropRule());
					}
					setWithLastConsumed(
						$current,
						"crop",
						lv_crop_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getCropAccess().getLeftCurlyBracketKeyword_2());
		}
		otherlv_3='name'
		{
			newLeafNode(otherlv_3, grammarAccess.getCropAccess().getNameKeyword_3());
		}
		otherlv_4=':'
		{
			newLeafNode(otherlv_4, grammarAccess.getCropAccess().getColonKeyword_4());
		}
		(
			(
				lv_cropName_5_0=RULE_STRING
				{
					newLeafNode(lv_cropName_5_0, grammarAccess.getCropAccess().getCropNameSTRINGTerminalRuleCall_5_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCropRule());
					}
					setWithLastConsumed(
						$current,
						"cropName",
						lv_cropName_5_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_6='stage'
		{
			newLeafNode(otherlv_6, grammarAccess.getCropAccess().getStageKeyword_6());
		}
		otherlv_7=':'
		{
			newLeafNode(otherlv_7, grammarAccess.getCropAccess().getColonKeyword_7());
		}
		otherlv_8='['
		{
			newLeafNode(otherlv_8, grammarAccess.getCropAccess().getLeftSquareBracketKeyword_8());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCropAccess().getStatementsCropStagesParserRuleCall_9_0());
				}
				lv_statements_9_0=ruleCropStages
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCropRule());
					}
					add(
						$current,
						"statements",
						lv_statements_9_0,
						"uk.ac.kcl.farm.Farm.CropStages");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_10=']'
		{
			newLeafNode(otherlv_10, grammarAccess.getCropAccess().getRightSquareBracketKeyword_10());
		}
		otherlv_11='}'
		{
			newLeafNode(otherlv_11, grammarAccess.getCropAccess().getRightCurlyBracketKeyword_11());
		}
	)
;

// Entry rule entryRuleCropStages
entryRuleCropStages returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCropStagesRule()); }
	iv_ruleCropStages=ruleCropStages
	{ $current=$iv_ruleCropStages.current; }
	EOF;

// Rule CropStages
ruleCropStages returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getCropStagesAccess().getElementsCropStageParserRuleCall_0_0());
				}
				lv_elements_0_0=ruleCropStage
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCropStagesRule());
					}
					add(
						$current,
						"elements",
						lv_elements_0_0,
						"uk.ac.kcl.farm.Farm.CropStage");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1=','
			{
				newLeafNode(otherlv_1, grammarAccess.getCropStagesAccess().getCommaKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getCropStagesAccess().getElementsCropStageParserRuleCall_1_1_0());
					}
					lv_elements_2_0=ruleCropStage
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCropStagesRule());
						}
						add(
							$current,
							"elements",
							lv_elements_2_0,
							"uk.ac.kcl.farm.Farm.CropStage");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleCropStage
entryRuleCropStage returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCropStageRule()); }
	iv_ruleCropStage=ruleCropStage
	{ $current=$iv_ruleCropStage.current; }
	EOF;

// Rule CropStage
ruleCropStage returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='{'
		{
			newLeafNode(otherlv_0, grammarAccess.getCropStageAccess().getLeftCurlyBracketKeyword_0());
		}
		otherlv_1='name'
		{
			newLeafNode(otherlv_1, grammarAccess.getCropStageAccess().getNameKeyword_1());
		}
		otherlv_2=':'
		{
			newLeafNode(otherlv_2, grammarAccess.getCropStageAccess().getColonKeyword_2());
		}
		(
			(
				lv_name_3_0=RULE_STRING
				{
					newLeafNode(lv_name_3_0, grammarAccess.getCropStageAccess().getNameSTRINGTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCropStageRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_3_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_4='timeConsumed'
		{
			newLeafNode(otherlv_4, grammarAccess.getCropStageAccess().getTimeConsumedKeyword_4());
		}
		otherlv_5=':'
		{
			newLeafNode(otherlv_5, grammarAccess.getCropStageAccess().getColonKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCropStageAccess().getTimeConsumendRealExpressionParserRuleCall_6_0());
				}
				lv_timeConsumend_6_0=ruleRealExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCropStageRule());
					}
					set(
						$current,
						"timeConsumend",
						lv_timeConsumend_6_0,
						"uk.ac.kcl.farm.Farm.RealExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getCropStageAccess().getElementsCropAttributesParserRuleCall_7_0());
				}
				lv_elements_7_0=ruleCropAttributes
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCropStageRule());
					}
					add(
						$current,
						"elements",
						lv_elements_7_0,
						"uk.ac.kcl.farm.Farm.CropAttributes");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_8='}'
		{
			newLeafNode(otherlv_8, grammarAccess.getCropStageAccess().getRightCurlyBracketKeyword_8());
		}
	)
;

// Entry rule entryRuleCropAttributes
entryRuleCropAttributes returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCropAttributesRule()); }
	iv_ruleCropAttributes=ruleCropAttributes
	{ $current=$iv_ruleCropAttributes.current; }
	EOF;

// Rule CropAttributes
ruleCropAttributes returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCropAttributesRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getCropAttributesAccess().getTypeAttributeDeclarationCrossReference_0_0());
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getCropAttributesAccess().getColonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCropAttributesAccess().getValueRealExpressionParserRuleCall_2_0());
				}
				lv_value_2_0=ruleRealExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCropAttributesRule());
					}
					set(
						$current,
						"value",
						lv_value_2_0,
						"uk.ac.kcl.farm.Farm.RealExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleMachine
entryRuleMachine returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMachineRule()); }
	iv_ruleMachine=ruleMachine
	{ $current=$iv_ruleMachine.current; }
	EOF;

// Rule Machine
ruleMachine returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='machine'
		{
			newLeafNode(otherlv_0, grammarAccess.getMachineAccess().getMachineKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getMachineAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMachineRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getMachineAccess().getLeftCurlyBracketKeyword_2());
		}
		otherlv_3='name'
		{
			newLeafNode(otherlv_3, grammarAccess.getMachineAccess().getNameKeyword_3());
		}
		otherlv_4=':'
		{
			newLeafNode(otherlv_4, grammarAccess.getMachineAccess().getColonKeyword_4());
		}
		(
			(
				lv_machineName_5_0=RULE_STRING
				{
					newLeafNode(lv_machineName_5_0, grammarAccess.getMachineAccess().getMachineNameSTRINGTerminalRuleCall_5_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMachineRule());
					}
					setWithLastConsumed(
						$current,
						"machineName",
						lv_machineName_5_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_6='ip'
		{
			newLeafNode(otherlv_6, grammarAccess.getMachineAccess().getIpKeyword_6());
		}
		otherlv_7=':'
		{
			newLeafNode(otherlv_7, grammarAccess.getMachineAccess().getColonKeyword_7());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMachineAccess().getIpIPParserRuleCall_8_0());
				}
				lv_ip_8_0=ruleIP
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMachineRule());
					}
					set(
						$current,
						"ip",
						lv_ip_8_0,
						"uk.ac.kcl.farm.Farm.IP");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getMachineAccess().getStatementsTaskParserRuleCall_9_0());
				}
				lv_statements_9_0=ruleTask
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMachineRule());
					}
					add(
						$current,
						"statements",
						lv_statements_9_0,
						"uk.ac.kcl.farm.Farm.Task");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_10='}'
		{
			newLeafNode(otherlv_10, grammarAccess.getMachineAccess().getRightCurlyBracketKeyword_10());
		}
	)
;

// Entry rule entryRuleIP
entryRuleIP returns [String current=null]:
	{ newCompositeNode(grammarAccess.getIPRule()); }
	iv_ruleIP=ruleIP
	{ $current=$iv_ruleIP.current.getText(); }
	EOF;

// Rule IP
ruleIP returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_INT_0=RULE_INT
		{
			$current.merge(this_INT_0);
		}
		{
			newLeafNode(this_INT_0, grammarAccess.getIPAccess().getINTTerminalRuleCall_0());
		}
		kw='.'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getIPAccess().getFullStopKeyword_1());
		}
		(
			this_INT_2=RULE_INT
			{
				$current.merge(this_INT_2);
			}
			{
				newLeafNode(this_INT_2, grammarAccess.getIPAccess().getINTTerminalRuleCall_2_0());
			}
			kw='.'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getIPAccess().getFullStopKeyword_2_1());
			}
			(
				this_INT_4=RULE_INT
				{
					$current.merge(this_INT_4);
				}
				{
					newLeafNode(this_INT_4, grammarAccess.getIPAccess().getINTTerminalRuleCall_2_2_0());
				}
				kw='.'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getIPAccess().getFullStopKeyword_2_2_1());
				}
				this_INT_6=RULE_INT
				{
					$current.merge(this_INT_6);
				}
				{
					newLeafNode(this_INT_6, grammarAccess.getIPAccess().getINTTerminalRuleCall_2_2_2());
				}
			)
		)
	)
;

// Entry rule entryRuleField
entryRuleField returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFieldRule()); }
	iv_ruleField=ruleField
	{ $current=$iv_ruleField.current; }
	EOF;

// Rule Field
ruleField returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='field'
		{
			newLeafNode(otherlv_0, grammarAccess.getFieldAccess().getFieldKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getFieldAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFieldRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getFieldAccess().getLeftCurlyBracketKeyword_2());
		}
		otherlv_3='field'
		{
			newLeafNode(otherlv_3, grammarAccess.getFieldAccess().getFieldKeyword_3());
		}
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getFieldAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleMission
entryRuleMission returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMissionRule()); }
	iv_ruleMission=ruleMission
	{ $current=$iv_ruleMission.current; }
	EOF;

// Rule Mission
ruleMission returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='mission'
		{
			newLeafNode(otherlv_0, grammarAccess.getMissionAccess().getMissionKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getMissionAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMissionRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getMissionAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getMissionAccess().getStatementsStatementParserRuleCall_3_0_0());
					}
					lv_statements_3_1=ruleStatement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMissionRule());
						}
						add(
							$current,
							"statements",
							lv_statements_3_1,
							"uk.ac.kcl.farm.Farm.Statement");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getMissionAccess().getStatementsTaskParserRuleCall_3_0_1());
					}
					lv_statements_3_2=ruleTask
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMissionRule());
						}
						add(
							$current,
							"statements",
							lv_statements_3_2,
							"uk.ac.kcl.farm.Farm.Task");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)+
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getMissionAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleTask
entryRuleTask returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTaskRule()); }
	iv_ruleTask=ruleTask
	{ $current=$iv_ruleTask.current; }
	EOF;

// Rule Task
ruleTask returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='task'
		{
			newLeafNode(otherlv_0, grammarAccess.getTaskAccess().getTaskKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getTaskAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTaskRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getTaskAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getTaskAccess().getParmasParamParserRuleCall_3_0_0());
					}
					lv_parmas_3_0=ruleParam
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTaskRule());
						}
						add(
							$current,
							"parmas",
							lv_parmas_3_0,
							"uk.ac.kcl.farm.Farm.Param");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_4=','
				{
					newLeafNode(otherlv_4, grammarAccess.getTaskAccess().getCommaKeyword_3_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getTaskAccess().getParmasParamParserRuleCall_3_1_1_0());
						}
						lv_parmas_5_0=ruleParam
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getTaskRule());
							}
							add(
								$current,
								"parmas",
								lv_parmas_5_0,
								"uk.ac.kcl.farm.Farm.Param");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_6=')'
		{
			newLeafNode(otherlv_6, grammarAccess.getTaskAccess().getRightParenthesisKeyword_4());
		}
		otherlv_7=':'
		{
			newLeafNode(otherlv_7, grammarAccess.getTaskAccess().getColonKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTaskAccess().getTypeNameTypeNameParserRuleCall_6_0());
				}
				lv_typeName_8_0=ruleTypeName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTaskRule());
					}
					set(
						$current,
						"typeName",
						lv_typeName_8_0,
						"uk.ac.kcl.farm.Farm.TypeName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_9='{'
		{
			newLeafNode(otherlv_9, grammarAccess.getTaskAccess().getLeftCurlyBracketKeyword_7());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTaskAccess().getStatementsStatementParserRuleCall_8_0());
				}
				lv_statements_10_0=ruleStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTaskRule());
					}
					add(
						$current,
						"statements",
						lv_statements_10_0,
						"uk.ac.kcl.farm.Farm.Statement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_11='}'
		{
			newLeafNode(otherlv_11, grammarAccess.getTaskAccess().getRightCurlyBracketKeyword_9());
		}
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
