grammar uk.ac.kcl.farm.Farm with org.eclipse.xtext.common.Terminals

generate farm "http://www.ac.uk/kcl/farm/Farm"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

FarmProgram:
	statements += (
		Attribute |
		Crop |
		Field |
		Mission
	)+
;

// General statement

Statement:
	Variable |
	Assignment |
	LoopStatement |
	JudgeStatement |
	BuiltinFunction
;

// Define codes
Attribute:
	"define" name=ID
;

ExpressionOrCall:
	Expression | Call
;

Variable:
	"var" name=ID "=" expression=ExpressionOrCall
;

VarExpression:
	var=[Variable]
;

Assignment:
	var=[Variable] "=" expression=ExpressionOrCall
;

Call hidden():
	instance=[Instance] (
		("." attributes+=ID) | ("." functions+=CallFunction))+
;

LoopStatement:
	"while" "(" condition=Expression ")" "{"
		loopStatements += Statement*
	"}"
;

JudgeStatement:
	"if" "(" condition=Expression ")" "{"
		judgeStatements += Statement*
	"}" 
	elseJudgeStatements += ElseJudgeStatement*
	elseStatement += ElseStatement?
;

ElseJudgeStatement:
	"elseif" "(" condition=Expression ")" "{"
		elseJudgeStatements += Statement*
	"}"
;

ElseStatement:
	{ElseStatement}
	"else" "{" elseStatements += Statement* "}"
;

/*
 * Built-in Functions
 */
 
BuiltinFunction:
	ReportFunction |
	MoveFunction |
	WaitFunction
;

Instance:
	Crop |
	Field |
	Variable
;

ReportFunction:
	"report(" instance=[Instance | ID] ")"
;

MoveFunction:
	"move(" moveFromField=[Field | ID] ","  moveToField=[Field | ID] ")"
;

WaitFunction:
	"wait(" value=Expression ")"
;

/*
 * Call Functions
 */

CallFunction:
	GetStageFunction |
	FieldSetFunction |
	PlantFunction
;

GetStageFunction hidden():
	"getStage(" id=INT (")." attribute=(
		"timeConsumed" |
		ID
	))
;

FieldSetFunction:
	"fieldSet(" attribute=[Attribute] "," value=AdditionExpression ")"
;

PlantFunction:
	"plant(" plantCrop=[Crop | ID] ")"
;


//Expressions

Expression:
	ConditionOrExpression
;

ConditionOrExpression returns Expression:
	ConditionAndExpression => (
		{ConditionOrExpression.left=current} "||" right=ConditionAndExpression
	)*
;

ConditionAndExpression returns Expression:
	RelationOrExpression => (
		{ConditionAndExpression.left=current} "&&" right=RelationOrExpression
	)*
;

RelationOrExpression returns Expression:
	AdditionExpression ( => (
		{LessThanOrEqual.left=current} "<=" |
		{LessThan.left=current} "<" |
		{GreaterThanOrEqual.left=current} ">=" |
		{GreaterThan.left=current} ">" |
		{Equal.left=current} "==" |
		{NotEqual.left=current} "!="
	) right=AdditionExpression )* 
;

AdditionExpression returns Expression:
	MultiplicationExpression ( => (
		{Plus.left=current} "+" |
		{Minus.left=current} "-"
	) right=MultiplicationExpression )*
;

MultiplicationExpression returns Expression:
	UnaryExpression ( => (
		{Multiply.left=current} "*" | 
		{Divide.left=current} "/" 
	) right=UnaryExpression )*
;

UnaryExpression returns Expression:
	UnaryExpressionNotPlusMinus |
	({UnaryExpression} "-" exp=UnaryExpression) 
;

UnaryExpressionNotPlusMinus returns Expression:
	NotBooleanExpression | PrimaryExpression
;

NotBooleanExpression:
	"!" exp=UnaryExpression
;

PrimaryExpression returns Expression:
	Literal |
	VarExpression |
	"(" Expression ")"
;

Literal:
	TrueLiteral | FalseLiteral | RealLiteral
;

TrueLiteral:
	{TrueLiteral} value="true"
;

FalseLiteral:
	{FalseLiteral} value="false"
;

//BOOLEAN returns ecore::EBoolean hidden():
//	"true" | "false"
//;

RealLiteral:
	{RealLiteral} num=REAL
;

REAL returns ecore::EFloat hidden():
	INT? "." INT
;

// Crop code block
Crop:
	"crop" name=ID "{"
		"name" ":" cropName=STRING
		"stage" ":" "["
			cropStages += CropStages
		"]"
	"}"
;

CropStages:
	elements += CropStage ("," elements += CropStage)* 
;

CropStage:
	"{"	
		"name" ":" name=STRING
		"timeConsumed" ":" time=AdditionExpression
		"timeDanger" ":" timeover=AdditionExpression
		attributes += CallAttributes*
	"}"
;

// Field code block
Field:
	"field" name=ID "{"
		"name" ":" fieldName=STRING
		"ip" ":" fieldIP=STRING
		"type" ":" fieldType=("inside" | "outside")
		"light" ":" fieldLight=("sunlight" | "LED")
		attributes += CallAttributes*
	"}"
;


CallAttributes:
	type=[Attribute | ID] ":" value=AdditionExpression
;

// Main code block
Mission:
	"mission" "{"
		missionStatements += Statement* // (ExecuteStatement| TaskStatement)+
	"}"
;