/*
 * generated by Xtext 2.18.0.M3
 */
package uk.ac.kcl.farm.scoping

import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.scoping.IScope
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider

import uk.ac.kcl.farm.farm.Mission
import uk.ac.kcl.farm.farm.Variable
import uk.ac.kcl.farm.farm.Expression
import uk.ac.kcl.farm.farm.ReportFunction
import uk.ac.kcl.farm.farm.LoopStatement
//import uk.ac.kcl.farm.farm.TaskStatement
//import uk.ac.kcl.farm.farm.ExecuteStatement
//import uk.ac.kcl.farm.farm.JudgeStatement
//import uk.ac.kcl.farm.farm.ElseJudgeStatement
//import uk.ac.kcl.farm.farm.ElseStatement

import static org.eclipse.xtext.scoping.Scopes.*

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class FarmScopeProvider extends AbstractDeclarativeScopeProvider {
	
	def IScope scope_ReportFunction_var(ReportFunction context, EReference ref) {
      	context.visibleVariablesScope
	}

	def IScope scope_Expression_expression(Expression context) {
      	context.visibleVariablesScope
	}
	
	dispatch def IScope visibleVariablesScope(Mission context) {
		scopeFor(context.missionStatements.filter(Variable))
	}	
	
//	dispatch def IScope visibleVariablesScope(TaskStatement context) {
//		scopeFor(context.taskStatements.filter(Variable))
//	}
	
//	dispatch def IScope visibleVariablesScope(ExecuteStatement context) {
//		scopeFor(context.executeStatements.filter(Variable))
//	}
	

	dispatch def IScope visibleVariablesScope(LoopStatement context) {
		context.eContainer.internalVisibleVariablesScope
	}
	
//	dispatch def IScope internalVisibleVariablesScope(TaskStatement context) {
//		System.out.println(context.name);
//		scopeFor(context.taskStatements.filter(Variable))
//	}
	
//	dispatch def IScope internalVisibleVariablesScope(ExecuteStatement context) {
//		System.out.println(context.executeStatements);
//		scopeFor(context.executeStatements.filter(Variable))
//	}

	dispatch def IScope internalVisibleVariablesScope(Mission context) {
		scopeFor(context.missionStatements.filter(Variable))
	}
	
	dispatch def IScope internalVisibleVariablesScope(LoopStatement context) {
		scopeFor(context.loopStatements.filter(Variable), context.eContainer.internalVisibleVariablesScope)
	}

}
